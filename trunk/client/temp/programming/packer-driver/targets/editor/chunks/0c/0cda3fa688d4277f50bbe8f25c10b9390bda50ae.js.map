{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/diningtable/DiningTableManager.ts"],"names":["DiningTableInfo","DiningTableManager","Animation","UtilMgr","BoardMgr","DiningTableComponent","TableIngredients","constructor","node","leftChairNode","leftParentNode","IsSeat","tableNode","TableList","_tsIngredients","AddTable","diningTableComponent","getComponent","Table","LeftChair","LeftChairParent","ClearFood","push","anim","DiningEffect","stop","active","index","DiningFoodList","length","cell","GetRandomEmptyTableIndex","resultTable","table","EmptyId","getRandomNumber","IsHasEmptyTable","getRandomFood","RoleNum","SuCaiList","GetUniqueSuCaiList","result","uniqueIds","Set","numOfElements","maxElements","Math","min","floor","random","randomIndex","randomElement","SuCaiId","has","add","ShowFood","setTimeout","addNodeAnimation","FoodList","food","init","SetImage","picture","DiningTableMgr"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, EventTouch, Vec3, Sprite, Vec2, UITransform, view, Animation } from 'cc';\r\nimport { UtilMgr } from \"../manager/UtilManager\";\r\nimport { BoardMgr, BoardCell} from '../manager/BoardManager';\r\nimport { DiningTableComponent } from \"./DiningTableComponent\";\r\nimport { TableIngredients } from \"../../framework/common/table/TableIngredients\";\r\n\r\n\r\nexport class DiningTableInfo {\r\n    IsSeat : boolean = false;\r\n    tableNode : Node = null;\r\n    leftChairNode : Node = null;\r\n    leftParentNode : Node = null;\r\n    constructor(node: Node, leftChairNode : Node, leftParentNode : Node) {\r\n        this.tableNode = node;\r\n        this.IsSeat = false;\r\n        this.leftChairNode = leftChairNode;\r\n        this.leftParentNode = leftParentNode;\r\n      }\r\n}\r\n\r\nexport class DiningTableManager {\r\n    public TableList: DiningTableInfo[] = [];\r\n    private _tsIngredients = new TableIngredients();\r\n\r\n    public AddTable(tableNode:Node) {\r\n        const diningTableComponent = tableNode.getComponent(DiningTableComponent);\r\n        if (diningTableComponent) \r\n        {\r\n            let Table = new DiningTableInfo(tableNode, diningTableComponent.LeftChair, diningTableComponent.LeftChairParent);\r\n            this.ClearFood(tableNode);\r\n            this.TableList.push(Table);\r\n        }\r\n\r\n    }\r\n\r\n    public ClearFood(tableNode: Node) {\r\n        const diningTableComponent = tableNode.getComponent(DiningTableComponent);\r\n        if (diningTableComponent) \r\n        {\r\n            let anim = diningTableComponent.DiningEffect.getComponent(Animation);\r\n            if (anim) {\r\n                anim.stop();\r\n            }\r\n            diningTableComponent.DiningEffect.active = false;\r\n            \r\n            for (let index = 0; index < diningTableComponent.DiningFoodList.length; index++) {\r\n                const cell = diningTableComponent.DiningFoodList[index];\r\n                cell.node.active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    //随机找一个空桌子\r\n    public GetRandomEmptyTableIndex() : number {\r\n        let resultTable : number[] = [];\r\n        for (let index = 0; index < this.TableList.length; index++) {\r\n            const table = this.TableList[index];\r\n            if (!table.IsSeat)\r\n            {\r\n                resultTable.push(index);\r\n            }\r\n        }\r\n        if (resultTable.length > 0)\r\n        {\r\n            let EmptyId = UtilMgr.getRandomNumber(resultTable);\r\n            if (!this.TableList[EmptyId].IsSeat)\r\n            {\r\n                return EmptyId;\r\n            }\r\n            else\r\n            {\r\n                return -1;\r\n            }  \r\n        }\r\n\r\n        return -1;\r\n    }\r\n    //是否有空桌子\r\n    public IsHasEmptyTable() : boolean {\r\n        for (let index = 0; index < this.TableList.length; index++) {\r\n            const table = this.TableList[index];\r\n            if (!table.IsSeat)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //随机取出食材\r\n    public getRandomFood(RoleNum:number): BoardCell[] {\r\n        let SuCaiList = BoardMgr.GetUniqueSuCaiList();\r\n        let result: BoardCell[] = [];\r\n        let uniqueIds = new Set<number>(); // 用于跟踪已经选过的 id\r\n        \r\n        let numOfElements = 0;\r\n        if (RoleNum == 1)\r\n        {\r\n            // 随机生成 1 到 3 之间的数量，最多不能超过数组长度\r\n            const maxElements = Math.min(SuCaiList.length, 3);\r\n            numOfElements = Math.floor(Math.random() * maxElements) + 1;\r\n            if (numOfElements > SuCaiList.length)\r\n            {\r\n                numOfElements = SuCaiList.length;\r\n            }\r\n        }\r\n        else if (RoleNum == 2)\r\n        {\r\n            // 随机生成 3 到 5 之间的数量，最多不能超过数组长度\r\n            const maxElements = Math.min(SuCaiList.length, 5);\r\n            numOfElements = Math.floor(Math.random() * (maxElements - 3 + 1)) + 3;\r\n            if (numOfElements > SuCaiList.length)\r\n            {\r\n                numOfElements = SuCaiList.length;\r\n            }\r\n        }\r\n\r\n\r\n        while (result.length < numOfElements) {\r\n            let randomIndex = Math.floor(Math.random() * SuCaiList.length);\r\n            let randomElement = SuCaiList[randomIndex];\r\n\r\n            // 如果该元素的 id 没有被选过，添加到结果中\r\n            if (randomElement.SuCaiId > 0 && !uniqueIds.has(randomElement.SuCaiId)) {\r\n                uniqueIds.add(randomElement.SuCaiId);\r\n                result.push(randomElement);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    //显示食物\r\n    public ShowFood(tableNode: Node, RoleNum: number){\r\n        const diningTableComponent = tableNode.getComponent(DiningTableComponent);\r\n        if (diningTableComponent) \r\n        {\r\n            this.ClearFood(tableNode);\r\n            diningTableComponent.DiningEffect.active = true;\r\n            setTimeout(() => {\r\n                UtilMgr.addNodeAnimation(\"animation/chifan\", diningTableComponent.DiningEffect);\r\n            }, 1000);\r\n            \r\n            let FoodList = this.getRandomFood(RoleNum);\r\n            for (let index = 0; index < FoodList.length; index++) {\r\n                const food = FoodList[index];\r\n                const cell = diningTableComponent.DiningFoodList[index];\r\n                cell.node.active = true;\r\n                this._tsIngredients.init(food.SuCaiId);\r\n                UtilMgr.SetImage(cell, this._tsIngredients.picture);\r\n            }\r\n        }\r\n    }\r\n} \r\n\r\nexport var DiningTableMgr = new DiningTableManager();"]}