{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/liwu/LiWuFlyComponent.ts"],"names":["_decorator","Component","Vec3","Vec2","view","ccclass","property","LiWuFlyComponent","LiWuCallback","NodeSpeed","tempPosVec3","startPos","zOrder","TargetX","TargetY","FlyFlag","beginFly","targetPos","screenSize","getVisibleSize","set","node","position","x","y","getSiblingIndex","setSiblingIndex","endFly","p","setPosition","update","dt","SelfPos","getPosition","normalizeVec3","subtract","normalize","z","flyToPos","currentPos","threshold","distance"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, EventTouch, Vec3, Sprite, Vec2, UITransform, view } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\ntype LiWuFlyCallback = () => void;\r\n\r\n@ccclass('LiWuFlyComponent')\r\nexport class LiWuFlyComponent extends Component {\r\n\r\n    private LiWuCallback : LiWuFlyCallback = null;\r\n    private NodeSpeed = 400;\r\n    private tempPosVec3 : Vec3 = new Vec3();\r\n\r\n    private startPos:Vec2 = new Vec2(0, 0)\r\n    private zOrder:number\r\n    private TargetX : number = 0;\r\n    private TargetY : number = 0;\r\n\r\n    public FlyFlag : boolean = false;\r\n\r\n    public beginFly (targetPos : Vec3, LiWuCallback : LiWuFlyCallback)\r\n    {\r\n        this.LiWuCallback = LiWuCallback;\r\n        // 获取屏幕的大小\r\n        const screenSize = view.getVisibleSize();\r\n\r\n        this.startPos.set(this.node.position.x, this.node.position.y);\r\n        this.zOrder = this.node.getSiblingIndex();\r\n        this.node.setSiblingIndex(1001);\r\n        this.TargetX = targetPos.x;\r\n        this.TargetY = targetPos.y;\r\n        this.FlyFlag = true;\r\n    }\r\n\r\n    public endFly()\r\n    {\r\n        let p = new Vec3(this.TargetX , this.TargetY, 0);\r\n        this.node.setPosition(p)\r\n        this.node.setSiblingIndex(this.zOrder );\r\n        this.FlyFlag = false;\r\n        this.LiWuCallback();\r\n    }\r\n\r\n    update (dt: number) {\r\n        if (!this.FlyFlag) return;\r\n\r\n        let targetPos : Vec3 = new Vec3(this.TargetX, this.TargetY, 0);\r\n        let SelfPos : Vec3 = this.node.getPosition();\r\n        let normalizeVec3 : Vec3 = targetPos.subtract(SelfPos).normalize();\r\n\r\n        this.tempPosVec3.set(SelfPos.x + normalizeVec3.x * this.NodeSpeed * dt,\r\n            SelfPos.y + normalizeVec3.y * this.NodeSpeed *dt, SelfPos.z);\r\n        this.node.setPosition(this.tempPosVec3);\r\n\r\n        let flyToPos = new Vec3(this.TargetX, this.TargetY, 0);\r\n        let currentPos = this.node.position;\r\n\r\n        let threshold = 5;\r\n        let distance = Vec3.distance(currentPos, flyToPos);\r\n\r\n        if (distance <= threshold) {\r\n            this.endFly();\r\n        }\r\n    }\r\n}\r\n"]}