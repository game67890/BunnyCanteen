{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/task/AchievementItemVirtualGridList.ts"],"names":["_decorator","math","UITransform","VirtualGridList","IVirtualGridListItem","ccclass","property","AchievementItemVirtualGridList","rowNum","_lastContentPosX","_initializeList","_itemHeight","itemPrefab","data","getComponent","height","_itemWidth","width","useVirtualLayout","node","on","_onVirtualLayoutScrolling","_bufferZone","_spawnCount","Math","ceil","_initialized","_dataList","createItemsDisplayList","dataList","content","_content","_scrollView","destroyAllChildren","_totalCount","length","_getContentWidth","_createFixedIncrementItems","isTop","scheduleOnce","scrollToTop","labelEmptyTip","active","totalCount","spacingX","paddingTop","paddingBottom","_contentOriginalWidth","appendItemsToDisplayList","concat","pos","getScrollOffset","x","scrollToOffset","items","_items","buffer","isDown","position","offset","i","item","viewPos","getPositionInView","itemCtrl","onLeave","setPosition","y","itemIndex","updateItem","onDataChanged","onEnter","console","log","_onScrollToBottom","_updateItemPos","idx","row","col","floor","contentUiTrans","itemUiTrans","spacingY","getScrollOffsetX","scrollToFixedPosition","sec","stopAutoScroll","itemWidth","v2","startIndex"],"mappings":"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","sourcesContent":["import {_decorator, Label, Sprite, math, SpriteFrame, Node, Prefab, ScrollView, UITransform, instantiate, Event, isValid} from 'cc';\r\nimport { VirtualGridList } from \"../../../resources/libs/virtual_grid_list/virtual_grid_list\";\r\nimport {IVirtualGridListItem} from \"../../../resources/libs/virtual_grid_list/interface\";\r\n\r\nconst {ccclass, property} = _decorator;\r\n\r\n@ccclass('AchievementItemVirtualGridList')\r\nexport class AchievementItemVirtualGridList extends VirtualGridList {\r\n    protected rowNum : number = 1;\r\n    protected _lastContentPosX: number = 0; // 上一次滚动位置\r\n    /**\r\n     * 初始化布局\r\n     */\r\n    protected _initializeList() {\r\n        // this._gridList = this.node.getComponent(ScrollView);\r\n        // this._content = this._gridList.content;\r\n        this._itemHeight = (this.itemPrefab.data as Node).getComponent(UITransform).height;\r\n        this._itemWidth = (this.itemPrefab.data as Node).getComponent(UITransform).width;\r\n\r\n        if (this.useVirtualLayout) {\r\n            this.node.on('scrolling', this._onVirtualLayoutScrolling, this);\r\n        } else {\r\n            // this.node.on('scrolling', this._onScrolling, this);\r\n        }\r\n        // 缓冲区域，半屏加1个item高度\r\n        this._bufferZone = this.node.getComponent(UITransform).width * 0.5 + this._itemWidth;\r\n\r\n        // 计算出需要同时绘制的数量(一屏数量 + 二行(上下各一行))\r\n        this._spawnCount = Math.ceil(this.node.getComponent(UITransform).width / this._itemWidth + 2) * this.rowNum;\r\n\r\n        this._lastContentPosX = 0;\r\n        this._initialized = true;\r\n\r\n        // 数据列表可能在初始化完成之前进入\r\n        if (this._dataList) {\r\n            this.createItemsDisplayList(this._dataList);\r\n        }\r\n    }\r\n        \r\n    /**\r\n     * 创建物品格子列表\r\n     * @param {Array<any>} dataList 数据\r\n     */\r\n    protected createItemsDisplayList(dataList: Array<any> = []) {\r\n        this._dataList = dataList = dataList || [];\r\n        if (!this._initialized) {\r\n            return;\r\n        }\r\n\r\n        let content = this._content || this._scrollView.content;\r\n        content.destroyAllChildren();\r\n\r\n        // 总数量\r\n        this._totalCount = dataList.length;\r\n        // 设置content总高度\r\n        content.getComponent(UITransform).width = this._getContentWidth(this._totalCount);\r\n\r\n        // 创建固定数量\r\n        this._createFixedIncrementItems();\r\n\r\n        if (!this.isTop()) {\r\n            this.scheduleOnce(() => {\r\n                this.scrollToTop();\r\n            }, .2);\r\n        }\r\n\r\n        this.labelEmptyTip.node.active = this._totalCount <= 0;\r\n    }\r\n\r\n    /**\r\n     * 获取content总宽度\r\n     * @param {Number} totalCount 总数量\r\n     * @returns {Number} 容器总宽度\r\n     */\r\n    protected _getContentWidth(totalCount: number): number {\r\n        let width =  Math.ceil(totalCount / this.rowNum) * (this._itemWidth + this.spacingX) + this.paddingTop + this.paddingBottom;\r\n        if (width < this._contentOriginalWidth)\r\n        {\r\n            width = this._contentOriginalWidth;\r\n        }\r\n        return width;\r\n    }\r\n        \r\n    /**\r\n     * 追加数据列表，一般用于滚动翻页\r\n     * @param {Array<any>} dataList 追加数据队列\r\n     */\r\n    appendItemsToDisplayList(dataList: Array<any>) {\r\n        if (!dataList || dataList.length <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this._totalCount <= 0) {\r\n            this.createItemsDisplayList(dataList);\r\n            return;\r\n        }\r\n\r\n        dataList = this._dataList.concat(dataList);\r\n        if (this._totalCount < this._spawnCount) {\r\n            // 不满一屏的时候，重新绘制新列表\r\n            this.createItemsDisplayList(dataList);\r\n        } else {\r\n            let content = this._content || this._scrollView.content;\r\n            // 总数量\r\n            this._totalCount = dataList.length;\r\n            // 设置content总高度\r\n            content.getComponent(UITransform).width = this._getContentWidth(this._totalCount);\r\n            this._dataList = dataList;\r\n\r\n            this.labelEmptyTip.node.active = this._totalCount <= 0;\r\n\r\n            this.scheduleOnce(() => {\r\n                let pos = this._scrollView.getScrollOffset();\r\n                pos.x += this._itemWidth * .2;\r\n                this._scrollView.scrollToOffset(pos, .1);\r\n            });\r\n        }\r\n    }\r\n        \r\n    protected _onVirtualLayoutScrolling() {\r\n        let items = this._items;\r\n        const buffer = this._bufferZone;\r\n        const isDown = this._content.position.x < this._lastContentPosX; // 滚动方向 下减上加\r\n        const offset = (this._itemWidth + this.spacingX) * Math.ceil(items.length / this.rowNum); // 所有items 总高度\r\n        let dataList = this._dataList;\r\n\r\n        // 更新每一个item位置和数据\r\n        for (let i = 0; i < items.length; i++) {\r\n            let item = items[i];\r\n            let viewPos = this.getPositionInView(item);\r\n\r\n            if (!isDown) {\r\n                // 往下滑动，看下面的item，超出屏幕外下方，但是没有到top的item\r\n                if (viewPos.x > buffer\r\n                    && item.position.x - offset > 0) {\r\n                    let itemCtrl = (item.getComponent(IVirtualGridListItem) as IVirtualGridListItem);\r\n                    if (itemCtrl)\r\n                    {\r\n                        itemCtrl.onLeave();\r\n                        item.setPosition(item.position.x-offset, item.position.y)\r\n                        let itemIndex = itemCtrl.itemIndex - items.length;\r\n                        itemCtrl.updateItem(dataList[itemIndex], itemIndex);\r\n                        itemCtrl.onDataChanged();\r\n                        itemCtrl.onEnter();\r\n                    }\r\n                    else\r\n                    {\r\n                        console.log(\"1 achievment item IVirtualGridListItem is null\");\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                // 往上滑动，看上面的item，超出屏幕外上方，但是没有到bottom的item\r\n                if (viewPos.x < -buffer\r\n                    && item.position.x + offset < this._content.getComponent(UITransform).width) {\r\n                    let itemCtrl = (item.getComponent(IVirtualGridListItem) as IVirtualGridListItem);\r\n                    if (itemCtrl)\r\n                    {\r\n                        let itemIndex = itemCtrl.itemIndex + items.length;\r\n                        // 大于总数量的不移动更新\r\n                        if (itemIndex < this._totalCount) {\r\n                            itemCtrl.onLeave();\r\n                            item.setPosition(item.position.x+offset, item.position.y)\r\n                            itemCtrl.updateItem(dataList[itemIndex], itemIndex);\r\n                            itemCtrl.onDataChanged();\r\n                            itemCtrl.onEnter();\r\n    \r\n                            if (itemIndex === this._totalCount - 1) {\r\n                                this._onScrollToBottom();\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        console.log(\"2 achievment item IVirtualGridListItem is null\");\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        // 保存最后一次contentY偏移量，判断滑动方向\r\n        this._lastContentPosX = this._content.position.x;\r\n        items = null;\r\n        dataList = null;\r\n    }\r\n        \r\n    /**\r\n     * 更新item位置\r\n     * @param {Node} item item节点\r\n     * @param {Number} idx 索引\r\n     */\r\n    protected _updateItemPos(item: Node, idx: number) {\r\n        const row = idx % this.rowNum;\r\n        const col = Math.floor(idx / this.rowNum);\r\n\r\n        const contentUiTrans = this._content.getComponent(UITransform)!;\r\n        const itemUiTrans = item.getComponent(UITransform)!;\r\n\r\n        item.setPosition(\r\n            itemUiTrans.width * (0.5 + col) + this.spacingX * (col) + this.paddingTop,\r\n            -contentUiTrans.height * 0.5 + itemUiTrans.height * (0.5 + row) - this.spacingY * row\r\n        );\r\n    }\r\n        \r\n    /**\r\n     * 获取当前Y轴偏移量整数\r\n     * @returns {Number}\r\n     */\r\n    public getScrollOffsetX(): number {\r\n        return Math.floor(this._scrollView.getScrollOffset().x);\r\n    }    \r\n    /**\r\n     * 是否在顶端\r\n     * @returns {Boolean}\r\n     */\r\n    public isTop(): boolean {\r\n        return this.getScrollOffsetX() <= 0;\r\n    } \r\n    /**\r\n     * 滚动到固定位置\r\n     * @param {Number} itemIndex item index\r\n     * @param {Number} sec 滚动时间\r\n     */\r\n    public scrollToFixedPosition(itemIndex: number, sec: number) {\r\n        this.stopAutoScroll();\r\n\r\n        let itemWidth = 1;\r\n        if (this.itemPrefab != null && this.itemPrefab.data != null) {\r\n            itemWidth = (this.itemPrefab.data as Node).getComponent(UITransform).width;\r\n        }\r\n\r\n        const rowNum = this.rowNum;\r\n        const row = itemIndex % rowNum;\r\n        const col = Math.floor(itemIndex / rowNum);\r\n        const x = -itemWidth * (0.5 + row) - this.spacingX * (row) - this.paddingTop;\r\n        const pos = math.v2(x, 0);\r\n        if (this._scrollView) {\r\n            this._scrollView.scrollToOffset(pos, sec || 0);\r\n        }\r\n\r\n        if (this.useVirtualLayout) {\r\n            if (this._content) {\r\n                this._content.destroyAllChildren();\r\n            }\r\n            let startIndex = itemIndex - col;\r\n            this._createFixedIncrementItems(startIndex);\r\n        }\r\n    }\r\n}\r\n"]}