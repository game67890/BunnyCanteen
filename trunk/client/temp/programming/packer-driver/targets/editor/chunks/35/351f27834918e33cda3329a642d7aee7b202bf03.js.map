{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/extensions/oops-plugin-framework/assets/core/common/timer/TimerManager.ts"],"names":["TimerManager","Component","game","StringUtil","Timer","times","date_s","Date","date_s_start","polymeric_s","date_c","update","dt","key","data","timer","object","field","onTimerComplete","onSecond","call","onComplete","event","node","dispatchEvent","id","register","step","guid","unRegister","setServerTime","value","getTime","setTime","getServerTime","getServerDate","getClientTime","now","getClientDate","totalTime","save","startTime","load","interval","Math","floor"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2023-01-19 10:33:49\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2023-01-19 14:37:19\r\n */\r\nimport { Component, game } from \"cc\";\r\nimport { StringUtil } from \"../../utils/StringUtil\";\r\nimport { Timer } from \"./Timer\";\r\n\r\n/** 时间管理 */\r\nexport class TimerManager extends Component {\r\n    /** 倒计时数据 */\r\n    private times: any = {};\r\n    /** 服务器时间 */\r\n    private date_s: Date = new Date();\r\n    /** 服务器初始时间 */\r\n    private date_s_start: Date = new Date();\r\n    /** 服务器时间后修正时间 */\r\n    private polymeric_s: number = 0;\r\n    /** 客户端时间 */\r\n    private date_c: Date = new Date();\r\n\r\n    /** 后台管理倒计时完成事件 */\r\n    protected update(dt: number) {\r\n        for (let key in this.times) {\r\n            let data = this.times[key];\r\n            let timer = data.timer as Timer;\r\n            if (timer.update(dt)) {\r\n                if (data.object[data.field] > 0) {\r\n                    data.object[data.field]--;\r\n\r\n                    // 倒计时结束触发\r\n                    if (data.object[data.field] == 0) {\r\n                        this.onTimerComplete(data);\r\n                    }\r\n                    // 触发每秒回调事件  \r\n                    else if (data.onSecond) {\r\n                        data.onSecond.call(data.object);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 触发倒计时完成事件 */\r\n    private onTimerComplete(data: any) {\r\n        if (data.onComplete) data.onComplete.call(data.object);\r\n        if (data.event) this.node.dispatchEvent(data.event);\r\n\r\n        delete this.times[data.id];\r\n    }\r\n\r\n    /**\r\n     * 在指定对象上注册一个倒计时的回调管理器\r\n     * @param object        注册定时器的对象\r\n     * @param field         时间字段\r\n     * @param onSecond      每秒事件\r\n     * @param onComplete    倒计时完成事件\r\n     * @returns \r\n     * @example\r\n    export class Test extends Component {\r\n        private timeId!: string;\r\n        \r\n        start() {\r\n            // 在指定对象上注册一个倒计时的回调管理器\r\n            this.timeId = oops.timer.register(this, \"countDown\", this.onSecond, this.onComplete);\r\n        }\r\n        \r\n        private onSecond() {\r\n            console.log(\"每秒触发一次\");\r\n        }\r\n\r\n        private onComplete() {\r\n            console.log(\"倒计时完成触发\");\r\n        }\r\n    }\r\n     */\r\n    register(object: any, field: string, onSecond: Function, onComplete: Function): string {\r\n        const timer = new Timer();\r\n        timer.step = 1;\r\n\r\n        let data: any = {};\r\n        data.id = StringUtil.guid();\r\n        data.timer = timer;\r\n        data.object = object;                                   // 管理对象\r\n        data.field = field;                                     // 时间字段\r\n        data.onSecond = onSecond;                               // 每秒事件\r\n        data.onComplete = onComplete;                           // 倒计时完成事件\r\n        this.times[data.id] = data;\r\n        return data.id;\r\n    }\r\n\r\n    /** \r\n     * 在指定对象上注销一个倒计时的回调管理器 \r\n     * @param id         时间对象唯一表示\r\n     * @example\r\n    export class Test extends Component {\r\n        private timeId!: string;\r\n\r\n        start() {\r\n            this.timeId = oops.timer.register(this, \"countDown\", this.onSecond, this.onComplete);\r\n        }\r\n\r\n        onDestroy() {\r\n            // 在指定对象上注销一个倒计时的回调管理器\r\n            oops.timer.unRegister(this.timeId);\r\n        }\r\n    }\r\n     */\r\n    unRegister(id: string) {\r\n        if (this.times[id]) delete this.times[id];\r\n    }\r\n\r\n    /**\r\n     * 服务器时间与本地时间同步\r\n     * @param value   服务器时间刻度\r\n     */\r\n    setServerTime(value: number): void {\r\n        this.polymeric_s = this.getTime();\r\n        this.date_s_start.setTime(value);\r\n    }\r\n\r\n    /** 获取写服务器同步的时间刻度 */\r\n    getServerTime(): number {\r\n        return this.date_s_start.getTime() + this.getTime() - this.polymeric_s;\r\n    }\r\n\r\n    /** 获取服务器时间对象 */\r\n    getServerDate(): Date {\r\n        this.date_s.setTime(this.getServerTime());\r\n        return this.date_s;\r\n    }\r\n\r\n    /** 获取本地时间刻度 */\r\n    getClientTime(): number {\r\n        return Date.now();\r\n    }\r\n\r\n    /** 获取本地时间对象 */\r\n    getClientDate(): Date {\r\n        this.date_c.setTime(this.getClientTime());\r\n        return this.date_c;\r\n    }\r\n\r\n    /** 获取游戏开始到现在逝去的时间 */\r\n    getTime(): number {\r\n        return game.totalTime;\r\n    }\r\n\r\n    /** 游戏最小化时记录时间数据 */\r\n    save(): void {\r\n        for (let key in this.times) {\r\n            this.times[key].startTime = this.getTime();\r\n        }\r\n    }\r\n\r\n    /** 游戏最大化时回复时间数据 */\r\n    load(): void {\r\n        for (let key in this.times) {\r\n            let interval = Math.floor((this.getTime() - (this.times[key].startTime || this.getTime())) / 1000);\r\n            let data = this.times[key];\r\n            data.object[data.field] = data.object[data.field] - interval;\r\n            if (data.object[data.field] <= 0) {\r\n                data.object[data.field] = 0;\r\n                this.onTimerComplete(data);\r\n            }\r\n            else {\r\n                this.times[key].startTime = null;\r\n            }\r\n        }\r\n    }\r\n} "]}