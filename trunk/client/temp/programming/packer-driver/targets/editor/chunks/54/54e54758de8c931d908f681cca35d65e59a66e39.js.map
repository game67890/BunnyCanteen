{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/resources/libs/utils/res/asset_manager.ts"],"names":["AssetManagerEx","Asset","Director","director","log","assetManager","EDITOR","ResKeeper","getPersistDepends","onSceneChange","scene","console","assetInit","Object","getOwnPropertyDescriptor","prototype","defineProperties","refDepends","configurable","writable","enumerable","value","refCount","addRef","decRef","autoRelease","Instance","releaseAsset","constructor","defaultKeeper","persistDepends","Set","sceneDepends","lastScene","on","EVENT_BEFORE_SCENE_LAUNCH","instance","getKeeper","getReferenceKey","assetOrUrlOrUuid","uuid","nativeUrl","cacheItem","item","add","asset","content","_nativeDep","dependKeys","depends","i","length","dependUtil","getDeps","warn","cacheAsset","key","assetManagerEx","releaseItem","dec","res","id"],"mappings":"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","sourcesContent":["import {Asset, Director, Scene, director, log, assetManager} from \"cc\";\nimport {EDITOR} from \"cc/env\";\n\nimport {ResKeeper} from \"./res_keeper\";\n\nexport class AssetManagerEx {\n    private static instance: AssetManagerEx;\n    private defaultKeeper: ResKeeper = new ResKeeper();\n    private persistDepends: Set<string> = new Set<string>();\n    private sceneDepends: string[] = null;\n    private lastScene = null;\n\n    /**\n     * 获取当前场景的持久节点应用的资源\n     */\n    private getPersistDepends(): Set<string> {\n        // director.addPersistRootNode()\n        // const persistNodeList = Object.keys(game._persistRootNodes).map(function (x) {\n        //     return game._persistRootNodes[x];\n        // });\n        // return ResUtil.getNodesDepends(persistNodeList);\n        return null;\n    }\n\n    /**\n     * 处理场景切换，分两种情况，一种为根据scene的uuid找到场景的资源，另外一种为根据scene.dependAssets进行缓存\n     * @param scene\n     */\n    private onSceneChange(scene: Scene) {\n        console.log('On Scene Change');\n        return;\n    }\n\n\n    // 为Asset注入引用计数的功能\n    private static assetInit() {\n        console.log('asset init');\n        if (!Object.getOwnPropertyDescriptor(Asset.prototype, 'addRef')) {\n            Object.defineProperties(Asset.prototype, {\n                refDepends: {\n                    configurable: true,\n                    writable: true,\n                    enumerable: false,\n                    value: false,\n                },\n                refCount: {\n                    configurable: true,\n                    writable: true,\n                    enumerable: false,\n                    value: 0,\n                },\n                addRef: {\n                    configurable: true,\n                    writable: true,\n                    value: function (): Asset {\n                        ++this.refCount;\n                        return this;\n                    }\n                },\n                decRef: {\n                    configurable: true,\n                    writable: true,\n                    value: function (autoRelease = true): Asset {\n                        --this.refCount;\n                        if (this.refCount <= 0 && autoRelease) {\n                            AssetManagerEx.Instance.releaseAsset(this, false);\n                        }\n                        return this;\n                    }\n                }\n            });\n        }\n    }\n\n    private constructor() {\n        if (EDITOR) {\n            return;\n        }\n        // game.once(game.EngineInitedEvent, AssetManagerEx.assetInit);\n        director.on(Director.EVENT_BEFORE_SCENE_LAUNCH, (scene) => {\n            this.onSceneChange(scene);\n        });\n    }\n\n    public static get Instance() {\n        if (!this.instance) {\n            this.instance = new AssetManagerEx();\n        }\n        return this.instance;\n    }\n\n    public getKeeper(): ResKeeper {\n        return this.defaultKeeper;\n    }\n\n    private getReferenceKey(assetOrUrlOrUuid: Asset | string) {\n        if (assetOrUrlOrUuid instanceof Asset && !assetOrUrlOrUuid.uuid) {\n            // 远程资源没有_uuid\n            if (assetOrUrlOrUuid.nativeUrl) {\n                return assetOrUrlOrUuid.nativeUrl;\n            }\n        }\n        // return loader._getReferenceKey(assetOrUrlOrUuid);\n    }\n\n    /**\n     * 缓存一个资源\n     * @param item 资源的item对象\n     * @param add\n     */\n    private cacheItem(item: any, add: boolean = false) {\n        if (item) {\n            let asset: Asset = item.content;\n            if (asset instanceof Asset) {\n                if (add) {\n                    asset.addRef();\n                }\n\n                if (!asset._nativeDep && item.dependKeys) {\n                    let depends = item.dependKeys;\n                    for (let i = 0; i < depends.length; i++) {\n                        this.cacheItem(assetManager.dependUtil.getDeps(depends[i]), true);\n                    }\n                    //asset.refDepends = true;\n                }\n            } else {\n                // 原生资源、html元素有可能走到这里，原生资源都是有对应的Asset对应引用的，所以这里可以不处理\n                console.log(`cacheItem ${item} is not Asset ${asset}`);\n            }\n        } else {\n            console.warn(`cacheItem error, item is ${item}`);\n        }\n    }\n\n    public cacheAsset(assetOrUrlOrUuid: Asset | string, add: boolean = false) {\n        let key = this.getReferenceKey(assetOrUrlOrUuid);\n        if (key) {\n            let item = assetManagerEx.getReferenceKey(key);\n            if (item) {\n                this.cacheItem(item, add);\n            } else {\n                console.warn(`cacheAsset error, loader.getItem ${key} is ${item}`);\n            }\n        } else {\n            console.warn(`cacheAsset error, this.getReferenceKey ${assetOrUrlOrUuid} return ${key}`);\n        }\n    }\n\n    /**\n     * 释放一个资源\n     * @param item 资源的item对象\n     * @param dec\n     */\n    private releaseItem(item: any, dec: boolean = false) {\n        if (item && item.content) {\n            let asset: any = item.content;\n            let res = item.uuid || item.id;\n            if (asset instanceof Asset) {\n                if (dec) {\n                    asset.decRef(false);\n                }\n                if (asset.refCount <= 0) {\n                    let depends = item.dependKeys;\n                    if (depends) {\n                        for (let i = 0; i < depends.length; i++) {\n                            this.releaseItem(assetManager.dependUtil.getDeps(depends[i]), true);\n                        }\n                    }\n\n                    assetManager.releaseAsset(res);\n                    log(`assetManager.releaseAsset Asset ${res}`);\n                }\n            } else {\n                assetManager.releaseAsset(res);\n                log(`assetManager.releaseAsset ${res} rawAsset ${asset}`);\n            }\n        } else {\n            console.warn(`releaseItem error, item is ${item}`);\n        }\n    }\n\n    /**\n     * 释放一个资源（会减少其引用计数）\n     * @param assetOrUrlOrUuid\n     * @param dec\n     */\n    public releaseAsset(assetOrUrlOrUuid: Asset | string, dec: boolean = false) {\n        let key = this.getReferenceKey(assetOrUrlOrUuid);\n        if (key) {\n            let item = assetManager.dependUtil.getDeps(key);\n            if (item) {\n                this.releaseItem(item, dec);\n            } else {\n                console.warn(`releaseAsset error, loader.getItem ${key} is ${item}`);\n            }\n        } else {\n            console.warn(`releaseAsset error, this.getReferenceKey ${assetOrUrlOrUuid} return ${key}`);\n        }\n    }\n}\n\nexport const assetManagerEx = AssetManagerEx.Instance;\n"]}