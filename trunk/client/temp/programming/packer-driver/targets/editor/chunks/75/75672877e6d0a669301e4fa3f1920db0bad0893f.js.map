{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/hecheng/GPWorkFlow.ts"],"names":["GPWorkFlowNode","GPWorkFlow","OnStart","OnUpdate","OnEnd","nextNodes","Array","_nextIdx","nextNode","length","_nextNode","push","nextIdx","done","nexIdx","isDone","refresh","i","start","update","deltaTime","hasNext","headNode","curNode","insertHeadNode","wfNode","tmp"],"mappings":";;;kEAEaA,c,EA6CAC,U;;;;;;;;;;;;;;;;;;;;gCA7CAD,c,GAAN,MAAMA,cAAN,CAAqB;AAAA;AAAA,eACjBE,OADiB;AAAA,eAEjBC,QAFiB;AAAA,eAGjBC,KAHiB;AAAA,eAIjBC,SAJiB,GAIY,IAAIC,KAAJ,EAJZ;AAAA,eAehBC,QAfgB,GAeL,CAAC,CAfI;AAAA;;AAKL,YAARC,QAAQ,GAAkB;AACjC,iBAAO,KAAKH,SAAL,CAAeI,MAAf,GAAwB,CAAxB,GAA4B,KAAKJ,SAAL,CAAe,CAAf,CAA5B,GAAgD,IAAvD;AACH;;AACkB,YAARG,QAAQ,CAACE,SAAD,EAA2B;AAC1C,cAAI,KAAKL,SAAL,CAAeI,MAAf,IAAyB,CAA7B,EAAgC;AAC5B,iBAAKJ,SAAL,CAAeM,IAAf,CAAoBD,SAApB;AACH,WAFD,MAEO;AACH,iBAAKL,SAAL,CAAe,CAAf,IAAoBK,SAApB;AACH;AACJ;;AAEiB,YAAPE,OAAO,GAAG;AACjB,iBAAO,KAAKL,QAAZ;AACH;;AACMM,QAAAA,IAAI,CAACC,MAAM,GAAG,CAAV,EAAa;AACpB,eAAKP,QAAL,GAAgBO,MAAhB;AACA,cAAI,KAAKV,KAAT,EACI,KAAKA,KAAL,CAAW,IAAX;AACP;;AACMW,QAAAA,MAAM,GAAG;AACZ,iBAAO,KAAKR,QAAL,IAAiB,CAAxB;AACH;;AACMS,QAAAA,OAAO,GAAG;AACb,eAAKT,QAAL,GAAgB,CAAC,CAAjB;;AACA,eAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKZ,SAAL,CAAeI,MAAnC,EAA2CQ,CAAC,EAA5C,EAAgD;AAC5C,iBAAKZ,SAAL,CAAeY,CAAf,EAAkBD,OAAlB;AACH;AACJ;;AACME,QAAAA,KAAK,GAAG;AACX,cAAI,KAAKhB,OAAT,EACI,KAAKA,OAAL,CAAa,IAAb;AACP;;AACMiB,QAAAA,MAAM,CAACC,SAAD,EAAY;AACrB,cAAI,KAAKjB,QAAT,EACI,KAAKA,QAAL,CAAc,IAAd,EAAoBiB,SAApB;AACP;;AACMC,QAAAA,OAAO,GAAG;AACb,iBAAO,KAAKhB,SAAL,CAAeI,MAAf,GAAwB,CAA/B;AACH;;AA3CuB,O;;4BA6CfR,U,GAAN,MAAMA,UAAN,CAAiB;AAAA;AAAA,eACbqB,QADa;AAAA,eAEZC,OAFY;AAAA;;AAGpBL,QAAAA,KAAK,GAAG;AACJ,cAAI,KAAKI,QAAT,EAAmB;AACf,iBAAKA,QAAL,CAAcN,OAAd;AACH;;AACD,eAAKO,OAAL,GAAe,KAAKD,QAApB;AACA,eAAKC,OAAL,CAAaL,KAAb;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,cAAI,KAAKG,OAAL,IAAgB,IAApB,EAA0B;AACtB,iBAAKA,OAAL,CAAaJ,MAAb,CAAoBC,SAApB;;AACA,gBAAI,KAAKG,OAAL,CAAaR,MAAb,EAAJ,EAA2B;AACvB,kBAAI,KAAKQ,OAAL,CAAaF,OAAb,EAAJ,EAA4B;AACxB,qBAAKE,OAAL,GAAe,KAAKA,OAAL,CAAalB,SAAb,CAAuB,KAAKkB,OAAL,CAAaX,OAApC,CAAf;AACA,qBAAKW,OAAL,CAAaL,KAAb;AACH,eAHD,MAGO;AACH,qBAAKK,OAAL,GAAe,IAAf;AACH;AACJ;AACJ;AACJ;;AACDC,QAAAA,cAAc,CAACC,MAAD,EAAwB;AAClC,cAAIC,GAAG,GAAG,KAAKJ,QAAf;AACA,eAAKA,QAAL,GAAgBG,MAAhB;AACAA,UAAAA,MAAM,CAACjB,QAAP,GAAkBkB,GAAlB;AACH;;AA5BmB,O","sourcesContent":["import { _decorator, Component, Node } from 'cc';\n\nexport class GPWorkFlowNode {\n    public OnStart:Function;\n    public OnUpdate:Function;\n    public OnEnd:Function;\n    public nextNodes:GPWorkFlowNode[] = new Array<GPWorkFlowNode>();\n    public get nextNode():GPWorkFlowNode {\n        return this.nextNodes.length > 0 ? this.nextNodes[0] : null;\n    }\n    public set nextNode(_nextNode:GPWorkFlowNode) {\n        if (this.nextNodes.length == 0) {\n            this.nextNodes.push(_nextNode);\n        } else {\n            this.nextNodes[0] = _nextNode;\n        }\n    }\n    private _nextIdx = -1;\n    public get nextIdx() {\n        return this._nextIdx;\n    }\n    public done(nexIdx = 0) {\n        this._nextIdx = nexIdx;\n        if (this.OnEnd)\n            this.OnEnd(this);\n    }\n    public isDone() {\n        return this._nextIdx >= 0;\n    }\n    public refresh() {\n        this._nextIdx = -1;\n        for (let i = 0; i < this.nextNodes.length; i++) {\n            this.nextNodes[i].refresh();\n        }\n    }\n    public start() {\n        if (this.OnStart)\n            this.OnStart(this);\n    }\n    public update(deltaTime) {\n        if (this.OnUpdate)\n            this.OnUpdate(this, deltaTime);\n    }\n    public hasNext() {\n        return this.nextNodes.length > 0;\n    }\n}\nexport class GPWorkFlow {\n    public headNode:GPWorkFlowNode;\n    private curNode:GPWorkFlowNode;\n    start() {\n        if (this.headNode) {\n            this.headNode.refresh();\n        }\n        this.curNode = this.headNode;\n        this.curNode.start();\n    }\n\n    update(deltaTime: number) {\n        if (this.curNode != null) {\n            this.curNode.update(deltaTime)\n            if (this.curNode.isDone()) {\n                if (this.curNode.hasNext()) {\n                    this.curNode = this.curNode.nextNodes[this.curNode.nextIdx];\n                    this.curNode.start()\n                } else {\n                    this.curNode = null\n                }\n            }\n        }\n    }\n    insertHeadNode(wfNode:GPWorkFlowNode) {\n        let tmp = this.headNode;\n        this.headNode = wfNode;\n        wfNode.nextNode = tmp;\n    }\n}\n\n\n"]}