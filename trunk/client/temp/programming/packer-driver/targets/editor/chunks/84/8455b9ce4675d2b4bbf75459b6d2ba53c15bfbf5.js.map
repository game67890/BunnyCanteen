{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/resources/libs/utils/maths.ts"],"names":["Maths","ERaycast2DType","math","PhysicsSystem2D","angleToRadian","degrees","thePI180","radianToAngle","radian","the180PI","angleToVector","toRadian","cos","Math","sin","v2","normalize","vectorToAngle","vector","dir","signAngle","angleInRadians","p1","p2","atan2","y","x","angleInDegrees","distance","dx","dy","sqrt","getCirclePoints","r","pos","count","randomScope","points","radians","round","i","unshift","random","min","max","undefined","randomInt","floor","randomIndex","randomIntArrayInRange","n","Array","from","length","randomHexColorCode","toString","slice","getArrayRandomElement","arr","clamp","value","rotateVec2","angle","theta","matrix","getDistancePosition","startPos","moveX","moveY","testRaycast","instance","raycast","Closest","PI","maxDistance"],"mappings":"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","sourcesContent":["import {ERaycast2DType, math, PhysicsSystem2D, RaycastResult2D} from \"cc\";\r\n\r\nexport default class Maths {\r\n    static thePI180: number = Math.PI / 180;\r\n    static the180PI: number = 180 / Math.PI;\r\n    static maxDistance = 10000000;\r\n\r\n    /**\r\n     * @description 角度转弧度<br>\r\n     *  公式: π / 180 * 角度\r\n     *\r\n     * @param {number} degrees 角度\r\n     * @return {number} 弧度\r\n     */\r\n    static angleToRadian(degrees: number): number {\r\n        return Maths.thePI180 * degrees;\r\n    }\r\n\r\n    /**\r\n     * @description 弧度转角度<br>\r\n     *  公式: 180 / π * 弧度\r\n     *\r\n     * @param {number} radian 弧度\r\n     * @return {number} 角度\r\n     */\r\n    static radianToAngle(radian: number): number {\r\n        return Maths.the180PI * radian;\r\n    }\r\n\r\n    /**\r\n     * @description 角度转向量<br>\r\n     *  公式: tan = sin / cos\r\n     *\r\n     * @param {number} degrees 角度\r\n     * @return {Vec2} 向量\r\n     */\r\n    static angleToVector(degrees: number): math.Vec2 {\r\n        // 将传入的角度转为弧度\r\n        const radian: number = math.toRadian(degrees);\r\n        // 算出cos,sin和tan\r\n        const cos: number = Math.cos(radian);// 邻边 / 斜边\r\n        const sin: number = Math.sin(radian);// 对边 / 斜边\r\n        // 结合在一起并归一化\r\n        return math.v2(cos, sin).normalize();\r\n    }\r\n\r\n    /**\r\n     * @description 向量转角度<br>\r\n     *  公式: tan = sin / cos\r\n     *\r\n     * @param {number} vector 向量\r\n     * @return {number} 角度\r\n     */\r\n    static vectorToAngle(vector: math.Vec2): number {\r\n        // 将传入的向量归一化\r\n        const dir: math.Vec2 = vector.normalize();\r\n        // 计算出目标角度的弧度\r\n        const radian = dir.signAngle(math.v2(1, 0));\r\n        // 把弧度计算成角度\r\n        return -Maths.radianToAngle(radian);\r\n    }\r\n\r\n    static angleInRadians(p1: math.Vec2, p2: math.Vec2): number {\r\n        return Math.atan2(p2.y - p1.y, p2.x - p1.x);\r\n    }\r\n\r\n    static angleInDegrees(p1: math.Vec2, p2: math.Vec2): number {\r\n        return Math.atan2(p2.y - p1.y, p2.x - p1.x) * Maths.the180PI;\r\n    }\r\n\r\n    /**\r\n     * 计算两点之间的直线距离\r\n     * @param p1 点1\r\n     * @param p2 点2\r\n     */\r\n    static distance(p1: math.Vec2 | math.Vec3, p2: math.Vec2 | math.Vec3): number {\r\n        const dx: number = p2.x - p1.x;\r\n        const dy: number = p2.y - p1.y;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n    /**\r\n     * 以某点为圆心，生成圆周上等分点的坐标\r\n     *\r\n     * @param {number} r 半径\r\n     * @param {math.Vec2} pos 圆心坐标\r\n     * @param {number} count 等分点数量\r\n     * @param {number} [randomScope=80] 等分点的随机波动范围\r\n     * @returns {math.Vec2[]} 返回等分点坐标\r\n     */\r\n    static getCirclePoints(r: number, pos: math.Vec2, count: number, randomScope: number = 60): math.Vec2[] {\r\n        let points: math.Vec2[] = [];\r\n        const radians: number = Maths.thePI180 * Math.round(360 / count);\r\n        for (let i: number = 0; i < count; i++) {\r\n            const x: number = pos.x + r * Math.sin(radians * i);\r\n            const y: number = pos.y + r * Math.cos(radians * i);\r\n            points.unshift(math.v2(x + Math.random() * randomScope, y + Math.random() * randomScope));\r\n        }\r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * 获取值域中的随机数，浮点数。\r\n     * 值域为：[min, max]\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    static random(min: number, max?: number): number {\r\n        if (max === undefined) {\r\n            return Math.random() * min;\r\n        }\r\n        return Math.random() * (max - min + 1) + min;\r\n    }\r\n\r\n    /**\r\n     * 获取值域中的随机数，整数。\r\n     * 值域为：[min, max]\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    static randomInt(min: number, max?: number): number {\r\n        return Math.floor(Maths.random(min, max));\r\n    }\r\n\r\n    /**\r\n     * 获取值域中的随机数\r\n     * 值域：[min, max)\r\n     * @param min 最小值\r\n     * @param max 最大值\r\n     */\r\n    static randomIndex(min: number, max?: number): number {\r\n        if (max === undefined) {\r\n            return Math.floor(Math.random() * min);\r\n        }\r\n        return Math.floor(min + Math.random() * (max - min));\r\n    }\r\n\r\n    /**\r\n     * 返回指定范围内 n 个随机整数的数组\r\n     * @param min\r\n     * @param max\r\n     * @param n\r\n     */\r\n    static randomIntArrayInRange(min: number, max: number, n: number = 1): Array<number> {\r\n        return Array.from(\r\n            {length: n},\r\n            () => Math.floor(Math.random() * (max - min + 1)) + min\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 生成随机十六进制颜色代码\r\n     */\r\n    static randomHexColorCode(): string {\r\n        const n = (Math.random() * 0xfffff * 1000000).toString(16);\r\n        return \"#\" + n.slice(0, 6);\r\n    }\r\n\r\n    /**\r\n     * 随机获取数组中的元素\r\n     * @param arr\r\n     */\r\n    static getArrayRandomElement(arr: any[]): any {\r\n        return arr.length ? arr[Math.floor(Math.random() * arr.length)] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Clamps (or clips or confines) the value to be between min and max.\r\n     */\r\n    static clamp(value: number, min: number, max: number): number {\r\n        if (value < min) {\r\n            return min;\r\n        }\r\n        if (value > max) {\r\n            return max;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 旋转二维向量\r\n     * @param vector\r\n     * @param angle 角度\r\n     */\r\n    static rotateVec2(vector: math.Vec2, angle: number): math.Vec2 {\r\n        const theta: number = math.toRadian(angle); // radians\r\n        let matrix: number[] = [\r\n            Math.cos(theta), Math.sin(theta),\r\n            -Math.sin(theta), Math.cos(theta)\r\n        ];\r\n\r\n        return math.v2(\r\n            matrix[0] * vector.x + matrix[1] * vector.y,\r\n            matrix[2] * vector.x + matrix[3] * vector.y\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 计算前方另一个点\r\n     * @param startPos 起始点\r\n     * @param radian 弧度\r\n     * @param distance 距离\r\n     */\r\n    static getDistancePosition(startPos: math.Vec2, radian: number, distance: number): math.Vec2 {\r\n        const moveX = distance * Math.cos(radian);\r\n        const moveY = distance * Math.sin(radian);\r\n        return math.v2(startPos.x + moveX, startPos.y + moveY);\r\n    }\r\n\r\n    /**\r\n     * 射线测试\r\n     * @param startPos 起始点\r\n     * @param radian 弧度\r\n     */\r\n    static testRaycast(startPos: math.Vec2, radian: number): readonly Readonly<RaycastResult2D>[] {\r\n        const p2 = Maths.getDistancePosition(startPos, radian, 4000);\r\n        // console.log(startPos, p2);\r\n        return PhysicsSystem2D.instance.raycast(startPos, p2, ERaycast2DType.Closest);\r\n    }\r\n}\r\n"]}