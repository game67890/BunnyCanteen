{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/role/RoleManager.ts"],"names":["RoleInfo","RoleManager","Vec3","Vec2","UITransform","tween","misc","UtilMgr","HeChengComponent","DiningTableMgr","BoardMgr","oops","UIID","RoleComponent","TableOtherParameter","TablePictureSet","constructor","id","indexId","node","ParentNode","IsUse","RoleId","IndexId","RoleNode","OrginParentNode","RolePos","RoleList","SpawnRoleNum","SpawnRoleId","SoundEffects","IsInit","tableOtherParameter","tablePictureSet","getRoleId","getRandomNumber","Init","index","LoadRoleAnim","roleId","onCompleteCallback","push","res","loadDir","UpdateVisitors","HechengGUI","gui","get","MainUI","HechengCom","getComponent","isHasSuCai","IsHasEmptyTable","length","SpawnNum","DiningTableIndex","GetRandomEmptyTableIndex","TableList","IsSeat","SoundEffect","PlaySoundEffect","i","role","createRole","noUseRole","roleParentNode","active","roleComponent","PlayStandAnim","setTimeout","MoveToPos","GetNoUseRoleInfo","roleInfo","GetRoleNum","TargetPos","getPositionInParent","tableNode","speed","pos","position","vecA","normalize","vecB","x","y","angle","radiansToDegrees","SetWalkScaleX","PlayWalkAnim","distance","moveDuration","to","call","OnMoveEnd","start","leftChairNode","setParent","PlaySitAnim","ShowFood","PlaySitIdleAnim","ShowMood","ClearFood","createTuziCoin","totalNum","init","aixinNum","Number","parameter","xiaolianNum","randNum","Math","floor","random","roleMood","SetImage","picture","MoveBack","leftParentNode","halfRoleHeight","height","destroy","roleNode","DiningTableNode","tablePos","worldPos","parent","convertToWorldSpaceAR","convertToNodeSpaceAR","getChairPositionInParent","ChairNode","rolePos","RoleMgr"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, EventTouch, Vec3, Sprite, Vec2, UITransform, view, tween, math } from 'cc';\r\n\r\nimport { UtilMgr } from \"../manager/UtilManager\";\r\nimport { HeChengComponent } from \"../hecheng/HeChengComponent\";\r\nimport { DiningTableMgr } from \"../diningtable/DiningTableManager\";\r\nimport { BoardMgr} from '../manager/BoardManager';\r\nimport { oops } from \"../../../../extensions/oops-plugin-framework/assets/core/Oops\";\r\nimport { UIID } from \"../../framework/common/config/GameUIConfig\";\r\n\r\nimport { RoleComponent } from \"../role/RoleComponent\";\r\nimport { TableOtherParameter } from '../../framework/common/table/TableOtherParameter';\r\nimport { TablePictureSet } from \"../../framework/common/table/TablePictureSet\";\r\n\r\nimport { misc } from 'cc';\r\n\r\nexport class RoleInfo {\r\n    IsUse : boolean = false;\r\n    RoleId : number = 0;\r\n    IndexId : number = 0;\r\n    RoleNode : Node = null;\r\n    OrginParentNode : Node = null;\r\n    RolePos:Vec2 = new Vec2(0, 0)\r\n\r\n    constructor(id: number, indexId: number, node:Node, ParentNode:Node) {\r\n        this.RoleId = id;\r\n        this.IndexId = indexId;\r\n        this.RoleNode = node;\r\n        this.OrginParentNode = ParentNode;\r\n        this.IsUse = false;\r\n      }\r\n}\r\n\r\nexport class RoleManager {\r\n    public RoleList: RoleInfo[] = [];\r\n    //每隔5秒随机1-2位访客\r\n    private SpawnRoleNum : number[] = [1, 2];\r\n    //角色id\r\n    private SpawnRoleId : number[] = [];\r\n    //访客来访时随机播放一种音效\r\n    private SoundEffects : number[] = [4, 5, 6, 7];\r\n    private IsInit : boolean = false;\r\n\r\n    private tableOtherParameter = new TableOtherParameter();\r\n    private tablePictureSet = new TablePictureSet();\r\n\r\n    public getRoleId(): number {\r\n        return UtilMgr.getRandomNumber(this.SpawnRoleId);\r\n    }\r\n\r\n\r\n    public Init()\r\n    {\r\n        if (this.IsInit)\r\n        {\r\n            return;\r\n        }\r\n            \r\n        this.IsInit = true;\r\n        for (let index = 1; index <= 4; index++) {\r\n            this.LoadRoleAnim(index);\r\n        }\r\n    }\r\n\r\n    public LoadRoleAnim(roleId:number){\r\n        var onCompleteCallback = () => {\r\n            this.SpawnRoleId.push(roleId);\r\n        }\r\n\r\n        oops.res.loadDir(\"animation/fangke/0\" + roleId, onCompleteCallback);  \r\n    }\r\n\r\n    //每5秒执行一次\r\n    public UpdateVisitors() {\r\n        this.Init();\r\n        const HechengGUI = oops.gui.get(UIID.MainUI);\r\n        if (HechengGUI) {\r\n            const HechengCom = HechengGUI.getComponent(HeChengComponent);\r\n            if (HechengCom && BoardMgr.isHasSuCai() && DiningTableMgr.IsHasEmptyTable() && this.SpawnRoleId.length > 0) {\r\n                let SpawnNum = UtilMgr.getRandomNumber(this.SpawnRoleNum);\r\n                let DiningTableIndex = DiningTableMgr.GetRandomEmptyTableIndex();\r\n                if (DiningTableIndex >= 0)\r\n                {\r\n                    DiningTableMgr.TableList[DiningTableIndex].IsSeat = true;\r\n                    let SoundEffect = UtilMgr.getRandomNumber(this.SoundEffects);\r\n                    UtilMgr.PlaySoundEffect(SoundEffect);\r\n                    for (let i = 0; i < SpawnNum; i++)\r\n                    {\r\n                        let role = HechengCom.createRole();\r\n                        let noUseRole = new RoleInfo(this.getRoleId(), i, role, HechengCom.roleParentNode);\r\n                        noUseRole.IsUse = true;\r\n                        noUseRole.RoleNode.active = true;\r\n    \r\n                        this.RoleList.push(noUseRole);\r\n                    \r\n                        //const halfRoleHeight = noUseRole.RoleNode.getComponent(UITransform).height / 2;\r\n                        //noUseRole.RoleNode.setPosition((Math.random() - 0.5) * 100, -halfRoleHeight);\r\n                        const roleComponent = noUseRole.RoleNode.getComponent(RoleComponent);\r\n                        if (roleComponent) \r\n                        {\r\n                            roleComponent.PlayStandAnim(noUseRole.RoleId);\r\n                        }\r\n                        setTimeout(() => {\r\n                            this.MoveToPos(noUseRole, DiningTableIndex, SpawnNum, i);\r\n                        }, 2000);\r\n                        \r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private GetNoUseRoleInfo() : RoleInfo {\r\n        for (let index = 0; index < this.RoleList.length; index++) {\r\n            const roleInfo = this.RoleList[index];\r\n            if (!roleInfo.IsUse)\r\n            {\r\n                return roleInfo;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private GetRoleNum () : number {\r\n        return this.RoleList.length;\r\n    }\r\n\r\n    public MoveToPos(roleInfo: RoleInfo, DiningTableIndex: number, SpawnNum:number, index: number) {\r\n        if (roleInfo && roleInfo.RoleNode) {\r\n            let TargetPos = this.getPositionInParent(roleInfo.RoleNode, DiningTableMgr.TableList[DiningTableIndex].tableNode, index);\r\n            let speed = 100;\r\n            let pos = roleInfo.RoleNode.position;\r\n\r\n            const roleComponent = roleInfo.RoleNode.getComponent(RoleComponent);\r\n            if (roleComponent) \r\n            {\r\n                var vecA = new Vec2(-1, 0);\r\n                vecA.normalize();\r\n                var vecB = new Vec2(TargetPos.x - pos.x, TargetPos.y - pos.y);\r\n                vecB.normalize();\r\n                var angle = misc.radiansToDegrees(Vec2.angle(vecA, vecB));\r\n                if (angle <= 90) {\r\n                    roleComponent.SetWalkScaleX(-1);\r\n                } else {\r\n                    roleComponent.SetWalkScaleX(1);\r\n                }\r\n                roleComponent.PlayWalkAnim(roleInfo.RoleId);\r\n            }\r\n            \r\n            let distance = Vec3.distance(pos, TargetPos);\r\n\r\n            const moveDuration = distance/speed;\r\n\r\n            tween(roleInfo.RoleNode)\r\n                .to(moveDuration, { position: TargetPos })\r\n                .call(() => {\r\n                    this.OnMoveEnd(roleInfo, DiningTableIndex, SpawnNum, index);\r\n                })\r\n                .start();\r\n        }\r\n    }\r\n\r\n    public OnMoveEnd(roleInfo: RoleInfo, DiningTableIndex: number, SpawnNum:number, index: number) {\r\n        if (roleInfo && roleInfo.RoleNode)\r\n        {\r\n            const roleComponent = roleInfo.RoleNode.getComponent(RoleComponent);\r\n            if (roleComponent) \r\n            {\r\n                if (index == 1)\r\n                {\r\n                    DiningTableMgr.TableList[DiningTableIndex].leftChairNode.setParent(roleInfo.RoleNode, true);\r\n                }\r\n                roleComponent.PlaySitAnim(roleInfo.RoleId, roleInfo.IndexId, \r\n                    () => {\r\n                        if (index == 0)\r\n                        {\r\n                            DiningTableMgr.ShowFood(DiningTableMgr.TableList[DiningTableIndex].tableNode, SpawnNum);\r\n                        }\r\n                        roleComponent.PlaySitIdleAnim(roleInfo.RoleId, roleInfo.IndexId);\r\n                    }\r\n                );\r\n            }\r\n            \r\n            setTimeout(() => {\r\n                this.ShowMood(roleInfo, DiningTableIndex, index);\r\n                DiningTableMgr.ClearFood(DiningTableMgr.TableList[DiningTableIndex].tableNode);\r\n                const HechengGUI = oops.gui.get(UIID.MainUI);\r\n                if (HechengGUI) {\r\n                    const HechengCom = HechengGUI.getComponent(HeChengComponent);\r\n                    if (HechengCom) {\r\n                        HechengCom.createTuziCoin(roleInfo.RoleNode);\r\n                    }\r\n                }\r\n            }, 6000);\r\n        }\r\n    }\r\n\r\n    public ShowMood(roleInfo: RoleInfo, DiningTableIndex: number, index: number)\r\n    {\r\n        let totalNum = 0;\r\n        this.tableOtherParameter.init(12);\r\n        let aixinNum = Number(this.tableOtherParameter.parameter);\r\n        totalNum += aixinNum;\r\n        this.tableOtherParameter.init(13);\r\n        let xiaolianNum = Number(this.tableOtherParameter.parameter);\r\n        totalNum += xiaolianNum;\r\n\r\n        let randNum = Math.floor(Math.random() * totalNum);\r\n        if (randNum < aixinNum)\r\n        {\r\n            this.tablePictureSet.init(5);\r\n        }\r\n        else\r\n        {\r\n            this.tablePictureSet.init(6);\r\n        }\r\n\r\n        const roleComponent = roleInfo.RoleNode.getComponent(RoleComponent);\r\n        if (roleComponent) \r\n        {\r\n            roleComponent.roleMood.node.active = true;\r\n            UtilMgr.SetImage(roleComponent.roleMood, this.tablePictureSet.picture);\r\n\r\n            setTimeout(() => {\r\n                roleComponent.roleMood.node.active = false;\r\n                this.MoveBack(roleInfo, DiningTableIndex, index);\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    public MoveBack(roleInfo: RoleInfo, DiningTableIndex: number, index: number) {\r\n        if (roleInfo && roleInfo.RoleNode)\r\n        {\r\n            if (index == 1)\r\n            {\r\n                DiningTableMgr.TableList[DiningTableIndex].leftChairNode.setParent(DiningTableMgr.TableList[DiningTableIndex].leftParentNode, true);\r\n            }\r\n            const roleComponent = roleInfo.RoleNode.getComponent(RoleComponent);\r\n            if (roleComponent) \r\n            {\r\n                roleComponent.PlayWalkAnim(roleInfo.RoleId, true);\r\n            }\r\n            let speed = 100;\r\n            let pos = roleInfo.RoleNode.position;\r\n\r\n            const halfRoleHeight = roleInfo.RoleNode.getComponent(UITransform).height / 2;\r\n            let TargetPos = new Vec3(50, -halfRoleHeight);\r\n            let distance = Vec3.distance(pos, TargetPos);\r\n\r\n            const moveDuration = distance/speed;\r\n\r\n            tween(roleInfo.RoleNode)\r\n                .to(moveDuration, { position: TargetPos })\r\n                .call(() => {\r\n                    if (roleInfo)\r\n                    {\r\n                        roleInfo.IsUse = false;\r\n                        roleInfo.RoleNode.active = false;\r\n                        roleInfo.RoleNode.destroy();\r\n                    }\r\n                    setTimeout(() => {\r\n                        DiningTableMgr.TableList[DiningTableIndex].IsSeat = false;\r\n                    }, 2000);\r\n                })\r\n                .start();\r\n        }\r\n    }\r\n\r\n    public getPositionInParent(roleNode: Node, DiningTableNode: Node, index: number): Vec3 {\r\n        let tablePos = new Vec3(DiningTableNode.position.x, DiningTableNode.position.y);\r\n        \r\n        if (index == 0)\r\n        {\r\n            tablePos.x = tablePos.x + 70;\r\n            tablePos.y = tablePos.y + 70;\r\n        }\r\n        else\r\n        {\r\n            tablePos.x = tablePos.x - 50;\r\n            tablePos.y = tablePos.y + 35;\r\n        }\r\n        \r\n        const worldPos = DiningTableNode.parent.getComponent(UITransform).convertToWorldSpaceAR(tablePos);\r\n        return roleNode.parent.getComponent(UITransform).convertToNodeSpaceAR(worldPos);\r\n    }\r\n\r\n    public getChairPositionInParent(ChairNode: Node, roleNode: Node): Vec3 {\r\n        let rolePos = new Vec3(roleNode.position.x, roleNode.position.y);\r\n        \r\n        const worldPos = ChairNode.parent.getComponent(UITransform).convertToWorldSpaceAR(rolePos);\r\n        return ChairNode.parent.getComponent(UITransform).convertToNodeSpaceAR(worldPos);\r\n    }\r\n} \r\n\r\nexport var RoleMgr = new RoleManager();"]}