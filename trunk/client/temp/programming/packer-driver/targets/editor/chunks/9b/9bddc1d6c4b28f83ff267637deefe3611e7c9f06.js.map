{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/rank/RankManager.ts"],"names":["RankManager","oops","UIID","TableRank","JsonUtil","ProtocolMgr","TonGameMgr","_tsRank","allUserNumber","curRankType","curRankConfId","myInfoTuzi","myInfoCanting","RankData","compositeKey","key1","key2","toString","OpenRankUI","rankConfId","paramas","rankType","gui","open","Rank","GetRankDataByLevel","RankLevel","jsonTable","get","TableName","id","Number","Data","GetMaxRankLevelId","MaxLevelId","GetRankData","RankType","RankConfId","data","param","JSON","stringify","completeRank","ret","isSucc","res","rankTyppe","list","myInfo","sendRankList","GetRankDataBack","i","GetUserImageList","userList","push","UserId","rankList","includes","userId","length","RankMgr"],"mappings":"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","sourcesContent":["import { oops } from \"../../../../extensions/oops-plugin-framework/assets/core/Oops\";\r\nimport { UIID } from \"../../framework/common/config/GameUIConfig\";\r\nimport { TableRank } from \"../../framework/common/table/TableRank\";\r\nimport { JsonUtil } from \"../../../../extensions/oops-plugin-framework/assets/core/utils/JsonUtil\";\r\nimport { ProtocolMgr } from \"../manager/ProtocolManager\";\r\nimport { HttpReturn } from \"../../../../extensions/oops-plugin-framework/assets/libs/network/HttpRequest\";\r\nimport { TonGameMgr } from \"../manager/TonGameManager\";\r\n\r\nexport class RankManager {\r\n\r\n\r\n    private _tsRank = new TableRank();\r\n\r\n    public allUserNumber : number = 0;\r\n    public curRankType: number = 1;\r\n    public curRankConfId : number = 1;\r\n    public myInfoTuzi : any = null;\r\n    public myInfoCanting : any = null;\r\n\r\n    public RankData: { [key: string]: any } = {};\r\n\r\n    public compositeKey (key1: number, key2: number) \r\n    {\r\n        return key1.toString() + \"_\" + key2.toString();\r\n    }\r\n\r\n    //打开排行榜界面\r\n    public OpenRankUI() {\r\n        this.curRankType = 1;\r\n        this.curRankConfId = TonGameMgr.rankConfId;\r\n\r\n        let paramas: any = {};\r\n        paramas.rankType = this.curRankType;\r\n        paramas.rankConfId = this.curRankConfId;\r\n        oops.gui.open(UIID.Rank, paramas);\r\n    }\r\n\r\n    public GetRankDataByLevel(RankLevel:number) : any\r\n    {\r\n        let jsonTable = JsonUtil.get(TableRank.TableName);\r\n        if (jsonTable) \r\n        {\r\n            for (let id in jsonTable) {\r\n                if (RankLevel == Number(id))\r\n                {\r\n                    let Data = jsonTable[id];\r\n                    return Data;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public GetMaxRankLevelId() : number\r\n    {\r\n        let MaxLevelId = 1;\r\n        let jsonTable = JsonUtil.get(TableRank.TableName);\r\n        if (jsonTable) \r\n        {\r\n            for (let id in jsonTable) {\r\n                if (Number(id) > MaxLevelId)\r\n                {\r\n                    MaxLevelId = Number(id);\r\n                }\r\n            }\r\n        }\r\n        return MaxLevelId;\r\n    }\r\n\r\n    public GetRankData(RankType:number, RankConfId:number)\r\n    {\r\n        const data: { [key: string]: any } = {};\r\n        data.rankType = RankType;\r\n        data.rankConfId = RankConfId;\r\n        const param = JSON.stringify(data);\r\n        var completeRank = (ret: HttpReturn) => {\r\n            if (ret.isSucc && ret.res)\r\n            {\r\n                this.allUserNumber = ret.res.allUserNumber;\r\n                this.RankData[this.compositeKey(ret.res.rankTyppe, ret.res.rankConfId)] = ret.res.list;\r\n                if (ret.res.rankTyppe == '1')\r\n                {\r\n                    this.myInfoTuzi = ret.res.myInfo\r\n                }\r\n                else if (ret.res.rankTyppe == '2')\r\n                {\r\n                    this.myInfoCanting = ret.res.myInfo\r\n                }\r\n            }\r\n        }\r\n        ProtocolMgr.sendRankList(completeRank, param);\r\n    }\r\n    public GetRankDataBack()\r\n    {\r\n        for (let i = 1; i <= 2; ++i) \r\n        {\r\n            let jsonTable = JsonUtil.get(TableRank.TableName);\r\n            if (jsonTable) \r\n            {\r\n                for (let id in jsonTable) {\r\n                    let rankConfId = Number(id)\r\n                    if (!this.RankData[this.compositeKey(i, rankConfId)]) \r\n                    {\r\n                        this.GetRankData(i, rankConfId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public GetUserImageList() : string[] {\r\n        let userList : string[] = [];\r\n        userList.push(TonGameMgr.UserId);\r\n        for (let i = 1; i <= 2; ++i) \r\n        {\r\n            let jsonTable = JsonUtil.get(TableRank.TableName);\r\n            if (jsonTable) \r\n            {\r\n                for (let id in jsonTable) {\r\n                    let rankConfId = Number(id)\r\n                    let rankList = this.RankData[this.compositeKey(i, rankConfId)];\r\n                    if (rankList) \r\n                    {\r\n                        for (const id in rankList) {\r\n                            let RankData = rankList[id];\r\n                            if (!userList.includes(RankData.userId))\r\n                            {\r\n                                userList.push(RankData.userId);\r\n                            }\r\n                            if (userList.length >= 3)\r\n                            {\r\n                                return userList;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return userList;\r\n    }\r\n} \r\n\r\nexport var RankMgr = new RankManager();"]}