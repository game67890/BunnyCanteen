{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/extensions/oops-plugin-framework/assets/core/utils/RotateUtil.ts"],"names":["RotateUtil","Quat","toRadian","Vec3","Vec3Util","rotateAround","target","axis","rad","quat","getRotation","normalize","setRotation","rotateAroundTarget","lookAt","point_lookAt","worldPosition","point_target","vec3","fromAxisAngle","subtract","transformQuat","add","setWorldPosition","worldRotation","setWorldRotation","circularEdgePosition","center","radius","angle","edge","z","multiplyScalar","dir","sub","UP"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2022-07-26 15:29:57\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2022-09-02 12:08:28\r\n */\r\nimport { Node, Quat, toRadian, Vec3 } from \"cc\";\r\nimport { Vec3Util } from \"./Vec3Util\";\r\n\r\n/** 旋转工具 */\r\nexport class RotateUtil {\r\n    /**\r\n     * 自由旋转\r\n     * @param target     旋转目标\r\n     * @param axis       围绕旋转的轴\r\n     * @param rad        旋转弧度\r\n     */\r\n    static rotateAround(target: Node, axis: Vec3, rad: number) {\r\n        const quat = new Quat();\r\n        Quat.rotateAround(quat, target.getRotation(), axis.normalize(), rad);\r\n        target.setRotation(quat);\r\n    }\r\n\r\n    /**\r\n     * 参考瞄准目标,使当前物体围绕瞄准目标旋转\r\n     * 1、先通过弧度计算旋转四元数\r\n     * 2、通过旋转中心点或当前目标点向量相减计算出移动方向\r\n     * 3、计算起始向量旋转后的向量\r\n     * 4、计算旋转后的坐标点\r\n     * @param lookAt        瞄准目标\r\n     * @param target        旋转目标\r\n     * @param axis          围绕旋转的轴(例：Vec3.UP为Y轴)\r\n     * @param rad           旋转弧度(例：delta.x * 1e-2)\r\n     */\r\n    static rotateAroundTarget(lookAt: Node, target: Node, axis: Vec3, rad: number) {\r\n        // 计算坐标\r\n        const point_lookAt = lookAt.worldPosition;               // 锚点坐标\r\n        const point_target = target.worldPosition;               // 目标坐标\r\n        const quat = new Quat();\r\n        const vec3 = new Vec3();\r\n\r\n        // 算出坐标点的旋转四元数\r\n        Quat.fromAxisAngle(quat, axis, rad);\r\n        // 计算旋转点和现有点的向量\r\n        Vec3.subtract(vec3, point_target, point_lookAt);\r\n        // 计算将向量做旋转操作后的向量\r\n        Vec3.transformQuat(vec3, vec3, quat);\r\n        // 计算目标旋转后的点\r\n        Vec3.add(vec3, point_lookAt, vec3);\r\n        target.setWorldPosition(vec3);\r\n\r\n        // 计算目标朝向瞄准点\r\n        Quat.rotateAround(quat, target.worldRotation, axis, rad);\r\n        Quat.normalize(quat, quat);\r\n        target.setWorldRotation(quat);\r\n    }\r\n\r\n    /**\r\n     * 获取心半径边上的位置\r\n     * @param center    圆心\r\n     * @param radius    半径\r\n     * @param angle     角度\r\n     */\r\n    static circularEdgePosition(center: Vec3, radius: number, angle: number): Vec3 {\r\n        const edge = Vec3Util.z.multiplyScalar(radius);                  // 距离圆心Z抽的距离\r\n        const dir = Vec3Util.sub(edge, center);                          // 初始圆心与目标位置的方向\r\n        const vec3 = new Vec3();\r\n        const quat = new Quat();\r\n\r\n        // 算出坐标点的旋转四元数\r\n        Quat.fromAxisAngle(quat, Vec3.UP, toRadian(angle));\r\n        // 计算将向量做旋转操作后的向量\r\n        Vec3.transformQuat(vec3, dir, quat);\r\n        // 计算目标旋转后的点\r\n        Vec3.add(vec3, center, vec3);\r\n\r\n        return vec3;\r\n    }\r\n}"]}