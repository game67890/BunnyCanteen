{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/extensions/oops-plugin-framework/assets/core/common/event/MessageManager.ts"],"names":["EventData","MessageEventData","MessageManager","log","warn","event","listener","object","events","Map","on","eds","get","set","ed","push","message","off","eb","delete","dispatchEvent","args","clear","keys","Array","from","length","i","bin","data","once","_listener","$event","$args","call","splice","list","concat","eventBin"],"mappings":";;;0FAGMA,S,EAOOC,gB,EAgGAC,c;;;;;;;;;;;;;;;;;;AA1GJC,MAAAA,G,OAAAA,G;AAAKC,MAAAA,I,OAAAA,I;;;;;;;;;AAGRJ,MAAAA,S,GAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA,eACLK,KADK;AAAA,eAELC,QAFK;AAAA,eAGLC,MAHK;AAAA;;AAAA,O;AAMhB;;kCACaN,gB,GAAN,MAAMA,gBAAN,CAAuB;AAAA;AAAA,eAClBO,MADkB,GACsB,IAAIC,GAAJ,EADtB;AAAA;;AAG1B;AACJ;AACA;AACA;AACA;AACA;AACIC,QAAAA,EAAE,CAACL,KAAD,EAAgBC,QAAhB,EAAwCC,MAAxC,EAAwD;AACtD,cAAII,GAAG,GAAG,KAAKH,MAAL,CAAYI,GAAZ,CAAgBP,KAAhB,CAAV;;AACA,cAAIM,GAAG,IAAI,IAAX,EAAiB;AACbA,YAAAA,GAAG,GAAG,EAAN;AACA,iBAAKH,MAAL,CAAYK,GAAZ,CAAgBR,KAAhB,EAAuBM,GAAvB;AACH;;AACD,cAAIG,EAAa,GAAG,IAAId,SAAJ,EAApB;AACAc,UAAAA,EAAE,CAACT,KAAH,GAAWA,KAAX;AACAS,UAAAA,EAAE,CAACR,QAAH,GAAcA,QAAd;AACAQ,UAAAA,EAAE,CAACP,MAAH,GAAYA,MAAZ;AACAI,UAAAA,GAAG,CAACI,IAAJ,CAASD,EAAT;AAEAE,UAAAA,OAAO,CAACN,EAAR,CAAWL,KAAX,EAAkBC,QAAlB,EAA4BC,MAA5B;AACH;AAED;AACJ;AACA;AACA;;;AACIU,QAAAA,GAAG,CAACZ,KAAD,EAAgB;AACf,cAAIM,GAAG,GAAG,KAAKH,MAAL,CAAYI,GAAZ,CAAgBP,KAAhB,CAAV;AACA,cAAI,CAACM,GAAL,EAAU;;AAEV,eAAK,IAAIO,EAAT,IAAeP,GAAf,EAAoB;AAChBK,YAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ,EAAmBa,EAAE,CAACZ,QAAtB,EAAgCY,EAAE,CAACX,MAAnC;AACH;;AACD,eAAKC,MAAL,CAAYW,MAAZ,CAAmBd,KAAnB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIe,QAAAA,aAAa,CAACf,KAAD,EAAgB,GAAGgB,IAAnB,EAA8B;AACvCL,UAAAA,OAAO,CAACI,aAAR,CAAsBf,KAAtB,EAA6B,GAAGgB,IAAhC;AACH;AAED;;;AACAC,QAAAA,KAAK,GAAG;AACJ,gBAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAW,KAAKjB,MAAL,CAAYe,IAAZ,EAAX,CAAb;;AACA,eAAK,IAAIlB,KAAT,IAAkBkB,IAAlB,EAAwB;AACpB,iBAAKN,GAAL,CAASZ,KAAT;AACH;AACJ;;AArDyB,O;AAwD9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;gCACaH,c,GAAN,MAAMA,cAAN,CAAqB;AAAA;AAAA,eAChBM,MADgB,GACwB,IAAIC,GAAJ,EADxB;AAAA;;AAGxB;AACJ;AACA;AACA;AACA;AACA;AACIC,QAAAA,EAAE,CAACL,KAAD,EAAgBC,QAAhB,EAAwCC,MAAxC,EAAwD;AACtD,cAAI,CAACF,KAAD,IAAU,CAACC,QAAf,EAAyB;AACrBF,YAAAA,IAAI,CAAE,MAAKC,KAAM,aAAb,CAAJ;AACA;AACH;;AAED,cAAIM,GAAG,GAAG,KAAKH,MAAL,CAAYI,GAAZ,CAAgBP,KAAhB,CAAV;;AACA,cAAIM,GAAG,IAAI,IAAX,EAAiB;AACbA,YAAAA,GAAG,GAAG,EAAN;AACA,iBAAKH,MAAL,CAAYK,GAAZ,CAAgBR,KAAhB,EAAuBM,GAAvB;AACH;;AAED,cAAIe,MAAM,GAAGf,GAAG,CAACe,MAAjB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7B,gBAAIC,GAAG,GAAGjB,GAAG,CAACgB,CAAD,CAAb;;AACA,gBAAIC,GAAG,CAACtB,QAAJ,IAAgBA,QAAhB,IAA4BsB,GAAG,CAACrB,MAAJ,IAAcA,MAA9C,EAAsD;AAClDH,cAAAA,IAAI,CAAE,MAAKC,KAAM,aAAb,CAAJ;AACH;AACJ;;AAGD,cAAIwB,IAAe,GAAG,IAAI7B,SAAJ,EAAtB;AACA6B,UAAAA,IAAI,CAACxB,KAAL,GAAaA,KAAb;AACAwB,UAAAA,IAAI,CAACvB,QAAL,GAAgBA,QAAhB;AACAuB,UAAAA,IAAI,CAACtB,MAAL,GAAcA,MAAd;AACAI,UAAAA,GAAG,CAACI,IAAJ,CAASc,IAAT;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,QAAAA,IAAI,CAACzB,KAAD,EAAgBC,QAAhB,EAAwCC,MAAxC,EAAwD;AACxD,cAAIwB,SAAc,GAAG,CAACC,MAAD,EAAiB,GAAGC,KAApB,KAAmC;AACpD,iBAAKhB,GAAL,CAASZ,KAAT,EAAgB0B,SAAhB,EAA2BxB,MAA3B;AACAwB,YAAAA,SAAS,GAAG,IAAZ;AACAzB,YAAAA,QAAQ,CAAC4B,IAAT,CAAc3B,MAAd,EAAsByB,MAAtB,EAA8BC,KAA9B;AACH,WAJD;;AAKA,eAAKvB,EAAL,CAAQL,KAAR,EAAe0B,SAAf,EAA0BxB,MAA1B;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIU,QAAAA,GAAG,CAACZ,KAAD,EAAgBC,QAAhB,EAAoCC,MAApC,EAAoD;AACnD,cAAII,GAAG,GAAG,KAAKH,MAAL,CAAYI,GAAZ,CAAgBP,KAAhB,CAAV;;AAEA,cAAI,CAACM,GAAL,EAAU;AACNR,YAAAA,GAAG,CAAE,MAAKE,KAAM,SAAb,CAAH;AACA;AACH;;AAED,cAAIqB,MAAM,GAAGf,GAAG,CAACe,MAAjB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7B,gBAAIC,GAAc,GAAGjB,GAAG,CAACgB,CAAD,CAAxB;;AACA,gBAAIC,GAAG,CAACtB,QAAJ,IAAgBA,QAAhB,IAA4BsB,GAAG,CAACrB,MAAJ,IAAcA,MAA9C,EAAsD;AAClDI,cAAAA,GAAG,CAACwB,MAAJ,CAAWR,CAAX,EAAc,CAAd;AACA;AACH;AACJ;;AAED,cAAIhB,GAAG,CAACe,MAAJ,IAAc,CAAlB,EAAqB;AACjB,iBAAKlB,MAAL,CAAYW,MAAZ,CAAmBd,KAAnB;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACIe,QAAAA,aAAa,CAACf,KAAD,EAAgB,GAAGgB,IAAnB,EAA8B;AACvC,cAAIe,IAAI,GAAG,KAAK5B,MAAL,CAAYI,GAAZ,CAAgBP,KAAhB,CAAX;;AAEA,cAAI+B,IAAI,IAAI,IAAZ,EAAkB;AACd,gBAAIzB,GAAqB,GAAGyB,IAAI,CAACC,MAAL,EAA5B;AACA,gBAAIX,MAAM,GAAGf,GAAG,CAACe,MAAjB;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC7B,kBAAIW,QAAQ,GAAG3B,GAAG,CAACgB,CAAD,CAAlB;AACAW,cAAAA,QAAQ,CAAChC,QAAT,CAAkB4B,IAAlB,CAAuBI,QAAQ,CAAC/B,MAAhC,EAAwCF,KAAxC,EAA+C,GAAGgB,IAAlD;AACH;AACJ;AACJ;;AAhGuB,O;;yBAmGfL,O,GAAU,IAAId,cAAJ,E","sourcesContent":["import { log, warn } from \"cc\";\r\nimport { ListenerFunc } from \"./EventMessage\";\r\n\r\nclass EventData {\r\n    public event!: string;\r\n    public listener!: ListenerFunc;\r\n    public object: any;\r\n}\r\n\r\n/** 批量注册、移除全局事件对象 */\r\nexport class MessageEventData {\r\n    private events: Map<string, Array<EventData>> = new Map();\r\n\r\n    /**\r\n     * 注册全局事件\r\n     * @param event      事件名\r\n     * @param listener   处理事件的侦听器函数\r\n     * @param object     侦听函数绑定的作用域对象\r\n     */\r\n    on(event: string, listener: ListenerFunc, object: object) {\r\n        let eds = this.events.get(event);\r\n        if (eds == null) {\r\n            eds = [];\r\n            this.events.set(event, eds);\r\n        }\r\n        let ed: EventData = new EventData();\r\n        ed.event = event;\r\n        ed.listener = listener;\r\n        ed.object = object;\r\n        eds.push(ed);\r\n\r\n        message.on(event, listener, object);\r\n    }\r\n\r\n    /**\r\n    * 移除全局事件\r\n     * @param event     事件名\r\n     */\r\n    off(event: string) {\r\n        let eds = this.events.get(event);\r\n        if (!eds) return;\r\n\r\n        for (let eb of eds) {\r\n            message.off(event, eb.listener, eb.object);\r\n        }\r\n        this.events.delete(event);\r\n    }\r\n\r\n    /** \r\n     * 触发全局事件 \r\n     * @param event      事件名\r\n     * @param args       事件参数\r\n     */\r\n    dispatchEvent(event: string, ...args: any) {\r\n        message.dispatchEvent(event, ...args);\r\n    }\r\n\r\n    /** 清除所有的全局事件监听 */\r\n    clear() {\r\n        const keys = Array.from(this.events.keys());\r\n        for (let event of keys) {\r\n            this.off(event)\r\n        }\r\n    }\r\n}\r\n\r\n/** \r\n * 全局消息管理\r\n * @example \r\n// 注册持续监听的全局事件\r\nexport class RoleViewComp extends Component{\r\n    onLoad(){\r\n        // 监听全局事件\r\n        oops.message.on(GameEvent.GameServerConnected, this.onHandler, this);\r\n    }\r\n    \r\n    protected onDestroy() {\r\n        // 对象释放时取消注册的全局事件\r\n        oops.message.off(GameEvent.GameServerConnected, this.onHandler, this);\r\n    }\r\n    \r\n    private onHandler(event: string, args: any) {\r\n        switch (event) {\r\n            case GameEvent.GameServerConnected:\r\n                console.log(\"处理游戏服务器连接成功后的逻辑\");\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n// 注册只触发一次的全局事件\r\nexport class RoleViewComp extends Component{\r\n    onLoad(){\r\n        // 监听一次事件，事件响应后，该监听自动移除\r\n        oops.message.once(GameEvent.GameServerConnected, this.onHandler, this);\r\n    }\r\n    \r\n    private onHandler(event: string, args: any) {\r\n        switch (event) {\r\n            case GameEvent.GameServerConnected:\r\n                console.log(\"处理游戏服务器连接成功后的逻辑\");\r\n                break;\r\n        }\r\n    }\r\n}\r\n */\r\nexport class MessageManager {\r\n    private events: Map<string, Array<EventData>> = new Map();\r\n\r\n    /**\r\n     * 注册全局事件\r\n     * @param event      事件名\r\n     * @param listener   处理事件的侦听器函数\r\n     * @param object     侦听函数绑定的作用域对象\r\n     */\r\n    on(event: string, listener: ListenerFunc, object: object) {\r\n        if (!event || !listener) {\r\n            warn(`注册【${event}】事件的侦听器函数为空`);\r\n            return;\r\n        }\r\n\r\n        let eds = this.events.get(event);\r\n        if (eds == null) {\r\n            eds = [];\r\n            this.events.set(event, eds);\r\n        }\r\n\r\n        let length = eds.length;\r\n        for (let i = 0; i < length; i++) {\r\n            let bin = eds[i];\r\n            if (bin.listener == listener && bin.object == object) {\r\n                warn(`名为【${event}】的事件重复注册侦听器`);\r\n            }\r\n        }\r\n\r\n\r\n        let data: EventData = new EventData();\r\n        data.event = event;\r\n        data.listener = listener;\r\n        data.object = object;\r\n        eds.push(data);\r\n    }\r\n\r\n    /**\r\n     * 监听一次事件，事件响应后，该监听自动移除\r\n     * @param event     事件名\r\n     * @param listener  事件触发回调方法\r\n     * @param object    侦听函数绑定的作用域对象\r\n     */\r\n    once(event: string, listener: ListenerFunc, object: object) {\r\n        let _listener: any = ($event: string, ...$args: any) => {\r\n            this.off(event, _listener, object);\r\n            _listener = null;\r\n            listener.call(object, $event, $args);\r\n        }\r\n        this.on(event, _listener, object);\r\n    }\r\n\r\n    /**\r\n     * 移除全局事件\r\n     * @param event     事件名\r\n     * @param listener  处理事件的侦听器函数\r\n     * @param object    侦听函数绑定的作用域对象\r\n     */\r\n    off(event: string, listener: Function, object: object) {\r\n        let eds = this.events.get(event);\r\n\r\n        if (!eds) {\r\n            log(`名为【${event}】的事件不存在`);\r\n            return;\r\n        }\r\n\r\n        let length = eds.length;\r\n        for (let i = 0; i < length; i++) {\r\n            let bin: EventData = eds[i];\r\n            if (bin.listener == listener && bin.object == object) {\r\n                eds.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (eds.length == 0) {\r\n            this.events.delete(event);\r\n        }\r\n    }\r\n\r\n    /** \r\n     * 触发全局事件 \r\n     * @param event      事件名\r\n     * @param args       事件参数\r\n     */\r\n    dispatchEvent(event: string, ...args: any) {\r\n        let list = this.events.get(event);\r\n\r\n        if (list != null) {\r\n            let eds: Array<EventData> = list.concat();\r\n            let length = eds.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let eventBin = eds[i];\r\n                eventBin.listener.call(eventBin.object, event, ...args);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const message = new MessageManager();"]}