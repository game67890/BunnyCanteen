{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/resources/libs/utils/res/res_keeper.ts"],"names":["Component","_decorator","resLoader","ccclass","ResKeeper","resCache","Set","load","args","apply","cacheAsset","asset","has","addRef","add","onDestroy","releaseAssets","forEach","element","decRef","clear"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAeA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,U,OAAAA,U;;AAC6BC,MAAAA,S,iBAAAA,S;;;;;;;;;OAEjD;AAACC,QAAAA;AAAD,O,GAAYF,U;;2BAGLG,S,GADZD,O,UAAD,MACaC,SADb,SAC+BJ,SAD/B,CACyC;AAAA;AAAA;AAAA,eAE7BK,QAF6B,GAElB,IAAIC,GAAJ,EAFkB;AAAA;;AAY9BC,QAAAA,IAAI,CAAC,GAAGC,IAAJ,EAAe;AACtB;AACA;AAAA;AAAA,sCAAUD,IAAV,CAAeE,KAAf;AAAA;AAAA,sCAAgCD,IAAhC;AACH;AAED;AACJ;AACA;AACA;;;AACWE,QAAAA,UAAU,CAACC,KAAD,EAAe;AAC5B,cAAI,CAAC,KAAKN,QAAL,CAAcO,GAAd,CAAkBD,KAAlB,CAAL,EAA+B;AAC3BA,YAAAA,KAAK,CAACE,MAAN;AACA,iBAAKR,QAAL,CAAcS,GAAd,CAAkBH,KAAlB;AACH;AACJ;AAED;AACJ;AACA;;;AACWI,QAAAA,SAAS,GAAG;AACf,eAAKC,aAAL;AACH;AAED;AACJ;AACA;;;AACWA,QAAAA,aAAa,GAAG;AACnB,eAAKX,QAAL,CAAcY,OAAd,CAAsBC,OAAO,IAAI;AAC7BA,YAAAA,OAAO,CAACC,MAAR;AACH,WAFD;AAGA,eAAKd,QAAL,CAAce,KAAd;AACH;;AA3CoC,O","sourcesContent":["import {Asset, Component, _decorator} from \"cc\";\nimport {AssetType, CompleteCallback, ProgressCallback, resLoader} from \"./res_loader\";\n\nconst {ccclass} = _decorator;\n\n@ccclass\nexport class ResKeeper extends Component {\n\n    private resCache = new Set<Asset>();\n\n    public load<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(bundleName: string, paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(bundleName: string, paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\n    public load(...args: any) {\n        // 调用加载接口\n        resLoader.load.apply(resLoader, args);\n    }\n\n    /**\n     * 缓存资源\n     * @param asset\n     */\n    public cacheAsset(asset: Asset) {\n        if (!this.resCache.has(asset)) {\n            asset.addRef();\n            this.resCache.add(asset);\n        }\n    }\n\n    /**\n     * 组件销毁时自动释放所有keep的资源\n     */\n    public onDestroy() {\n        this.releaseAssets();\n    }\n\n    /**\n     * 释放资源，组件销毁时自动调用\n     */\n    public releaseAssets() {\n        this.resCache.forEach(element => {\n            element.decRef();\n        });\n        this.resCache.clear();\n    }\n}\n"]}