{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/ton/TonToolsViewComponent.ts"],"names":["Label","Sprite","_decorator","Component","Address","toNano","TelegramWebApp","TonMgr","UtilMgr","ccclass","property","TonToolsViewComponent","_gameFi","_tonAddressConfig","serverHost","_tonAddress","onAdded","params","onBuyWithTon","setGameFi","gamefi","walletConnector","connected","address","account","addressLab","string","parseRaw","toString","testOnly","bounceable","substring","updateTelegramInfo","setTonAddressConfig","config","userData","Instance","getTelegramUser","console","log","username","nameLab","first_name","last_name","onTransferTon","tonTransferReq","to","parse","tonAddress","amount","transferTon","onShowJetton","jettonMasterAddress","jettonAddress","show","openJetton","assetsSdk","jettonContent","getContent","message","name","decimals","alert","onGetTelegramUserData","onShare","userId","id","share","onShareStory","shareToStory","onBuyWithStars","fetch","method","then","response","json","value","ok","openInvoice","invoiceLink","result","error","onClose","PlaySoundEffect"],"mappings":"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","sourcesContent":["import { Label } from 'cc';\nimport { Sprite } from 'cc';\nimport { _decorator, Component, Node } from 'cc';\nimport { Address, GameFi, toNano, TonTransferRequest } from '@ton/cocos-sdk';\nimport { TelegramWebApp } from '../../cocos-telegram-miniapps/scripts/telegram-web';\nimport { game } from 'cc';\nimport { assetManager, SpriteFrame, Texture2D } from 'cc';\nimport { ImageAsset } from 'cc';\nimport { TonAddressConfig } from './TonManager';\n\nimport { oops } from \"../../../../extensions/oops-plugin-framework/assets/core/Oops\";\nimport { UIID } from \"../../framework/common/config/GameUIConfig\";\n\nimport { TonMgr } from \"./TonManager\";\n\nimport {TonConnectUi , type Transaction} from '../../cocos-telegram-miniapps/scripts/telegram-ui';\nimport { UtilMgr } from '../manager/UtilManager';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('TonToolsViewComponent')\nexport class TonToolsViewComponent extends Component {\n    @property(Sprite)\n    headSp: Sprite;\n    @property(Label)\n    nameLab: Label;\n    @property(Label)\n    addressLab: Label;\n    @property(Label)\n    searchLab: Label;\n    @property(Label)\n    logLab: Label;\n\n    private _gameFi: GameFi;\n    private _tonAddressConfig: TonAddressConfig;\n    private serverHost: string = \"http://127.0.0.1:8888\";\n    private _tonAddress : string;\n\n    onAdded(params: any): boolean {\n        //this._tonAddress = params.tonAddress;\n        //this.setGameFi(params.GameFi);\n        return true;\n    }\n\n    public onBuyWithTon() {\n        TonMgr.onBuyWithTon();\n    }\n\n/*\n    public onBuyWithTon() {\n        const tonTransferReq: Transaction= {\n            amount: \"0.01\",\n        };\n         TonConnectUi.Instance.sendTransaction(tonTransferReq);\n    }\n         */\n\n    public setGameFi(gamefi: GameFi) {\n        this._gameFi = gamefi;\n\n        if (this._gameFi && this._gameFi.walletConnector.connected) {\n            const address = this._gameFi.walletConnector.account.address;\n            this.addressLab.string = Address.parseRaw(address).toString({ testOnly: true, bounceable: false }).substring(0, 6) + '...';\n        } else {\n            this.addressLab.string = 'Unconnected';\n        }\n\n        this.updateTelegramInfo();\n    }\n\n\n    public setTonAddressConfig(config: TonAddressConfig) {\n        this._tonAddressConfig = config;\n    }\n\n    private updateTelegramInfo() {\n\n        const userData = TelegramWebApp.Instance.getTelegramUser();\n        console.log(\"userData : \", userData);\n        if (userData) {\n            // load username\n            if (userData.username) {\n                this.nameLab.string = userData.username;\n            } else {\n                this.nameLab.string = userData.first_name + ' ' + userData.last_name ? userData.last_name : '';\n            }\n\n            /*\n            // load profile photo\n            if (userData.photo_url) {\n                const fileExtension = userData.photo_url.split('.').pop().toLowerCase();\n                if (fileExtension == 'jpeg' || fileExtension == 'jpg' || fileExtension == 'png') {\n                    assetManager.loadRemote<ImageAsset>(userData.photo_url, function (err, imageAsset) {\n                        const spriteFrame = new SpriteFrame();\n                        const texture = new Texture2D();\n                        texture.image = imageAsset;\n                        spriteFrame.texture = texture;\n                        this.headSp.spriteFrame = spriteFrame;\n                    });\n                }\n            }\n                */\n        }\n\n    }\n\n    public onTransferTon() {\n        //将ton转移到另一个钱包地址\n        if (this._gameFi && this._gameFi.walletConnector?.connected) {\n            const tonTransferReq = {\n                to: Address.parse(this._tonAddressConfig.tonAddress),\n                amount: toNano(0.01)\n            } as TonTransferRequest;\n            this._gameFi.transferTon(tonTransferReq);\n        }\n    }\n/*\n    public onBuyWithTon() {\n        //使用 TON 在游戏内商店购买\n        if (this._gameFi)\n        {   \n            this.logLab.string = \"BuyWithTon _gameFi 1\";\n            const tonTransferReq = {\n                amount: toNano(0.01)\n            } as Omit<TonTransferRequest, \"to\">;\n            this._gameFi.buyWithTon(tonTransferReq);\n            this.logLab.string = \"BuyWithTon _gameFi 2\";\n        }\n        else\n        {\n            this.logLab.string = \"BuyWithTon _gameFi Is nil\";\n        }\n    }\n        */\n\n    public onShowJetton() {\n        if (this._tonAddressConfig)\n        {\n            const jettonMasterAddress = Address.parse(this._tonAddressConfig.jettonAddress)\n            const show = async function (_gameFi: GameFi, jettonMasterAddress: Address) {\n                //打开 Jetton 合约\n                const openJetton = _gameFi.assetsSdk.openJetton(jettonMasterAddress)\n                const jettonContent = await openJetton.getContent()\n                const message = \"jetton name: \" + jettonContent.name + \"\\njetton decimals: \" + jettonContent.decimals\n                TelegramWebApp.Instance.alert(message)\n            }\n            show(this._gameFi, jettonMasterAddress)\n        }\n    }\n\n\n    public onGetTelegramUserData() {\n        this.updateTelegramInfo();\n    }\n\n    public onShare() {\n        //分享\n        let userId = '';\n        const userData = TelegramWebApp.Instance.getTelegramUser();\n        console.log(\"userData : \", userData);\n        if (userData) {\n            userId = userData.id + '';\n        }\n        TelegramWebApp.Instance.share(\"https://t.me/cocos_demo_bot/game?startapp=ref_code_\" + userId, \"Invite you to play a very interesting game\");\n    }\n\n    public onShareStory() {\n        TelegramWebApp.Instance.shareToStory(`${this.serverHost}/story.mp4`, \"Invite you to play a crazy game\", \"https://t.me/cocos_demo_bot/game\", \"click join\")\n    }\n\n    public onBuyWithStars() {\n        fetch(`${this.serverHost}/create-stars-invoice`, { method: 'POST' }).then(response => {\n            return response.json();\n        }).then(value => {\n            console.log(\"starts invoice : \", value);\n            if (value.ok) {\n                //开具发票\n                TelegramWebApp.Instance.openInvoice(value.invoiceLink, (result) => {\n                    console.log(\"buy stars : \", result);\n                });\n            } else {\n                console.error('request config failed!');\n            }\n        });\n    }\n\n    public onClose() {\n        UtilMgr.PlaySoundEffect(19);\n    }\n\n}\n\n\n"]}