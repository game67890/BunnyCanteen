{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/resources/libs/utils/res/res_util.ts"],"names":["ResUtil","Asset","instantiate","ResKeeper","load","attachNode","args","keeper","getResKeeper","apply","autoCreate","ret","getComponent","addComponent","parent","assignWith","srcAsset","targetNode","cacheAsset","console","error","prefab","node","findCharPos","str","cha","num","x","indexOf","i","getCallStack","popCount","Error","stack","pos","slice"],"mappings":"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","sourcesContent":["import {Prefab, Asset, Node, instantiate} from \"cc\";\nimport {CompleteCallback, ProgressCallback} from \"./res_loader\";\nimport {ResKeeper} from \"./res_keeper\";\n\nexport class ResUtil {\n    public static load<T extends Asset>(attachNode: Node, url: string | string[], onCompleted: CompleteCallback<T> | null): void;\n    public static load<T extends Asset>(attachNode: Node, url: string | string[], onProgress: ProgressCallback | null, onCompleted: CompleteCallback<T> | null): void;\n    public static load<T extends Asset>(attachNode: Node, url: string | string[], type: typeof Asset, onCompleted: CompleteCallback<T> | null): void;\n    public static load<T extends Asset>(attachNode: Node, url: string | string[], type: typeof Asset, onProgress: ProgressCallback | null, onCompleted: CompleteCallback<T> | null): void;\n    public static load<T extends Asset>(attachNode: Node, bundle: string, url: string | string[], onCompleted: CompleteCallback<T> | null): void;\n    public static load<T extends Asset>(attachNode: Node, bundle: string, url: string | string[], onProgress: ProgressCallback | null, onCompleted: CompleteCallback<T> | null): void;\n    public static load<T extends Asset>(attachNode: Node, bundle: string, url: string | string[], type: typeof Asset, onCompleted: CompleteCallback<T> | null): void;\n    public static load<T extends Asset>(attachNode: Node, bundle: string, url: string | string[], type: typeof Asset, onProgress: ProgressCallback | null, onCompleted: CompleteCallback<T> | null): void;\n    public static load<T extends Asset>(attachNode: Node, ...args: any): void {\n        let keeper = ResUtil.getResKeeper(attachNode);\n        keeper!.load.apply(keeper, args);\n    }\n\n    /**\n     * 从目标节点或其父节点递归查找一个资源挂载组件\n     * @param attachNode 目标节点\n     * @param autoCreate 当目标节点找不到ResKeeper时是否自动创建一个\n     */\n    public static getResKeeper(attachNode: Node, autoCreate?: boolean): ResKeeper | null {\n        if (attachNode) {\n            let ret = attachNode.getComponent(ResKeeper);\n            if (!ret) {\n                if (autoCreate) {\n                    return attachNode.addComponent(ResKeeper);\n                } else {\n                    return ResUtil.getResKeeper(attachNode.parent!, autoCreate);\n                }\n            }\n            return ret;\n        }\n        // 返回一个默认的ResKeeper\n        return null;\n    }\n\n    /**\n     * 赋值srcAsset，并使其跟随targetNode自动释放，用法如下\n     * mySprite.spriteFrame = AssignWith(otherSpriteFrame, mySpriteNode);\n     * @param srcAsset 用于赋值的资源，如cc.SpriteFrame、cc.Texture等等\n     * @param targetNode\n     * @param autoCreate\n     */\n    public static assignWith(srcAsset: Asset, targetNode: Node, autoCreate?: boolean): any {\n        let keeper = ResUtil.getResKeeper(targetNode, autoCreate);\n        if (keeper && srcAsset instanceof Asset) {\n            keeper.cacheAsset(srcAsset);\n            return srcAsset;\n        } else {\n            console.error(`assignWith ${srcAsset} to ${targetNode} faile`);\n            return null;\n        }\n    }\n\n    /**\n     * 实例化一个prefab，并带自动释放功能\n     * @param prefab 要实例化的预制\n     */\n    public static instantiate(prefab: Prefab): Node {\n        let node = instantiate(prefab);\n        let keeper = ResUtil.getResKeeper(node, true);\n        if (keeper) {\n            keeper.cacheAsset(prefab);\n        }\n        return node;\n    }\n\n    /**\n     * 从字符串中查找第N个字符\n     * @param str 目标字符串\n     * @param cha 要查找的字符\n     * @param num 第N个\n     */\n    static findCharPos(str: string, cha: string, num: number): number {\n        let x = str.indexOf(cha);\n        let ret = x;\n        for (let i = 0; i < num; i++) {\n            x = str.indexOf(cha, x + 1);\n            if (x != -1) {\n                ret = x;\n            } else {\n                return ret;\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * 获取当前调用堆栈\n     * @param popCount 要弹出的堆栈数量\n     */\n    static getCallStack(popCount: number): string {\n        // 严格模式无法访问 arguments.callee.caller 获取堆栈，只能先用Error的stack\n        let ret = (new Error()).stack;\n        let pos = ResUtil.findCharPos(ret!, '\\n', popCount);\n        if (pos > 0) {\n            ret = ret!.slice(pos);\n        }\n        return ret!;\n    }\n}\n"]}