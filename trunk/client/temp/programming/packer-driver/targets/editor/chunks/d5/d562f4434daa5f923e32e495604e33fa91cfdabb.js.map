{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/task/TaskTabController.ts"],"names":["_decorator","Component","Node","SpriteFrame","Sprite","oops","UIID","TaskComponent","UtilMgr","ccclass","property","TaskTabController","selectedIndex","start","tabButtons","forEach","button","index","on","EventType","TOUCH_END","selectTab","PlaySoundEffect","showTab","i","sprite","getComponent","spriteFrame","selectedSprite","normalSprite","TaskGUI","gui","get","Task","TaskCom","ShowAchievementList","tabs","tab","active"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,M,OAAAA,M;;AAC1CC,MAAAA,I,iBAAAA,I;;AACAC,MAAAA,I,iBAAAA,I;;AACAC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,O,iBAAAA,O;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;;mCAGjBW,iB,WADZF,OAAO,CAAC,mBAAD,C,UAEHC,QAAQ,CAAC,CAACR,IAAD,CAAD,C,UAGRQ,QAAQ,CAAC,CAACR,IAAD,CAAD,C,UAGRQ,QAAQ,CAACP,WAAD,C,UAGRO,QAAQ,CAACP,WAAD,C,2BAXb,MACaQ,iBADb,SACuCV,SADvC,CACiD;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAcrCW,aAdqC,GAcb,CAAC,CAdY;AAAA;;AAgB7CC,QAAAA,KAAK,GAAG;AACJ,eAAKC,UAAL,CAAgBC,OAAhB,CAAwB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACvCD,YAAAA,MAAM,CAACE,EAAP,CAAUhB,IAAI,CAACiB,SAAL,CAAeC,SAAzB,EAAoC,MAAM,KAAKC,SAAL,CAAeJ,KAAf,CAA1C,EAAiE,IAAjE;AACH,WAFD,EADI,CAKJ;;AACA,eAAKI,SAAL,CAAe,CAAf;AACH;;AAEDA,QAAAA,SAAS,CAACJ,KAAD,EAAgB;AACrB;AAAA;AAAA,kCAAQK,eAAR,CAAwB,EAAxB,EADqB,CAErB;;AACA,eAAKC,OAAL,CAAaN,KAAb,EAHqB,CAKrB;;AACA,eAAKH,UAAL,CAAgBC,OAAhB,CAAwB,CAACC,MAAD,EAASQ,CAAT,KAAe;AACnC,kBAAMC,MAAM,GAAGT,MAAM,CAACU,YAAP,CAAoBtB,MAApB,CAAf;;AACA,gBAAIqB,MAAJ,EAAY;AACR;AACAA,cAAAA,MAAM,CAACE,WAAP,GAAqBH,CAAC,KAAKP,KAAN,GAAc,KAAKW,cAAnB,GAAoC,KAAKC,YAA9D;AACH;AACJ,WAND,EANqB,CAcrB;;AACA,eAAKjB,aAAL,GAAqBK,KAArB;;AAEA,cAAIA,KAAK,IAAI,CAAb,EACA;AACI,kBAAMa,OAAO,GAAG;AAAA;AAAA,8BAAKC,GAAL,CAASC,GAAT,CAAa;AAAA;AAAA,8BAAKC,IAAlB,CAAhB;;AACA,gBAAIH,OAAJ,EACA;AACI,oBAAMI,OAAO,GAAGJ,OAAO,CAACJ,YAAR;AAAA;AAAA,iDAAhB;;AACA,kBAAIQ,OAAJ,EACA;AACIA,gBAAAA,OAAO,CAACC,mBAAR;AACH;AACJ;AACJ;AACJ;;AAEDZ,QAAAA,OAAO,CAACN,KAAD,EAAgB;AACnB,eAAKmB,IAAL,CAAUrB,OAAV,CAAkB,CAACsB,GAAD,EAAMb,CAAN,KAAY;AAC1Ba,YAAAA,GAAG,CAACC,MAAJ,GAAcd,CAAC,KAAKP,KAApB;AACH,WAFD;AAGH;;AA5D4C,O;;;;;iBAExB,E;;;;;;;iBAGN,E;;;;;;;iBAGa,I;;;;;;;iBAGE,I","sourcesContent":["import { _decorator, Component, Node, SpriteFrame, Sprite } from 'cc';\r\nimport { oops } from \"../../../../extensions/oops-plugin-framework/assets/core/Oops\";\r\nimport { UIID } from \"../../framework/common/config/GameUIConfig\";\r\nimport { TaskComponent } from \"./TaskComponent\";\r\nimport { UtilMgr } from '../manager/UtilManager';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('TaskTabController')\r\nexport class TaskTabController extends Component {\r\n    @property([Node])\r\n    tabButtons: Node[] = [];\r\n\r\n    @property([Node])\r\n    tabs: Node[] = [];\r\n\r\n    @property(SpriteFrame)\r\n    normalSprite: SpriteFrame = null;\r\n\r\n    @property(SpriteFrame)\r\n    selectedSprite: SpriteFrame = null;\r\n\r\n\r\n    private selectedIndex: number = -1;\r\n\r\n    start() {\r\n        this.tabButtons.forEach((button, index) => {\r\n            button.on(Node.EventType.TOUCH_END, () => this.selectTab(index), this);\r\n        });\r\n\r\n        // 默认选中第一个 tab\r\n        this.selectTab(0);\r\n    }\r\n\r\n    selectTab(index: number) {\r\n        UtilMgr.PlaySoundEffect(25);\r\n        // 1. 显示相应的 tab 内容\r\n        this.showTab(index);\r\n\r\n        // 2. 重置所有按钮的状态\r\n        this.tabButtons.forEach((button, i) => {\r\n            const sprite = button.getComponent(Sprite);\r\n            if (sprite) {\r\n                // 设置为选中或未选中的背景图\r\n                sprite.spriteFrame = i === index ? this.selectedSprite : this.normalSprite;\r\n            }\r\n        });\r\n\r\n        // 3. 更新当前选中的索引\r\n        this.selectedIndex = index;\r\n\r\n        if (index == 1)\r\n        {\r\n            const TaskGUI = oops.gui.get(UIID.Task);\r\n            if (TaskGUI)\r\n            {\r\n                const TaskCom = TaskGUI.getComponent(TaskComponent);\r\n                if (TaskCom)\r\n                {\r\n                    TaskCom.ShowAchievementList();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    showTab(index: number) {\r\n        this.tabs.forEach((tab, i) => {\r\n            tab.active = (i === index);\r\n        });\r\n    }\r\n}"]}