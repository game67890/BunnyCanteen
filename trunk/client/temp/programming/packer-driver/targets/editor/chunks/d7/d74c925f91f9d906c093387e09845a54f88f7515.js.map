{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/extensions/oops-plugin-framework/assets/libs/animator-effect/EffectSingleCase.ts"],"names":["EffectData","EffectSingleCase","Animation","Component","NodePool","ParticleSystem","Prefab","sp","message","resLoader","ViewUtil","EffectEvent","EffectFinishedRelease","path","instance","_instance","speed","_speed","value","effects_use","forEach","key","setSpeed","constructor","effects","Map","res","on","Put","onPut","event","node","put","getCount","np","get","size","loadAndShow","parent","params","Promise","resolve","reject","undefined","bundleName","set","loadAsync","defaultBundleName","show","createPrefabNode","addComponent","isPlayFinishedRelease","getComponent","pos","position","name","delete","clear","release","spine","Skeleton","timeScale","anims","getComponentsInChildren","length","animator","aniName","defaultClip","aniState","getState","particles","particle","simulationSpeed"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2021-10-12 14:00:43\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2023-03-06 14:40:34\r\n */\r\nimport { Animation, Component, Node, NodePool, ParticleSystem, Prefab, sp, Vec3 } from 'cc';\r\nimport { message } from '../../core/common/event/MessageManager';\r\nimport { resLoader } from '../../core/common/loader/ResLoader';\r\nimport { ViewUtil } from '../../core/utils/ViewUtil';\r\nimport { EffectEvent } from './EffectEvent';\r\nimport { EffectFinishedRelease } from './EffectFinishedRelease';\r\n\r\n/** 效果数据 */\r\nclass EffectData extends Component {\r\n    /** 资源路径 */\r\n    path: string = null!;\r\n}\r\n\r\n/** 特效参数 */\r\nexport interface IEffectParams {\r\n    /** 初始位置 */\r\n    pos?: Vec3,\r\n    /** 是否播放完成后删除 */\r\n    isPlayFinishedRelease?: boolean,\r\n    /** 资源包名 */\r\n    bundleName?: string\r\n}\r\n\r\n/**\r\n * 动画特效对象池管理器，加载动画后自动播放，播放完后自动回收到池中\r\n * 1、支持Spine动画\r\n * 2、支持Cocos Animation动画\r\n * 3、支持Cocos ParticleSystem粒子动画\r\n */\r\nexport class EffectSingleCase {\r\n    private static _instance: EffectSingleCase;\r\n    static get instance(): EffectSingleCase {\r\n        if (this._instance == null) {\r\n            this._instance = new EffectSingleCase();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    private _speed: number = 1;\r\n    /** 全局动画播放速度 */\r\n    get speed(): number {\r\n        return this._speed;\r\n    }\r\n    set speed(value: number) {\r\n        this._speed = value;\r\n        this.effects_use.forEach((value: Boolean, key: Node) => {\r\n            this.setSpeed(key);\r\n        });\r\n    }\r\n\r\n    /** 对象池集合 */\r\n    private effects: Map<string, NodePool> = new Map();\r\n    /** 正在使用中的显示对象集合 */\r\n    private effects_use: Map<Node, boolean> = new Map();\r\n    /** 对象池中用到的资源 - 这里只管理本对象加载的资源，预加载资源由其它对象自己施放 */\r\n    private res: Map<string, string> = new Map();\r\n\r\n    constructor() {\r\n        message.on(EffectEvent.Put, this.onPut, this);\r\n    }\r\n\r\n    private onPut(event: string, node: Node) {\r\n        this.put(node);\r\n    }\r\n\r\n    /**\r\n     * 获取指定资源池中对象数量\r\n     * @param path  预制资源路径\r\n     */\r\n    getCount(path: string): number {\r\n        var np = this.effects.get(path);\r\n        if (np) {\r\n            return np.size();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 加载资源并生成节点对象\r\n     * @param path    预制资源路径\r\n     * @param parent  父节点\r\n     * @param params  显示参数\r\n     */\r\n    async loadAndShow(path: string, parent?: Node, params?: IEffectParams): Promise<Node> {\r\n        return new Promise(async (resolve, reject) => {\r\n            var np = this.effects.get(path);\r\n            if (np == undefined) {\r\n                if (params && params.bundleName) {\r\n                    this.res.set(path, params.bundleName);\r\n                    await resLoader.loadAsync(params.bundleName, path, Prefab);\r\n                }\r\n                else {\r\n                    this.res.set(path, resLoader.defaultBundleName);\r\n                    await resLoader.loadAsync(path, Prefab);\r\n                }\r\n\r\n                const node = this.show(path, parent, params);\r\n                resolve(node);\r\n            }\r\n            else {\r\n                const node = this.show(path, parent, params);\r\n                resolve(node);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 显示预制对象\r\n     * @param path    预制资源路径\r\n     * @param parent  父节点\r\n     * @param params  显示参数\r\n     */\r\n    private show(path: string, parent?: Node, params?: IEffectParams): Node {\r\n        var np = this.effects.get(path);\r\n        if (np == null) {\r\n            np = new NodePool();\r\n            this.effects.set(path, np);\r\n        }\r\n\r\n        var node: Node;\r\n        // 创建池中新显示对象\r\n        if (np.size() == 0) {\r\n            node = ViewUtil.createPrefabNode(path);\r\n            node.addComponent(EffectData).path = path;\r\n            if (params && params.isPlayFinishedRelease) {\r\n                node.addComponent(EffectFinishedRelease);\r\n            }\r\n        }\r\n        // 池中获取没使用的显示对象\r\n        else {\r\n            node = np.get()!;\r\n            node.getComponent(EffectFinishedRelease);\r\n        }\r\n\r\n        // 设置动画播放速度\r\n        this.setSpeed(node);\r\n\r\n        // 设置显示对象位置\r\n        if (params && params.pos) node.position = params.pos;\r\n\r\n        // 显示到屏幕上\r\n        if (parent) node.parent = parent;\r\n\r\n        // 记录缓冲池中放出的节点\r\n        this.effects_use.set(node, true);\r\n\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * 回收对象\r\n     * @param name  预制对象名称\r\n     * @param node  节点\r\n     */\r\n    put(node: Node) {\r\n        var name = node.getComponent(EffectData)!.path;\r\n        var np = this.effects.get(name);\r\n        if (np) {\r\n            // 回收使用的节点\r\n            this.effects_use.delete(node);\r\n\r\n            // 回到到池中\r\n            np.put(node);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清除对象池数据\r\n     * @param path  参数为空时，清除所有对象池数据;指定名时，清楚指定数据\r\n     */\r\n    clear(path?: string) {\r\n        if (path) {\r\n            var np = this.effects.get(path)!;\r\n            np.clear();\r\n        }\r\n        else {\r\n            this.effects.forEach(np => {\r\n                np.clear();\r\n            });\r\n            this.effects.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放对象池中显示对象的资源内存\r\n     * @param path 资源路径\r\n     */\r\n    release(path?: string) {\r\n        if (path) {\r\n            this.clear(path);\r\n            const bundleName = this.res.get(path);\r\n            resLoader.release(path, bundleName);\r\n            this.res.delete(path);\r\n        }\r\n        else {\r\n            // 施放池中对象内存\r\n            this.clear();\r\n\r\n            // 施放对象资源内存\r\n            this.res.forEach((bundleName: string, path: string) => {\r\n                resLoader.release(path, bundleName);\r\n            });\r\n            this.res.clear()\r\n        }\r\n    }\r\n\r\n    /** 设置动画速度 */\r\n    private setSpeed(node: Node) {\r\n        // SPINE动画\r\n        let spine = node.getComponent(sp.Skeleton);\r\n        if (spine) {\r\n            spine.timeScale = this.speed;\r\n        }\r\n        else {\r\n            // COCOS动画\r\n            const anims: Animation[] = node.getComponentsInChildren(Animation);\r\n            if (anims.length > 0) {\r\n                anims.forEach(animator => {\r\n                    let aniName = animator.defaultClip?.name;\r\n                    if (aniName) {\r\n                        let aniState = animator.getState(aniName);\r\n                        if (aniState) {\r\n                            aniState.speed = this.speed;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            // 粒子动画\r\n            else if (ParticleSystem) {\r\n                const particles: ParticleSystem[] = node.getComponentsInChildren(ParticleSystem);\r\n                particles.forEach(particle => {\r\n                    particle.simulationSpeed = this.speed;\r\n                });\r\n            }\r\n        }\r\n    }\r\n}"]}