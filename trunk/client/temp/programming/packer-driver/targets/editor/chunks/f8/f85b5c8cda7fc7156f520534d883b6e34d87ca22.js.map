{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/resources/libs/utils/res/res_leak_checker.ts"],"names":["ResLeakChecker","ResUtil","resFilter","_checking","traceAssets","Set","checkFilter","asset","traceAsset","has","addRef","add","extendAsset","addRefFunc","decRefFunc","decRef","traceMap","Map","args","stack","getCallStack","cnt","get","set","apply","resetAsset","untraceAsset","delete","startCheck","stopCheck","getTraceAssets","reset","forEach","element","clear","dump","key","value","console","log"],"mappings":"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","sourcesContent":["import {Asset} from \"cc\";\nimport {ResUtil} from \"./res_util\";\n\nexport type FilterCallback = (asset: Asset) => boolean;\n\nexport class ResLeakChecker {\n    public resFilter: FilterCallback | null = null;    // 资源过滤回调\n    private _checking: boolean = false;\n    private traceAssets: Set<Asset> = new Set<Asset>();\n\n    /**\n     * 检查该资源是否符合过滤条件\n     * @param asset\n     */\n    public checkFilter(asset: Asset): boolean {\n        if (!this._checking) {\n            return false;\n        }\n        if (this.resFilter) {\n            return this.resFilter(asset);\n        }\n        return true;\n    }\n\n    /**\n     * 对资源进行引用的跟踪\n     * @param asset\n     */\n    public traceAsset(asset: Asset) {\n        if (!asset || !this.checkFilter(asset)) {\n            return;\n        }\n        if (!this.traceAssets.has(asset)) {\n            asset.addRef();\n            this.traceAssets.add(asset);\n            this.extendAsset(asset);\n        }\n    }\n\n    /**\n     * 扩展asset，使其支持引用计数追踪\n     * @param asset\n     */\n    public extendAsset(asset: Asset) {\n        let addRefFunc = asset.addRef;\n        let decRefFunc = asset.decRef;\n        let traceMap = new Map<string, number>();\n        asset['traceMap'] = traceMap;\n        asset.addRef = function (...args: any): Asset {\n            let stack = ResUtil.getCallStack(1);\n            let cnt = traceMap.has(stack) ? traceMap.get(stack)! + 1 : 1;\n            traceMap.set(stack, cnt);\n            return addRefFunc.apply(asset, args);\n        }\n        asset.decRef = function (...args: any): Asset {\n            let stack = ResUtil.getCallStack(1);\n            let cnt = traceMap.has(stack) ? traceMap.get(stack)! + 1 : 1;\n            traceMap.set(stack, cnt);\n            return decRefFunc.apply(asset, args);\n        }\n        asset['resetTrace'] = () => {\n            asset.addRef = addRefFunc;\n            asset.decRef = decRefFunc;\n            delete asset['traceMap'];\n        }\n    }\n\n    /**\n     * 还原asset，使其恢复默认的引用计数功能\n     * @param asset\n     */\n    public resetAsset(asset: Asset) {\n        if (asset['resetTrace']) {\n            asset['resetTrace']();\n        }\n    }\n\n    public untraceAsset(asset: Asset) {\n        if (this.traceAssets.has(asset)) {\n            this.resetAsset(asset);\n            asset.decRef();\n            this.traceAssets.delete(asset);\n        }\n    }\n\n    public startCheck() {\n        this._checking = true;\n    }\n\n    public stopCheck() {\n        this._checking = false;\n    }\n\n    public getTraceAssets(): Set<Asset> {\n        return this.traceAssets;\n    }\n\n    public reset() {\n        this.traceAssets.forEach(element => {\n            this.resetAsset(element);\n            element.decRef();\n        });\n        this.traceAssets.clear();\n    }\n\n    public dump() {\n        this.traceAssets.forEach(element => {\n            let traceMap: Map<string, number> | undefined = element['traceMap'];\n            if (traceMap) {\n                traceMap.forEach((key, value) => {\n                    console.log(`${key} : ${value} `);\n                });\n            }\n        })\n    }\n}\n"]}