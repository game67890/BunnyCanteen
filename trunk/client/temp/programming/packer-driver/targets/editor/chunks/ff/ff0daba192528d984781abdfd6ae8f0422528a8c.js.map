{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/task/TaskManager.ts"],"names":["TaskManager","oops","UIID","ProtocolMgr","TableTask","TableAchievement","JsonUtil","_tsTask","_tsAchievement","ServerTaskList","ServerAchievementList","TaskCellList","AchievementCellList","OpenTaskUI","gui","open","Task","GetTaskData","callback","completeLogin","ret","console","log","res","isSucc","result","sendTaskPanel","modifyTaskData","TaskID","IsFinished","key","TaskMgr","hasOwnProperty","value","valueObject","JSON","parse","ID","isFinished","stringify","modifyAchievementData","AchievementID","canGetAchievementReward","init","progress","condition","IsHasTaskType","TaskType","jsonTable","get","TableName","id","task","tasktype","GetTaskCelllist","Number","push","GetAchievementCellList","AchievementType","Achievement","achievetype","GetAchievementItemCellList"],"mappings":"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","sourcesContent":["import { oops } from \"../../../../extensions/oops-plugin-framework/assets/core/Oops\";\r\nimport { UIID } from \"../../framework/common/config/GameUIConfig\";\r\nimport { ProtocolMgr } from \"../manager/ProtocolManager\";\r\nimport { HttpReturn } from \"../../../../extensions/oops-plugin-framework/assets/libs/network/HttpRequest\";\r\n\r\nimport { TableTask } from \"../../framework/common/table/TableTask\";\r\nimport { TableAchievement } from \"../../framework/common/table/TableAchievement\";\r\nimport { JsonUtil } from \"../../../../extensions/oops-plugin-framework/assets/core/utils/JsonUtil\";\r\n\r\nexport class TaskManager {\r\n\r\n    private _tsTask = new TableTask();\r\n    private _tsAchievement = new TableAchievement();\r\n\r\n    public ServerTaskList : any = null;\r\n    public ServerAchievementList : any = null;\r\n\r\n    public TaskCellList: any[] = [];\r\n    public AchievementCellList: any[] = [];\r\n\r\n    public OpenTaskUI() {\r\n        oops.gui.open(UIID.Task);\r\n    }\r\n\r\n    public GetTaskData(callback?: Function){\r\n        var completeLogin = (ret: HttpReturn) => {\r\n            console.log(ret.res);\r\n            if (ret.isSucc && ret.res.result)\r\n            {\r\n                if (callback)\r\n                {\r\n                    callback(ret.res)\r\n                }\r\n            }\r\n        }\r\n        ProtocolMgr.sendTaskPanel(completeLogin, \"\");\r\n    }\r\n\r\n    public modifyTaskData(TaskID:number, IsFinished:boolean) : boolean {\r\n        for (const key in TaskMgr.ServerTaskList) {\r\n            if (TaskMgr.ServerTaskList.hasOwnProperty(key)) {\r\n                let value = TaskMgr.ServerTaskList[key];\r\n                let valueObject = JSON.parse(value);\r\n                if (valueObject.ID == TaskID)\r\n                {\r\n                    valueObject.isFinished = IsFinished;\r\n                    TaskMgr.ServerTaskList[key] = JSON.stringify(valueObject);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public modifyAchievementData(AchievementID:number, IsFinished:boolean) : boolean {\r\n        for (const key in TaskMgr.ServerAchievementList) {\r\n            if (TaskMgr.ServerAchievementList.hasOwnProperty(key)) {\r\n                let value = TaskMgr.ServerAchievementList[key];\r\n                let valueObject = JSON.parse(value);\r\n                if (valueObject.ID == AchievementID)\r\n                {\r\n                    valueObject.isFinished = IsFinished;\r\n                    TaskMgr.ServerAchievementList[key] = JSON.stringify(valueObject);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public canGetAchievementReward(AchievementID:number) : boolean {\r\n        for (const key in TaskMgr.ServerAchievementList) {\r\n            if (TaskMgr.ServerAchievementList.hasOwnProperty(key)) {\r\n                let value = TaskMgr.ServerAchievementList[key];\r\n                let valueObject = JSON.parse(value);\r\n                if (valueObject.ID == AchievementID)\r\n                {\r\n                   if (valueObject.isFinished)\r\n                   {\r\n                        return false;\r\n                   }\r\n                   else\r\n                   {\r\n                        this._tsAchievement.init(AchievementID);\r\n                        if (valueObject.progress >= this._tsAchievement.condition)\r\n                        {\r\n                            return true;\r\n                        }\r\n                        else\r\n                        {\r\n                            return false;\r\n                        }\r\n                   }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n\r\n    public IsHasTaskType(TaskType:number) : boolean {\r\n\r\n        let jsonTable = JsonUtil.get(TableTask.TableName);\r\n        if (jsonTable) \r\n        {\r\n            for (let id in jsonTable) {\r\n                let task = jsonTable[id];\r\n                if (task.tasktype == TaskType) \r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public GetTaskCelllist() : any {\r\n        this.TaskCellList = [];\r\n        let jsonTable = JsonUtil.get(TableTask.TableName);\r\n        if (jsonTable) \r\n        {\r\n            for (let id in jsonTable) {\r\n                let task = jsonTable[id];\r\n                task.id = Number(id);\r\n                this.TaskCellList.push(task);\r\n            }\r\n        }\r\n        return this.TaskCellList;\r\n    }\r\n\r\n    public GetAchievementCellList() : any {\r\n        this.AchievementCellList = [];\r\n        let jsonTable = JsonUtil.get(TableAchievement.TableName);\r\n        if (jsonTable) \r\n        {\r\n            let AchievementType = 0;\r\n            for (let id in jsonTable) {\r\n                let Achievement = jsonTable[id];\r\n                if (AchievementType != Achievement.achievetype)\r\n                {\r\n                    AchievementType = Achievement.achievetype;\r\n                    Achievement.id = Number(id)\r\n                    this.AchievementCellList.push(Achievement);\r\n                } \r\n            }\r\n        }\r\n        return this.AchievementCellList;\r\n    }\r\n\r\n    public GetAchievementItemCellList(AchievementType:number) : any {\r\n        this.AchievementCellList = [];\r\n        let jsonTable = JsonUtil.get(TableAchievement.TableName);\r\n        if (jsonTable) \r\n        {\r\n            for (let id in jsonTable) {\r\n                let Achievement = jsonTable[id];\r\n                if (AchievementType == Achievement.achievetype)\r\n                {\r\n                    Achievement.id = Number(id)\r\n                    this.AchievementCellList.push(Achievement);\r\n                } \r\n            }\r\n        }\r\n        return this.AchievementCellList;\r\n    }\r\n} \r\n\r\nexport var TaskMgr = new TaskManager();"]}