{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/extensions/oops-plugin-framework/assets/core/common/loader/ResLoader.ts"],"names":["ResLoader","Asset","assetManager","error","js","resources","warn","defaultBundleName","maxConcurrency","downloader","value","maxRequestsPerFrame","maxRetryCount","retryInterval","loadRemote","url","options","onComplete","loadBundle","v","Promise","resolve","reject","version","err","bundle","load","bundleName","paths","type","onProgress","args","Array","parseLoadResArgs","loadByArgs","loadAsync","asset","message","loadDir","dir","release","path","getBundle","get","releasePrefabtDepsRecursively","releaseDir","infos","getDirWithPath","map","info","uuid","removeBundle","decRef","assets","dump","forEach","key","console","log","count","pathsOut","typeOut","onProgressOut","onCompleteOut","undefined","isValidType","isChildClassOf","loadByBundleAndArgs","bundles","has","preLoadAsync","preLoad","preLoadByArgs","preLoadByBundleAndArgs","preloadDir","preload","resLoader"],"mappings":"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","sourcesContent":["import { Asset, AssetManager, Constructor, __private, assetManager, error, js, resources, warn } from \"cc\";\r\n\r\nexport type ProgressCallback = __private._cocos_asset_asset_manager_deprecated__LoadProgressCallback;\r\nexport type CompleteCallback<T = any> = any;       // (error: Error | null, asset: T) => void;  (error: Error | null, asset: T[], urls: string[]) => void;\r\nexport type IRemoteOptions = { [k: string]: any; ext?: string; } | null;\r\nexport type AssetType<T = Asset> = Constructor<T>;\r\n\r\ninterface ILoadResArgs<T extends Asset> {\r\n    bundle?: string;\r\n    dir?: string;\r\n    paths: string | string[];\r\n    type: AssetType<T> | null;\r\n    onProgress: ProgressCallback | null;\r\n    onComplete: CompleteCallback<T> | null;\r\n}\r\n\r\n/** \r\n * 游戏资源管理\r\n * 1、加载默认resources文件夹中资源\r\n * 2、加载默认bundle远程资源\r\n * 3、主动传递bundle名时，优先加载传递bundle名资源包中的资源\r\n */\r\nexport class ResLoader {\r\n    /** 全局默认加载的资源包名 */\r\n    defaultBundleName: string = \"resources\";\r\n\r\n    /** 下载时的最大并发数 - 项目设置 -> 项目数据 -> 资源下载并发数，设置默认值；初始值为15 */\r\n    get maxConcurrency() {\r\n        return assetManager.downloader.maxConcurrency;\r\n    }\r\n    set maxConcurrency(value) {\r\n        assetManager.downloader.maxConcurrency = value;\r\n    }\r\n\r\n    /** 下载时每帧可以启动的最大请求数 - 默认值为15 */\r\n    get maxRequestsPerFrame() {\r\n        return assetManager.downloader.maxRequestsPerFrame;\r\n    }\r\n    set maxRequestsPerFrame(value) {\r\n        assetManager.downloader.maxRequestsPerFrame = value;\r\n    }\r\n\r\n    /** 失败重试次数 - 默认值为0 */\r\n    get maxRetryCount() {\r\n        return assetManager.downloader.maxRetryCount;\r\n    }\r\n    set maxRetryCount(value) {\r\n        assetManager.downloader.maxRetryCount = value;\r\n    }\r\n\r\n    /** 重试的间隔时间，单位为毫秒 - 默认值为2000毫秒 */\r\n    get retryInterval() {\r\n        return assetManager.downloader.retryInterval;\r\n    }\r\n    set retryInterval(value) {\r\n        assetManager.downloader.retryInterval = value;\r\n    }\r\n\r\n    /**\r\n     * 加载远程资源\r\n     * @param url           资源地址\r\n     * @param options       资源参数，例：{ ext: \".png\" }\r\n     * @param onComplete    加载完成回调\r\n     * @example\r\nvar opt: IRemoteOptions = { ext: \".png\" };\r\nvar onComplete = (err: Error | null, data: ImageAsset) => {\r\n    const texture = new Texture2D();\r\n    texture.image = data;\r\n    \r\n    const spriteFrame = new SpriteFrame();\r\n    spriteFrame.texture = texture;\r\n    \r\n    var sprite = this.sprite.addComponent(Sprite);\r\n    sprite.spriteFrame = spriteFrame;\r\n}\r\noops.res.loadRemote<ImageAsset>(this.url, opt, onComplete);\r\n     */\r\n    loadRemote<T extends Asset>(url: string, options: IRemoteOptions | null, onComplete?: CompleteCallback<T> | null): void;\r\n    loadRemote<T extends Asset>(url: string, onComplete?: CompleteCallback<T> | null): void;\r\n    loadRemote<T extends Asset>(url: string, ...args: any): void {\r\n        let options: IRemoteOptions | null = null;\r\n        let onComplete: CompleteCallback<T> | null = null;\r\n        if (args.length == 2) {\r\n            options = args[0];\r\n            onComplete = args[1];\r\n        }\r\n        else {\r\n            onComplete = args[0];\r\n        }\r\n        assetManager.loadRemote<T>(url, options, onComplete);\r\n    }\r\n\r\n    /**\r\n     * 加载资源包\r\n     * @param url       资源地址\r\n     * @param v         资源MD5版本号\r\n     * @example\r\nvar serverUrl = \"http://192.168.1.8:8080/\";         // 服务器地址\r\nvar md5 = \"8e5c0\";                                  // Cocos Creator 构建后的MD5字符\r\nawait oops.res.loadBundle(serverUrl,md5);\r\n     */\r\n    loadBundle(url: string, v?: string) {\r\n        return new Promise<AssetManager.Bundle>((resolve, reject) => {\r\n            assetManager.loadBundle(url, { version: v }, (err, bundle: AssetManager.Bundle) => {\r\n                if (err) {\r\n                    return error(err);\r\n                }\r\n                resolve(bundle);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 加载一个资源\r\n     * @param bundleName    远程包名\r\n     * @param paths         资源路径\r\n     * @param type          资源类型\r\n     * @param onProgress    加载进度回调\r\n     * @param onComplete    加载完成回调\r\n     * @example\r\noops.res.load(\"spine_path\", sp.SkeletonData, (err: Error | null, sd: sp.SkeletonData) => {\r\n\r\n});\r\n     */\r\n    load<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\r\n    load<T extends Asset>(bundleName: string, paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\r\n    load<T extends Asset>(bundleName: string, paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\r\n    load<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\r\n    load<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\r\n    load<T extends Asset>(paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\r\n    load<T extends Asset>(paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\r\n    load<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\r\n    load<T extends Asset>(\r\n        bundleName: string,\r\n        paths?: string | string[] | AssetType<T> | ProgressCallback | CompleteCallback | null,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\r\n        onProgress?: ProgressCallback | CompleteCallback | null,\r\n        onComplete?: CompleteCallback | null,\r\n    ) {\r\n        let args: ILoadResArgs<T> | null = null;\r\n        if (typeof paths === \"string\" || paths instanceof Array) {\r\n            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);\r\n            args.bundle = bundleName;\r\n        }\r\n        else {\r\n            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);\r\n            args.bundle = this.defaultBundleName;\r\n        }\r\n        this.loadByArgs(args);\r\n    }\r\n\r\n    loadAsync<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null): Promise<T>;\r\n    loadAsync<T extends Asset>(bundleName: string, paths: string | string[]): Promise<T>;\r\n    loadAsync<T extends Asset>(bundleName: string, paths: string | string[]): Promise<T>;\r\n    loadAsync<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null): Promise<T>;\r\n    loadAsync<T extends Asset>(paths: string | string[], type: AssetType<T> | null): Promise<T>;\r\n    loadAsync<T extends Asset>(paths: string | string[]): Promise<T>;\r\n    loadAsync<T extends Asset>(paths: string | string[]): Promise<T>;\r\n    loadAsync<T extends Asset>(paths: string | string[], type: AssetType<T> | null): Promise<T>;\r\n    loadAsync<T extends Asset>(bundleName: string, paths?: string | string[] | AssetType<T> | ProgressCallback | CompleteCallback | null, type?: AssetType<T> | ProgressCallback | CompleteCallback | null): Promise<T> {\r\n        return new Promise((resolve, reject) => {\r\n            this.load(bundleName, paths, type, (err: Error | null, asset: T) => {\r\n                if (err) {\r\n                    warn(err.message);\r\n                }\r\n                resolve(asset);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 加载文件夹中的资源\r\n     * @param bundleName    远程包名\r\n     * @param dir           文件夹名\r\n     * @param type          资源类型\r\n     * @param onProgress    加载进度回调\r\n     * @param onComplete    加载完成回调\r\n     * @example\r\n// 加载进度事件\r\nvar onProgressCallback = (finished: number, total: number, item: any) => {\r\n    console.log(\"资源加载进度\", finished, total);\r\n}\r\n\r\n// 加载完成事件\r\nvar onCompleteCallback = () => {\r\n    console.log(\"资源加载完成\");\r\n}\r\noops.res.loadDir(\"game\", onProgressCallback, onCompleteCallback);\r\n     */\r\n    loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\r\n    loadDir<T extends Asset>(bundleName: string, dir: string, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\r\n    loadDir<T extends Asset>(bundleName: string, dir: string, onComplete?: CompleteCallback<T[]> | null): void;\r\n    loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T> | null, onComplete?: CompleteCallback<T[]> | null): void;\r\n    loadDir<T extends Asset>(dir: string, type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\r\n    loadDir<T extends Asset>(dir: string, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\r\n    loadDir<T extends Asset>(dir: string, onComplete?: CompleteCallback<T[]> | null): void;\r\n    loadDir<T extends Asset>(dir: string, type: AssetType<T> | null, onComplete?: CompleteCallback<T[]> | null): void;\r\n    loadDir<T extends Asset>(\r\n        bundleName: string,\r\n        dir?: string | AssetType<T> | ProgressCallback | CompleteCallback | null,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\r\n        onProgress?: ProgressCallback | CompleteCallback | null,\r\n        onComplete?: CompleteCallback | null,\r\n    ) {\r\n        let args: ILoadResArgs<T> | null = null;\r\n        if (typeof dir === \"string\") {\r\n            args = this.parseLoadResArgs(dir, type, onProgress, onComplete);\r\n            args.bundle = bundleName;\r\n        }\r\n        else {\r\n            args = this.parseLoadResArgs(bundleName, dir, type, onProgress);\r\n            args.bundle = this.defaultBundleName;\r\n        }\r\n        args.dir = args.paths as string;\r\n        this.loadByArgs(args);\r\n    }\r\n\r\n    /**\r\n     * 通过资源相对路径释放资源\r\n     * @param path          资源路径\r\n     * @param bundleName    远程资源包名\r\n     */\r\n    release(path: string, bundleName?: string) {\r\n        if (bundleName == null) bundleName = this.defaultBundleName;\r\n\r\n        const bundle = assetManager.getBundle(bundleName);\r\n        if (bundle) {\r\n            const asset = bundle.get(path);\r\n            if (asset) {\r\n                this.releasePrefabtDepsRecursively(asset);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通过相对文件夹路径删除所有文件夹中资源\r\n     * @param path          资源文件夹路径\r\n     * @param bundleName    远程资源包名\r\n     */\r\n    releaseDir(path: string, bundleName?: string) {\r\n        if (bundleName == null) bundleName = this.defaultBundleName;\r\n\r\n        const bundle: AssetManager.Bundle | null = assetManager.getBundle(bundleName);\r\n        if (bundle) {\r\n            var infos = bundle.getDirWithPath(path);\r\n            if (infos) {\r\n                infos.map((info) => {\r\n                    this.releasePrefabtDepsRecursively(info.uuid);\r\n                });\r\n            }\r\n\r\n            if (path == \"\" && bundleName != \"resources\") {\r\n                assetManager.removeBundle(bundle);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 释放预制依赖资源 */\r\n    private releasePrefabtDepsRecursively(uuid: string | Asset) {\r\n        if (uuid instanceof Asset) {\r\n            uuid.decRef();\r\n            // assetManager.releaseAsset(uuid);\r\n        }\r\n        else {\r\n            const asset = assetManager.assets.get(uuid);\r\n            if (asset) {\r\n                asset.decRef();\r\n                // assetManager.releaseAsset(asset);\r\n            }\r\n        }\r\n\r\n        // Cocos引擎内部已处理子关联资源的释放\r\n        // if (asset instanceof Prefab) {\r\n        //     var uuids: string[] = assetManager.dependUtil.getDepsRecursively(uuid)!;\r\n        //     uuids.forEach(uuid => {\r\n        //         var asset = assetManager.assets.get(uuid)!;\r\n        //         asset.decRef();\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * 获取资源\r\n     * @param path          资源路径\r\n     * @param type          资源类型\r\n     * @param bundleName    远程资源包名\r\n     */\r\n    get<T extends Asset>(path: string, type?: __private.__types_globals__Constructor<T> | null, bundleName?: string): T | null {\r\n        if (bundleName == null) bundleName = this.defaultBundleName;\r\n\r\n        var bundle: AssetManager.Bundle = assetManager.getBundle(bundleName)!;\r\n        return bundle.get(path, type);\r\n    }\r\n\r\n    /** 打印缓存中所有资源信息 */\r\n    dump() {\r\n        assetManager.assets.forEach((value: Asset, key: string) => {\r\n            console.log(assetManager.assets.get(key));\r\n        })\r\n        console.log(`当前资源总数:${assetManager.assets.count}`);\r\n    }\r\n\r\n    private parseLoadResArgs<T extends Asset>(\r\n        paths: string | string[],\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\r\n        onProgress?: AssetType<T> | ProgressCallback | CompleteCallback | null,\r\n        onComplete?: ProgressCallback | CompleteCallback | null\r\n    ) {\r\n        let pathsOut: any = paths;\r\n        let typeOut: any = type;\r\n        let onProgressOut: any = onProgress;\r\n        let onCompleteOut: any = onComplete;\r\n        if (onComplete === undefined) {\r\n            const isValidType = js.isChildClassOf(type as AssetType, Asset);\r\n            if (onProgress) {\r\n                onCompleteOut = onProgress as CompleteCallback;\r\n                if (isValidType) {\r\n                    onProgressOut = null;\r\n                }\r\n            }\r\n            else if (onProgress === undefined && !isValidType) {\r\n                onCompleteOut = type as CompleteCallback;\r\n                onProgressOut = null;\r\n                typeOut = null;\r\n            }\r\n            if (onProgress !== undefined && !isValidType) {\r\n                onProgressOut = type as ProgressCallback;\r\n                typeOut = null;\r\n            }\r\n        }\r\n        return { paths: pathsOut, type: typeOut, onProgress: onProgressOut, onComplete: onCompleteOut };\r\n    }\r\n\r\n    private loadByBundleAndArgs<T extends Asset>(bundle: AssetManager.Bundle, args: ILoadResArgs<T>): void {\r\n        if (args.dir) {\r\n            bundle.loadDir(args.paths as string, args.type, args.onProgress, args.onComplete);\r\n        }\r\n        else {\r\n            if (typeof args.paths == 'string') {\r\n                bundle.load(args.paths, args.type, args.onProgress, args.onComplete);\r\n            }\r\n            else {\r\n                bundle.load(args.paths, args.type, args.onProgress, args.onComplete);\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadByArgs<T extends Asset>(args: ILoadResArgs<T>) {\r\n        if (args.bundle) {\r\n            if (assetManager.bundles.has(args.bundle)) {\r\n                let bundle = assetManager.bundles.get(args.bundle);\r\n                this.loadByBundleAndArgs(bundle!, args);\r\n            }\r\n            else {\r\n                // 自动加载bundle\r\n                assetManager.loadBundle(args.bundle, (err, bundle) => {\r\n                    if (!err) {\r\n                        this.loadByBundleAndArgs(bundle, args);\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            this.loadByBundleAndArgs(resources, args);\r\n        }\r\n    }\r\n\r\n    preLoadAsync<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null): Promise<T>;\r\n    preLoadAsync<T extends Asset>(bundleName: string, paths: string | string[]): Promise<T>;\r\n    preLoadAsync<T extends Asset>(bundleName: string, paths: string | string[]): Promise<T>;\r\n    preLoadAsync<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null): Promise<T>;\r\n    preLoadAsync<T extends Asset>(paths: string | string[], type: AssetType<T> | null): Promise<T>;\r\n    preLoadAsync<T extends Asset>(paths: string | string[]): Promise<T>;\r\n    preLoadAsync<T extends Asset>(paths: string | string[]): Promise<T>;\r\n    preLoadAsync<T extends Asset>(paths: string | string[], type: AssetType<T> | null): Promise<T>;\r\n    preLoadAsync<T extends Asset>(bundleName: string, paths?: string | string[] | AssetType<T> | ProgressCallback | CompleteCallback | null, type?: AssetType<T> | ProgressCallback | CompleteCallback | null): Promise<T> {\r\n        return new Promise((resolve, reject) => {\r\n            this.preLoad(bundleName, paths, type, (err: Error | null, asset: T) => {\r\n                if (err) {\r\n                    warn(err.message);\r\n                }\r\n                resolve(asset);\r\n            });\r\n        });\r\n    }\r\n\r\n    preLoad<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\r\n    preLoad<T extends Asset>(bundleName: string, paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\r\n    preLoad<T extends Asset>(bundleName: string, paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\r\n    preLoad<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\r\n    preLoad<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\r\n    preLoad<T extends Asset>(paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\r\n    preLoad<T extends Asset>(paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\r\n    preLoad<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\r\n    preLoad<T extends Asset>(\r\n        bundleName: string,\r\n        paths?: string | string[] | AssetType<T> | ProgressCallback | CompleteCallback | null,\r\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\r\n        onProgress?: ProgressCallback | CompleteCallback | null,\r\n        onComplete?: CompleteCallback | null,\r\n    ) {\r\n        let args: ILoadResArgs<T> | null = null;\r\n        if (typeof paths === \"string\" || paths instanceof Array) {\r\n            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);\r\n            args.bundle = bundleName;\r\n        }\r\n        else {\r\n            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);\r\n            args.bundle = this.defaultBundleName;\r\n        }\r\n        this.preLoadByArgs(args);\r\n    }\r\n\r\n    private preLoadByArgs<T extends Asset>(args: ILoadResArgs<T>) {\r\n        if (args.bundle) {\r\n            if (assetManager.bundles.has(args.bundle)) {\r\n                let bundle = assetManager.bundles.get(args.bundle);\r\n                this.preLoadByBundleAndArgs(bundle!, args);\r\n            }\r\n            else {\r\n                // 自动加载bundle\r\n                assetManager.loadBundle(args.bundle, (err, bundle) => {\r\n                    if (!err) {\r\n                        this.preLoadByBundleAndArgs(bundle, args);\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            this.preLoadByBundleAndArgs(resources, args);\r\n        }\r\n    }\r\n\r\n    private preLoadByBundleAndArgs<T extends Asset>(bundle: AssetManager.Bundle, args: ILoadResArgs<T>): void {\r\n        if (args.dir) {\r\n            bundle.preloadDir(args.paths as string, args.type, args.onProgress, args.onComplete);\r\n        }\r\n        else {\r\n            if (typeof args.paths == 'string') {\r\n                bundle.preload(args.paths, args.type, args.onProgress, args.onComplete);\r\n            }\r\n            else {\r\n                bundle.preload(args.paths, args.type, args.onProgress, args.onComplete);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const resLoader = new ResLoader();"]}