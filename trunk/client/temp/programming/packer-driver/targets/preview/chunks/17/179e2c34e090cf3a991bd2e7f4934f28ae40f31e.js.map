{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/resources/libs/utils/binding/router.ts"],"names":["Router","log","Platform","Binding","TAG","methodMap","Map","callMethod","methodName","args","Instance","registerMethod","callback","unRegisterMethod","eventName","instance","set","window","delete","method","get","data","exeResult","call","isNative","Promise","then","result","callbackName","withOptions","hasCallback","callNativeMethod","rs","catch","e","resolve","reject","code","msg"],"mappings":"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","sourcesContent":["import {log} from 'cc';\nimport Platform from \"../platform\";\nimport Binding from './binding';\n\nconst TAG = 'Router';\n\n/**\n * 路由方法，可以注册方法供别的模块,或者是native主动发起调用\n */\nexport default class Router {\n    private static instance: Router;\n\n    public static callMethod(methodName: string, args?: any): Promise<any> {\n        return this.Instance.callMethod(methodName, args);\n    }\n\n    public static registerMethod(methodName: string, callback: Function) {\n        return this.Instance.registerMethod(methodName, callback);\n    }\n\n    public static unRegisterMethod(eventName: string) {\n        return this.Instance.unRegisterMethod(eventName);\n    }\n\n    public static get Instance() {\n        if (!this.instance) {\n            this.instance = new Router();\n        }\n        return this.instance;\n    }\n\n    methodMap = new Map();\n\n    /**\n     * 自定义事件处理者\n     */\n    public registerMethod(eventName: string, callback: Function) {\n        this.methodMap.set(eventName, callback);\n        window[`binding_router_${eventName}`] = async (args: any) => {\n            log(TAG, 'called eventName' + eventName);\n            return this.callMethod(eventName, args);\n        };\n    }\n\n    public unRegisterMethod(eventName: string) {\n        this.methodMap.delete(eventName);\n        delete window[`binding_router_${eventName}`];\n    }\n\n    public callMethod(methodName: string, args: any): Promise<any> {\n        const method = this.methodMap.get(methodName);\n        if (method) {\n            const data = args['data'];\n            const exeResult = method.call(this, data);\n            // 如果是在native环境下，则需要把结果返回到native中。\n            if (Platform.isNative() && typeof exeResult === 'object') {\n                if (exeResult instanceof Promise) {\n                    exeResult.then((result) => {\n                        log('start call native from ts');\n                        const callbackName = args['@nativeCallbackName'];\n                        Binding.withOptions({hasCallback: false}).callNativeMethod(callbackName, result)\n                            .then((rs) => {\n                                log('receive:', rs);\n                            }).catch(e => {\n                            log('exception:', e);\n                        });\n                    });\n                } else {\n                    log('start call native from ts');\n                    const callbackName = args['@nativeCallbackName'];\n                    Binding.withOptions({hasCallback: false}).callNativeMethod(callbackName, exeResult)\n                        .then((rs) => {\n                            log('receive:', rs);\n                        }).catch(e => {\n                        log('exception:', e);\n                    });\n                }\n            }\n            return Promise.resolve(exeResult);\n        } else {\n            return Promise.reject({code: -1, msg: `${methodName} not register`});\n        }\n    }\n}\n"]}