{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/extensions/oops-plugin-framework/assets/libs/animator-move/MoveTo.ts"],"names":["Component","Node","Vec3","_decorator","Timer","Vec3Util","ccclass","property","MoveTo","target","velocity","zero","speed","hasYAxis","ns","NodeSpace","LOCAL","offset","offsetVector","onStart","onComplete","onChange","timer","end","onLoad","enabled","move","update","dt","console","assert","WORLD","worldPosition","position","exit","strictEquals","clone","add","y","start","node","sub","normalize","distance","call","step","trans","mul"],"mappings":";;;;;;;;;;;;;;;;;;;;AAOSA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,U,OAAAA,U;;AACvBC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,Q,iBAAAA,Q;;;;;;AART;AACA;AACA;AACA;AACA;AACA;;;;;OAKM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;AAE9B;;wBAEaK,M,WADZF,OAAO,CAAC,QAAD,C,gBAAR,MACaE,MADb,SAC4BR,SAD5B,CACsC;AAAA;AAAA;;AAClC;AADkC,eAElCS,MAFkC,GAEL,IAFK;;AAGlC;AAHkC,eAIlCC,QAJkC,GAIjB;AAAA;AAAA,oCAASC,IAJQ;;AAKlC;AALkC,eAMlCC,KANkC,GAMlB,CANkB;;AAOlC;AAPkC,eAQlCC,QARkC,GAQd,IARc;;AAUlC;AAVkC,eAWlCC,EAXkC,GAWrBb,IAAI,CAACc,SAAL,CAAeC,KAXM;;AAYlC;AAZkC,eAalCC,MAbkC,GAajB,CAbiB;;AAclC;AAdkC,eAelCC,YAfkC,GAeN,IAfM;;AAgBlC;AAhBkC,eAiBlCC,OAjBkC,GAiBP,IAjBO;;AAkBlC;AAlBkC,eAmBlCC,UAnBkC,GAmBJ,IAnBI;;AAoBlC;AApBkC,eAqBlCC,QArBkC,GAqBN,IArBM;;AAuBlC;AAvBkC,eAwB1BC,KAxB0B,GAwBX;AAAA;AAAA,+BAxBW;;AAyBlC;AAzBkC,eA0B1BC,GA1B0B,GA0BP,IA1BO;AAAA;;AA4BxBC,QAAAA,MAAM,GAAS;AACrB,eAAKC,OAAL,GAAe,KAAf;AACH;;AAEDC,QAAAA,IAAI,GAAG;AACH,eAAKD,OAAL,GAAe,IAAf;AACH;;AAEDE,QAAAA,MAAM,CAACC,EAAD,EAAa;AACf,cAAIL,GAAJ;AAEAM,UAAAA,OAAO,CAACC,MAAR,CAAe,KAAKlB,KAAL,GAAa,CAA5B,EAA+B,YAA/B;;AAEA,cAAI,KAAKH,MAAL,YAAuBR,IAA3B,EAAiC;AAC7BsB,YAAAA,GAAG,GAAG,KAAKT,EAAL,IAAWb,IAAI,CAACc,SAAL,CAAegB,KAA1B,GAAkC,KAAKtB,MAAL,CAAYuB,aAA9C,GAA8D,KAAKvB,MAAL,CAAYwB,QAAhF;AACH,WAFD,MAGK;AACDV,YAAAA,GAAG,GAAG,KAAKd,MAAX;AACH,WAVc,CAYf;;;AACA,cAAIc,GAAG,IAAI,IAAX,EAAiB;AACb,iBAAKW,IAAL;AACA;AACH,WAhBc,CAkBf;;;AACA,cAAI,KAAKX,GAAL,IAAY,IAAZ,IAAoB,CAAC,KAAKA,GAAL,CAASY,YAAT,CAAsBZ,GAAtB,CAAzB,EAAqD;AAAA;;AACjD,gBAAId,MAAM,GAAGc,GAAG,CAACa,KAAJ,EAAb;;AACA,gBAAI,KAAKlB,YAAT,EAAuB;AACnBT,cAAAA,MAAM,GAAGA,MAAM,CAAC4B,GAAP,CAAW,KAAKnB,YAAhB,CAAT;AACH;;AAED,gBAAI,KAAKL,QAAL,IAAiB,KAArB,EAA4BJ,MAAM,CAAC6B,CAAP,GAAW,CAAX,CANqB,CAQjD;;AACA,gBAAIC,KAAK,GAAG,KAAKzB,EAAL,IAAWb,IAAI,CAACc,SAAL,CAAegB,KAA1B,GAAkC,KAAKS,IAAL,CAAUR,aAA5C,GAA4D,KAAKQ,IAAL,CAAUP,QAAlF;AACA,iBAAKvB,QAAL,GAAgB;AAAA;AAAA,sCAAS+B,GAAT,CAAahC,MAAb,EAAqB8B,KAArB,EAA4BG,SAA5B,EAAhB,CAViD,CAYjD;;AACA,gBAAIC,QAAQ,GAAGzC,IAAI,CAACyC,QAAL,CAAcJ,KAAd,EAAqB9B,MAArB,IAA+B,KAAKQ,MAAnD,CAbiD,CAejD;;AACA,mCAAKI,QAAL,4BAAeuB,IAAf,CAAoB,IAApB;;AAEA,gBAAID,QAAQ,IAAI,CAAhB,EAAmB;AACf,mBAAKT,IAAL;AACA;AACH,aAHD,MAIK;AAAA;;AACD,oCAAKf,OAAL,2BAAcyB,IAAd,CAAmB,IAAnB;AACA,mBAAKtB,KAAL,CAAWuB,IAAX,GAAkBF,QAAQ,GAAG,KAAK/B,KAAlC;AACA,mBAAKW,GAAL,GAAWA,GAAG,CAACa,KAAJ,EAAX;AACH;AACJ;;AAED,cAAI,KAAKxB,KAAL,GAAa,CAAjB,EAAoB;AAChB,gBAAIkC,KAAK,GAAG;AAAA;AAAA,sCAASC,GAAT,CAAa,KAAKrC,QAAlB,EAA4B,KAAKE,KAAL,GAAagB,EAAzC,CAAZ;AACA,gBAAI,KAAKd,EAAL,IAAWb,IAAI,CAACc,SAAL,CAAegB,KAA9B,EACI,KAAKS,IAAL,CAAUR,aAAV,GAA0B;AAAA;AAAA,sCAASK,GAAT,CAAa,KAAKG,IAAL,CAAUR,aAAvB,EAAsCc,KAAtC,CAA1B,CADJ,KAGI,KAAKN,IAAL,CAAUP,QAAV,GAAqB;AAAA;AAAA,sCAASI,GAAT,CAAa,KAAKG,IAAL,CAAUP,QAAvB,EAAiCa,KAAjC,CAArB;AACP,WAtDc,CAwDf;;;AACA,cAAI,KAAKxB,KAAL,CAAWK,MAAX,CAAkBC,EAAlB,CAAJ,EAA2B;AACvB,gBAAI,KAAKX,MAAL,IAAe,CAAnB,EAAsB;AAClB,kBAAI,KAAKH,EAAL,IAAWb,IAAI,CAACc,SAAL,CAAegB,KAA9B,EACI,KAAKS,IAAL,CAAUR,aAAV,GAA0B,KAAKT,GAA/B,CADJ,KAGI,KAAKiB,IAAL,CAAUP,QAAV,GAAqB,KAAKV,GAA1B;AACP;;AACD,iBAAKW,IAAL;AACH;AACJ;;AAEOA,QAAAA,IAAI,GAAG;AAAA;;AACX,mCAAKd,UAAL,8BAAiBwB,IAAjB,CAAsB,IAAtB;AACA,eAAKnB,OAAL,GAAe,KAAf;AACH;;AA3GiC,O","sourcesContent":["\r\n/*\r\n * @Author: dgflash\r\n * @Date: 2022-03-25 18:12:10\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2023-01-19 14:59:50\r\n */\r\nimport { Component, Node, Vec3, _decorator } from \"cc\";\r\nimport { Timer } from \"../../core/common/timer/Timer\";\r\nimport { Vec3Util } from \"../../core/utils/Vec3Util\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n/** 移动到指定目标位置 */\r\n@ccclass('MoveTo')\r\nexport class MoveTo extends Component {\r\n    /** 目标位置 */\r\n    target: Vec3 | Node | null = null;\r\n    /** 移动方向 */\r\n    velocity: Vec3 = Vec3Util.zero;\r\n    /** 移动速度（每秒移动的像素距离） */\r\n    speed: number = 0;\r\n    /** 是否计算将 Y 轴带入计算 */\r\n    hasYAxis: boolean = true;\r\n\r\n    /** 坐标标（默认本地坐标） */\r\n    ns: number = Node.NodeSpace.LOCAL;\r\n    /** 偏移距离 */\r\n    offset: number = 0;\r\n    /** 偏移向量 */\r\n    offsetVector: Vec3 | null = null;\r\n    /** 移动开始 */\r\n    onStart: Function | null = null;\r\n    /** 移动完成回调 */\r\n    onComplete: Function | null = null;\r\n    /** 距离变化时 */\r\n    onChange: Function | null = null;\r\n\r\n    /** 延时触发器 */\r\n    private timer: Timer = new Timer();\r\n    /** 终点备份 */\r\n    private end: Vec3 | null = null;\r\n\r\n    protected onLoad(): void {\r\n        this.enabled = false;\r\n    }\r\n\r\n    move() {\r\n        this.enabled = true;\r\n    }\r\n\r\n    update(dt: number) {\r\n        let end: Vec3;\r\n\r\n        console.assert(this.speed > 0, \"移动速度必须要大于零\");\r\n\r\n        if (this.target instanceof Node) {\r\n            end = this.ns == Node.NodeSpace.WORLD ? this.target.worldPosition : this.target.position;\r\n        }\r\n        else {\r\n            end = this.target as Vec3;\r\n        }\r\n\r\n        // 移动目标节点被释放时\r\n        if (end == null) {\r\n            this.exit();\r\n            return;\r\n        }\r\n\r\n        // 目标移动后，重计算移动方向与移动到目标点的速度\r\n        if (this.end == null || !this.end.strictEquals(end)) {\r\n            let target = end.clone();\r\n            if (this.offsetVector) {\r\n                target = target.add(this.offsetVector);\r\n            }\r\n\r\n            if (this.hasYAxis == false) target.y = 0;\r\n\r\n            // 移动方向与移动数度\r\n            let start = this.ns == Node.NodeSpace.WORLD ? this.node.worldPosition : this.node.position;\r\n            this.velocity = Vec3Util.sub(target, start).normalize();\r\n\r\n            // 移动时间与目标偏位置计算\r\n            let distance = Vec3.distance(start, target) - this.offset;\r\n\r\n            // 目标位置修改事件\r\n            this.onChange?.call(this);\r\n\r\n            if (distance <= 0) {\r\n                this.exit();\r\n                return;\r\n            }\r\n            else {\r\n                this.onStart?.call(this);\r\n                this.timer.step = distance / this.speed;\r\n                this.end = end.clone();\r\n            }\r\n        }\r\n\r\n        if (this.speed > 0) {\r\n            let trans = Vec3Util.mul(this.velocity, this.speed * dt);\r\n            if (this.ns == Node.NodeSpace.WORLD)\r\n                this.node.worldPosition = Vec3Util.add(this.node.worldPosition, trans);\r\n            else\r\n                this.node.position = Vec3Util.add(this.node.position, trans);\r\n        }\r\n\r\n        // 移动完成事件\r\n        if (this.timer.update(dt)) {\r\n            if (this.offset == 0) {\r\n                if (this.ns == Node.NodeSpace.WORLD)\r\n                    this.node.worldPosition = this.end;\r\n                else\r\n                    this.node.position = this.end;\r\n            }\r\n            this.exit();\r\n        }\r\n    }\r\n\r\n    private exit() {\r\n        this.onComplete?.call(this);\r\n        this.enabled = false;\r\n    }\r\n}"]}