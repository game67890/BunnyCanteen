{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/cocos-telegram-miniapps/scripts/telegram-ui.ts"],"names":["_decorator","ccclass","property","TonConnectUi","constructor","tonWallet","_tgConnect","Instance","_instance","isConnected","console","error","connected","disconnect","account","parseRaw","raw","init","manifestUrl","language","Promise","resolve","reject","script","document","createElement","src","async","onload","intervalId","setInterval","window","TON_CONNECT_UI","log","tonConnect","TonConnectUI","uiOptions","clearInterval","onerror","Error","head","appendChild","success","subscribeWallet","updateConnect","unsubscribeModal","onStatusChange","state","unsubscribeConnectUI","info","openModal","getWallets","createPayload","sendTransaction","args","transaction","validUntil","Math","floor","Date","now","messages","address","amount","payload","result","callBack","e","message"],"mappings":"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","sourcesContent":["import { _decorator } from 'cc';\nconst { ccclass, property } = _decorator;\n\nexport interface Transaction{ amount: string, payload?: string, callBack?: (result: any)=>void}\n@ccclass('TonConnectUi')\nexport class TonConnectUi {\n    private static _instance: TonConnectUi;\n    private tonWallet: string ;\n    private constructor() {\n\n    }\n    public static get Instance(): TonConnectUi {\n        if (!TonConnectUi._instance) {\n            TonConnectUi._instance = new TonConnectUi();\n        }\n        return TonConnectUi._instance;\n    }\n    \n    public isConnected(): boolean {\n        if (!this._tgConnect) {\n            console.error(\"ton ui not inited!\");\n            return false;\n        }\n        return this._tgConnect.connected;\n    }\n  public disconnect() {\n\n    if (!this._tgConnect) {\n        console.error(\"ton ui not inited!\");\n        return;\n    }\n    this._tgConnect.disconnect();\n    }\n    public account() {\n        if (!this._tgConnect) {\n            console.error(\"ton ui not inited!\");\n            return null;\n        }\n        return this._tgConnect.account;\n\n    }\n    public parseRaw(raw: string) {\n        return raw;\n    }\n    private _tgConnect: any = null;\n    public async init(manifestUrl: string, tonWallet: string, language?: string) : Promise<{success: boolean}> {\n        this.tonWallet = tonWallet;\n        this._tgConnect =  await new Promise<any>((resolve, reject) => {\n            // if (sys.platform === sys.Platform.MOBILE_BROWSER || sys.platform === sys.Platform.DESKTOP_BROWSER) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://unpkg.com/@tonconnect/ui@2.0.9/dist/tonconnect-ui.min.js\";\n                script.async = true;\n                script.onload = () => {\n                    const intervalId = setInterval(() => {\n                        if ((window as any).TON_CONNECT_UI) {\n                            console.log(\"loading telegram web app sdk success!\");\n                          const tonConnect =  new window['TON_CONNECT_UI'].TonConnectUI(\n                                {\n                                    manifestUrl: manifestUrl\n                                }\n                            )\n                            tonConnect.uiOptions = {\n                                language: language||'en',\n                            };\n                            resolve(tonConnect);\n                            clearInterval(intervalId);\n                        }\n                    }, 100);\n                };\n                script.onerror = () => reject(new Error(\"Unable to load TelegramWebApp SDK, please check logs.\"));\n                document.head.appendChild(script);\n            // }\n        });\n\n        if (this._tgConnect ) {\n      \n            return Promise.resolve({success: true});\n        } else {\n            return Promise.resolve({success: false});\n        }\n\n      \n\n    }\n    public  subscribeWallet(updateConnect:()=>void) {\n        console.log(\"subscribe wallet\");\n        updateConnect();\n        if(this._tgConnect) {\n        const unsubscribeModal = this._tgConnect.onStatusChange(state => {\n            console.log(\"model state changed! : \", state);\n\n            updateConnect();\n        });\n        const unsubscribeConnectUI = this._tgConnect.onStatusChange(info => {\n            console.log(\"wallet info status changed : \", info);\n    \n            updateConnect();\n        });\n    }\n\n\n\n    }\n\n    public async openModal() {\n        if (!this._tgConnect) return;\n        console.log(\"open modal\", await this._tgConnect.getWallets());\n\n        if (this._tgConnect.connected) {\n            this._tgConnect.disconnect();\n        } else {\n            this._tgConnect.openModal();\n        }\n    }\n\n    private createPayload() {\n\n        return '';\n    }\n\n    public async sendTransaction(args:Transaction ) {\n        if(!this._tgConnect||this._tgConnect.connected==false){\n            console.error('ton connect not connected');\n            throw new Error('ton connect not connected');\n        }\n    const transaction = {\n        validUntil: Math.floor(Date.now() / 1000) + 120, // 120 sec\n        messages: [\n            {\n                address: this.tonWallet ,\n                amount: args.amount,\n                payload: args.payload // just for instance. Replace with your transaction payload or remove\n\n            }\n        ]\n    }\n    \n    try {\n        const result = await this._tgConnect.sendTransaction(transaction);\n        if(args.callBack) {\n            args.callBack({\n                success: true,\n                result: result\n            });\n        }\n        // you can use signed boc to find the transaction\n    } catch (e) {\n        console.error(e);\n        if(args.callBack) {\n            args.callBack({\n                success: false,\n                result: e.message\n            });\n        }\n    }\n}\n\n    \n}\n\n\n"]}