{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/ton/TonComponent.ts"],"names":["TonParams","_decorator","Component","Label","GameFi","TonConnectUI","createWeb3Modal","defaultConfig","TonMgr","ccclass","property","tonAddress","TonComponent","type","_bTonInit","_cocosGameFi","_connectUI","_evmConnect","_evmWalletClient","serverHost","_config","onLoad","loadWallet","addressConfig","jettonAddress","e","console","error","onBuyWithTon","_initTonConnect","myWalletsList","name","image","deepLink","universalLink","uiconnector","manifestUrl","getWallets","then","wallets","log","catch","err","create","merchant","connector","walletConnector","unsubscribeModal","onModalStateChange","state","updateConnect","unsubscribeConnectUI","onStatusChange","info","isConnected","connectLabel","string","connected","openModal","_initEvmConnect","projectId","mainnet","chainId","currency","explorerUrl","rpcUrl","bnbchain","metadata","description","url","icons","ethersConfig","enableEIP6963","enableInjected","defaultChainId","chains","enableAnalytics","subscribeEvents","event","evmConnectEventHandle","data","onShowTools","onBackBtn"],"mappings":"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","sourcesContent":["import { _decorator, Component, EventTouch, Input, Node, Prefab, find, UITransform, EventKeyboard, KeyCode, input, CCInteger, PhysicsSystem2D, Label, Collider2D, IPhysics2DContact, Contact2DType, director } from 'cc';\r\n\r\n\r\n//import {TonConnectUi , type Transaction} from '../cocos-telegram-miniapps/scripts/telegram-ui';\r\n//import  EventManager , {EventType} from \"../framework/manager/EventManager\"\r\n\r\n//import { GameFi, TonConnectUI, Address, toNano } from '@ton/cocos-sdk';\r\nimport { GameFi, Address, toNano } from '@ton/cocos-sdk';\r\nimport { TonConnectUI } from '@tonconnect/ui'\r\nimport { createWeb3Modal, defaultConfig, AppKit } from '@cocos-labs/web3modal-ethers5';\r\nimport { createWalletClient, custom, WalletClient } from 'viem'\r\nimport { mainnet } from 'viem/chains'\r\n\r\n//import { ToolsView } from './ToolsView';\r\n//import { WalletView } from './WalletView';\r\n\r\nimport { oops } from \"../../../../extensions/oops-plugin-framework/assets/core/Oops\";\r\nimport { UIID } from \"../../framework/common/config/GameUIConfig\";\r\n\r\nimport { TonMgr } from \"./TonManager\";\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport interface TonAddressConfig {\r\n    tonAddress: string,\r\n    jettonAddress?: string;\r\n}\r\n\r\nexport class TonParams {\r\n    GameFi : GameFi;\r\n    tonAddress : string;\r\n}\r\n\r\n@ccclass('TonComponent')\r\nexport class TonComponent extends Component {\r\n    @property({type: Label}) \r\n    public logLabel: Label|null = null; \r\n    @property({type: Label}) \r\n    public UserIdLabel: Label|null = null; \r\n    @property({type: Label}) \r\n    public firstNameLabel: Label|null = null; \r\n    @property({type: Label}) \r\n    public lastNameLabel: Label|null = null; \r\n    @property({type: Label}) \r\n    public userNameLabel: Label|null = null; \r\n\r\n    @property(Label)\r\n    connectLabel: Label;\r\n    @property(Label)\r\n    evmConnectLabel: Label;\r\n\r\n    private _bTonInit: boolean = false;\r\n    private _cocosGameFi: GameFi;\r\n    private _connectUI;\r\n    private _evmConnect: AppKit;\r\n    private _evmWalletClient: WalletClient;\r\n    private serverHost: string = \"https://bunnycanteen.game67890.com\";\r\n    \r\n    //ton 和jetton地址， ton是买东西付款到的地址\r\n    private _config: TonAddressConfig;\r\n\r\n\tprotected onLoad() {\r\n        /*\r\n        if (this._bTonInit) return;\r\n        LogManager.log(`TonGameApp onLoad`);\r\n\r\n        //初始化Telegram\r\n        TelegramWebApp.Instance.init().then(res => {\r\n            console.log(\"telegram web app init : \", res.success);\r\n\r\n            let TelegramInitData : string = TelegramWebApp.Instance.getTelegramInitData();\r\n            console.log(\"TelegramInitData : \", TelegramInitData);\r\n\r\n            let TelegramInitDataUnsafe = TelegramWebApp.Instance.getTelegramWebAppInitData();\r\n            if (TelegramInitDataUnsafe && TelegramInitDataUnsafe.user)\r\n            {\r\n                console.log(\"User data from initDataUnsafe:\", TelegramInitDataUnsafe.user);\r\n                this.UserIdLabel.string = TelegramInitDataUnsafe.user.id.toString();\r\n                this.firstNameLabel.string = TelegramInitDataUnsafe.user.first_name;\r\n                this.lastNameLabel.string = TelegramInitDataUnsafe.user.last_name;\r\n                //this.userNameLabel.string = TelegramInitDataUnsafe.user.username;\r\n            }\r\n        });\r\n        \r\n\r\n        this.loadWallet().then(res => {\r\n            if (!res) {\r\n                console.error('load wallet failed!')\r\n                return;\r\n            }\r\n            //this._initTonUI();\r\n        }).catch(err => { console.error(err); });\r\n        */\r\n        \r\n/*\r\n        fetch(`${this.serverHost}/config`, { method: 'GET' }).then(response => {\r\n            return response.json();\r\n        }).then(value => {\r\n            console.log(\"config : \", value);\r\n            if (value.ok) {\r\n\r\n                const addressConfig = {\r\n                    tonAddress: value.tokenRecipient,\r\n                    jettonAddress: value.jettonMaster\r\n                } as TonAddressConfig;\r\n                this.toolView.setTonAddressConfig(addressConfig);\r\n\r\n            } else {\r\n                console.error('request config failed!');\r\n            }\r\n        });\r\n        */\r\n\r\n        //this._initEvmConnect();\r\n        /*\r\n        this._initTonConnect();\r\n\r\n        this._bTonInit = true;\r\n        */\r\n    }\r\n\r\n    //open the wallet\r\n    async loadWallet():Promise<boolean>{\r\n            try{\r\n        //   const value =await   fetch(`${config.backendUrl}/config`, {\r\n        //         headers: {\r\n        //             'Content-Type': 'application/json',\r\n        //             'Accept': 'application/json',\r\n        //             \"ngrok-skip-browser-warning\":\"1\"\r\n        //         },\r\n        //         method: 'GET'}).then(response => {\r\n        //         return response.json();\r\n        //     })\r\n            const addressConfig = {\r\n                tonAddress: 'UQAXvZY8VLKtPv_z9lO-kc1rfTvqR-LB6aJAe8fnN4eq46Ij',\r\n                jettonAddress: 'EQD_GZls9HhMJGp26xDmSHBNTk7BXBQ5dUAe7Us20hr_-zuo'\r\n            } as TonAddressConfig;\r\n            this._config = addressConfig;\r\n            return true;\r\n        }catch(e){\r\n    \r\n            console.error('request config failed!',e);\r\n            return false;\r\n        }\r\n           \r\n    }\r\n/*\r\n    async _initTonUI() {\r\n        TonConnectUi.Instance.init('https://ton-connect.github.io/demo-dapp-with-wallet/tonconnect-manifest.json',this._config.tonAddress, 'en').then(res => {\r\n            console.log(\"ton connect ui init : \", res.success);\r\n            TonConnectUi.Instance.subscribeWallet(()=>{\r\n                console.log(\"wallet change\");\r\n                EventManager.instance.emit(EventType.CONNECT_COMPLETE, res.success);\r\n            })\r\n        })\r\n    }\r\n        */\r\n/*\r\n    public isConnected(): boolean {\r\n        if (!TonConnectUi.Instance) {\r\n            console.error(\"ton ui not inited!\");\r\n            return false;\r\n        }\r\n        return TonConnectUi.Instance.isConnected();\r\n    }\r\n\r\n    //打开连接钱包的二维码\r\n    public async openModal() {\r\n        if (!TonConnectUi.Instance) return;\r\n        console.log(\"open modal\", this.isConnected());\r\n\r\n        if (TonConnectUi.Instance.isConnected()) {\r\n            TonConnectUi.Instance.disconnect();\r\n        } else {\r\n            TonConnectUi.Instance.openModal();\r\n        }\r\n    }\r\n*/\r\n    public onBuyWithTon() {\r\n        /*\r\n        const tonTransferReq: Transaction= {\r\n            amount: \"0.01\",\r\n        };\r\n         TonConnectUi.Instance.sendTransaction(tonTransferReq);\r\n         */\r\n    }\r\n\r\n    async _initTonConnect() {\r\n        const myWalletsList = [\r\n            {\r\n              name: \"Tonkeeper\",\r\n              image: \"path_to_image/tonkeeper.png\",\r\n              deepLink: \"tonkeeper://connect\",\r\n              universalLink: \"https://tonkeeper.com/connect\",\r\n            },\r\n            {\r\n              name: \"Tonhub\",\r\n              image: \"path_to_image/tonhub.png\",\r\n              deepLink: \"tonhub://connect\",\r\n              universalLink: \"https://tonhub.com/connect\",\r\n            }\r\n          ];\r\n\r\n        let uiconnector = new TonConnectUI({\r\n            manifestUrl: 'https://bunnycanteen.game67890.com/FangliangDevTest/tonconnect-manifest.json',\r\n        });\r\n/*\r\n        let uiconnector = new TonConnectUI({\r\n            manifestUrl: 'https://bunnycanteen.game67890.com/FangliangDevTest/tonconnect-manifest.json',\r\n            walletsList: myWalletsList, // 传入钱包列表\r\n        });\r\n        */\r\n        \r\n\r\n        uiconnector.getWallets()\r\n  .then(wallets => {\r\n    console.log(wallets);\r\n    // 将自动获取的钱包列表传入 UI\r\n    //uiconnector.updateWallets(wallets);\r\n  })\r\n  .catch(err => {\r\n    console.error('Error fetching wallets:', err);\r\n  });\r\n\r\n        \r\n        //let newAddress = Address.parse(\"UQAXvZY8VLKtPv_z9lO-kc1rfTvqR-LB6aJAe8fnN4eq46Ij\").toString({ testOnly: false, bounceable: false });\r\n        \r\n        this._cocosGameFi = await GameFi.create({\r\n            merchant: {\r\n                // in-game jetton purchases come to this address\r\n                //jettonAddress: \"\",\r\n                // in-game TON purchases come to this address\r\n                tonAddress: \"UQAXvZY8VLKtPv_z9lO-kc1rfTvqR-LB6aJAe8fnN4eq46Ij\",\r\n            },  \r\n            connector: uiconnector\r\n        });\r\n        this._connectUI = this._cocosGameFi.walletConnector;\r\n\r\n        const unsubscribeModal = this._connectUI.onModalStateChange(state => {\r\n            console.log(\"model state changed! : \", state);\r\n\r\n            this.updateConnect();\r\n        });\r\n\r\n        const unsubscribeConnectUI = this._connectUI.onStatusChange(info => {\r\n            console.log(\"wallet info status changed : \", info);\r\n\r\n            this.updateConnect();\r\n        });\r\n\r\n\r\n        this.updateConnect();\r\n        \r\n    }\r\n\r\n    private updateConnect() {\r\n        if (this.isConnected()) {\r\n            //const address = this._connectUI.account.address;\r\n            //this.connectLabel.string = Address.parseRaw(address).toString({ testOnly: false, bounceable: false });\r\n            //this.connectLabel.string = Address.parseRaw(address).toString({ testOnly: true, bounceable: false }).substring(0, 6) + '...';\r\n        } else {\r\n            this.connectLabel.string = \"Connect\";\r\n        }\r\n    }\r\n\r\n    public isConnected(): boolean {\r\n        if (!this._connectUI) {\r\n            console.error(\"ton ui not inited!\");\r\n            return false;\r\n        }\r\n        return this._connectUI.connected;\r\n    }\r\n\r\n    //打开连接钱包的二维码\r\n    public async openModal() {\r\n        TonMgr.openModal();\r\n    }\r\n        \r\n\r\n    _initEvmConnect() {\r\n        //this.walletView.node.active = false;\r\n\r\n        // 1. Get projectId from https://cloud.walletconnect.com\r\n        const projectId = 'a3c5251fe077f63e2fe1931521283512'\r\n\r\n        // 2. Set chains\r\n        const mainnet = {\r\n            chainId: 1,\r\n            name: 'Ethereum',\r\n            currency: 'ETH',\r\n            explorerUrl: 'https://etherscan.io',\r\n            rpcUrl: 'https://rpc.ankr.com/eth'\r\n        }\r\n\r\n        const bnbchain = {\r\n            chainId: 56,\r\n            name: 'BNB Smart Chain Mainnet',\r\n            currency: 'BNB',\r\n            explorerUrl: 'https://bscscan.com/',\r\n            rpcUrl: 'https://bsc-dataseed4.ninicoin.io'\r\n        }\r\n\r\n        // 3. Create your application's metadata object\r\n        const metadata = {\r\n            name: 'My Website',\r\n            description: 'My Website description',\r\n            url: 'https://mywebsite.com', // url must match your domain & subdomain\r\n            icons: ['https://avatars.mywebsite.com/']\r\n        }\r\n\r\n        // 4. Create Ethers config\r\n        const ethersConfig = defaultConfig({\r\n            /*Required*/\r\n            metadata,\r\n\r\n            /*Optional*/\r\n            enableEIP6963: true, // true by default\r\n            enableInjected: true, // true by default\r\n            defaultChainId: 56\r\n        })\r\n\r\n        // 5. Create a AppKit instance\r\n        this._evmConnect = createWeb3Modal({\r\n            ethersConfig,\r\n            chains: [mainnet, bnbchain],\r\n            projectId,\r\n            enableAnalytics: false // Optional - defaults to your Cloud configuration\r\n        })\r\n\r\n        this._evmConnect.subscribeEvents(event => {\r\n            this.evmConnectEventHandle(event)\r\n        });\r\n\r\n    }\r\n\r\n    private async evmConnectEventHandle(event: any) {\r\n        if (event.data.event == \"MODAL_CLOSE\" || event.data.event == \"CONNECT_SUCCESS\") {\r\n            //await this.updateWalletAddress();\r\n        }\r\n    }\r\n/*\r\n    public evmConnect() {\r\n        if (typeof window.ethereum === 'undefined' &&\r\n            typeof window.okxwallet === 'undefined' &&\r\n            typeof window.bitkeep === 'undefined'\r\n        ) {\r\n            globalEvent.emit(GameEvents.WALLET_SHOW);\r\n            this.walletView.node.active = true;\r\n            return;\r\n        }\r\n\r\n        //this.updateWalletAddress()\r\n        this._evmConnect.open({ view: 'Connect' })\r\n        console.log(navigator.userAgent);\r\n    }\r\n\r\n    private async updateWalletAddress() {\r\n        let provider = window.ethereum! as any\r\n\r\n        if (typeof window.okxwallet !== 'undefined') {\r\n            provider = window.okxwallet!;\r\n        }\r\n\r\n        if (typeof window.bitkeep !== 'undefined' && window.bitkeep.ethereum !== 'undefined') {\r\n            provider = window.bitkeep!.ethereum;\r\n        }\r\n\r\n        this._evmWalletClient = createWalletClient({\r\n            chain: mainnet,\r\n            transport: custom(provider as any)\r\n        })\r\n        const addresses = await this._evmWalletClient.requestAddresses()\r\n        if (addresses.length > 0) {\r\n            this.evmConnectLabel.string = addresses[0].slice(-6);\r\n            await this._evmWalletClient.signMessage({\r\n                message: \"Hello, this is cocos game message.\",\r\n                account: addresses[0]\r\n            })\r\n\r\n        } else {\r\n            this.evmConnectLabel.string = \"Connect\";\r\n        }\r\n    }\r\n*/\r\n    public onShowTools() {\r\n        //let paramas = new TonParams();\r\n        //paramas.GameFi = this._cocosGameFi;\r\n        //paramas.tonAddress = this._config.tonAddress;\r\n    }\r\n\r\n    public onBackBtn() {\r\n    }\r\n}"]}