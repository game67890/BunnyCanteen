{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/tongame/hecheng/GuideManager.ts"],"names":["GuideManager","Vec3","tween","easing","HeChengComponent","BoardMgr","oops","UIID","JsonUtil","TonGameMgr","AutoTypeEnum","LayerType","TableIngredients","_tsIngredients","GuideNode","GuidePassTime","IsGuideShow","UpdateGuide","AutoType","HasBuyAndOpen","ResetGuide","HechengGUI","gui","get","MainUI","hasUI","PopUp","Dialog","randomIndexes","GetCanHechengIndex","length","ShowGuide","IsMaxLevel","SuCaiId","init","curSuCaiType","type","nextSuCaiLevel","level","jsonIngredients","TableName","id","Ingredients","boardIndexed","HechengCom","getComponent","createGuide","gridNode","getGridNode","targetNode","setPosition","getPosition","speed","distance","moveDuration","moveTween","to","position","quadInOut","call","repeatForever","start","getRandomTwoIndexesForDuplicateIds","boardList","idMap","Map","forEach","item","index","has","set","push","selectedIndexes","indexes","randomIndex","Math","floor","random","includes","board","active","destroy","GuideMgr"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, EventTouch, Vec3, Sprite, Vec2, UITransform, view, tween, math, easing } from 'cc';\r\n\r\nimport { HeChengComponent } from \"../hecheng/HeChengComponent\";\r\nimport { BoardMgr, BoardCell} from '../manager/BoardManager';\r\nimport { oops } from \"../../../../extensions/oops-plugin-framework/assets/core/Oops\";\r\nimport { UIID } from \"../../framework/common/config/GameUIConfig\";\r\nimport { JsonUtil } from \"../../../../extensions/oops-plugin-framework/assets/core/utils/JsonUtil\";\r\n\r\nimport { TonGameMgr,AutoTypeEnum } from \"../manager/TonGameManager\";\r\nimport { LayerType } from \"../../../../extensions/oops-plugin-framework/assets/core/gui/layer/LayerManager\";\r\nimport { TableIngredients } from \"../../framework/common/table/TableIngredients\";\r\n\r\nexport class GuideManager {\r\n    private _tsIngredients = new TableIngredients();\r\n    public GuideNode: Node = null;\r\n    private GuidePassTime : number = 0;\r\n\r\n    private IsGuideShow : boolean = false;\r\n\r\n    //每5秒执行一次\r\n    public UpdateGuide() {\r\n        if (TonGameMgr.AutoType == AutoTypeEnum.HasBuyAndOpen)\r\n        {\r\n            this.ResetGuide();\r\n            return;\r\n        }\r\n        if (this.IsGuideShow)\r\n        {\r\n            return;\r\n        }\r\n        this.GuidePassTime = this.GuidePassTime + 5;\r\n        const HechengGUI = oops.gui.get(UIID.MainUI);\r\n        if (HechengGUI) \r\n        {\r\n            if (!oops.gui.hasUI(LayerType.PopUp) && !oops.gui.hasUI(LayerType.Dialog))\r\n            {\r\n                if (this.GuidePassTime >= 10)\r\n                {\r\n                    this.GuidePassTime = 0;\r\n                    let randomIndexes = this.GetCanHechengIndex();\r\n                    if (randomIndexes.length > 0)\r\n                    {\r\n                        this.ShowGuide(randomIndexes);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public IsMaxLevel(SuCaiId:number) : boolean {\r\n        this._tsIngredients.init(SuCaiId);\r\n        let curSuCaiType = this._tsIngredients.type;\r\n        let nextSuCaiLevel = this._tsIngredients.level+1;\r\n\r\n        let jsonIngredients = JsonUtil.get(TableIngredients.TableName);\r\n        if (jsonIngredients) \r\n        {\r\n            for (let id in jsonIngredients) {\r\n                let Ingredients = jsonIngredients[id];\r\n                if (Ingredients.type == curSuCaiType &&  Ingredients.level == nextSuCaiLevel) \r\n                {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private ShowGuide(boardIndexed:number[]) {\r\n        const HechengGUI = oops.gui.get(UIID.MainUI);\r\n        if (HechengGUI) \r\n        {\r\n            const HechengCom = HechengGUI.getComponent(HeChengComponent);\r\n            if (HechengCom) \r\n            {\r\n                if (this.GuideNode == null)\r\n                {\r\n                    this.GuideNode = HechengCom.createGuide();\r\n                }\r\n\r\n                if (this.GuideNode)\r\n                {\r\n                    let gridNode = HechengCom.getGridNode(boardIndexed[0]);\r\n                    let targetNode = HechengCom.getGridNode(boardIndexed[1]);\r\n                    if (gridNode && targetNode)\r\n                    {\r\n                        this.IsGuideShow = true;\r\n                        this.GuideNode.setPosition(gridNode.getPosition());\r\n\r\n                        let speed = 100;\r\n                        let distance = Vec3.distance(gridNode.getPosition(), targetNode.getPosition());\r\n            \r\n                        const moveDuration = distance/speed;\r\n\r\n                        const moveTween = tween(this.GuideNode)\r\n                        .to(moveDuration, { position: targetNode.getPosition() }, { easing: easing.quadInOut }) // 移动到 B 点\r\n                        .call(() => {\r\n                            // 到达 B 点后，立即将位置重置到 A 点\r\n                            this.GuideNode!.position = gridNode.getPosition();\r\n                        });\r\n\r\n                        // 无限循环该移动操作\r\n                        tween(this.GuideNode)\r\n                            .repeatForever(moveTween)\r\n                            .start();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getRandomTwoIndexesForDuplicateIds(boardList: BoardCell[]): number[][] {\r\n        const idMap = new Map<number, number[]>();\r\n    \r\n        // 过滤掉 id 为 0 的元素并按 id 分组，存储每个元素的下标\r\n        boardList.forEach((item, index) => {\r\n            if (item.SuCaiId !== 0 && !this.IsMaxLevel(item.SuCaiId)) {\r\n                if (!idMap.has(item.SuCaiId)) {\r\n                    idMap.set(item.SuCaiId, []);\r\n                }\r\n                idMap.get(item.SuCaiId)!.push(index);\r\n            }\r\n        });\r\n    \r\n        const selectedIndexes: number[][] = [];\r\n    \r\n        // 从每个分组中随机选择两个下标\r\n        idMap.forEach((indexes) => {\r\n            if (indexes.length > 1) {\r\n                const randomIndexes = [];\r\n    \r\n                // 确保随机选出两个不同的下标\r\n                while (randomIndexes.length < 2) {\r\n                    const randomIndex = indexes[Math.floor(Math.random() * indexes.length)];\r\n                    if (!randomIndexes.includes(randomIndex)) {\r\n                        randomIndexes.push(randomIndex);\r\n                    }\r\n                }\r\n    \r\n                selectedIndexes.push(randomIndexes);\r\n            }\r\n        });\r\n    \r\n        return selectedIndexes;\r\n    }\r\n    \r\n\r\n    private GetCanHechengIndex():number[] {\r\n        let selectedIndexes: number[][] = [];\r\n        selectedIndexes = this.getRandomTwoIndexesForDuplicateIds(BoardMgr.board);\r\n        if (selectedIndexes.length > 0)\r\n        {\r\n            const randomIndex = Math.floor(Math.random() * selectedIndexes.length);\r\n            return selectedIndexes[randomIndex];\r\n        }\r\n        else\r\n        {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    public ResetGuide()\r\n    {\r\n        if (this.GuideNode)\r\n        {\r\n            this.GuideNode.active = false;\r\n            this.GuideNode.destroy();\r\n            this.GuideNode = null;\r\n        }\r\n\r\n        this.IsGuideShow = false;\r\n        this.GuidePassTime = 0;\r\n    }\r\n}\r\n\r\nexport var GuideMgr = new GuideManager();"]}