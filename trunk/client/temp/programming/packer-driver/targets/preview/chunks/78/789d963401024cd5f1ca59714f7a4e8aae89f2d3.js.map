{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/node_modules/@tonconnect/protocol/lib/esm/index.mjs"],"names":["SessionCrypto","encodeUint8Array","value","urlSafe","encoded","nacl","encodeBase64","encodeURIComponent","decodeToUint8Array","decodeURIComponent","decodeBase64","encode","uint8Array","Uint8Array","JSON","stringify","decodeUTF8","decode","decodedUint8Array","toString","encodeUTF8","toObject","parse","e","toUint8Array","concatUint8Arrays","buffer1","buffer2","mergedArray","length","set","splitToUint8Arrays","array","index","Error","subArray1","slice","subArray2","toHexString","byteArray","hexString","forEach","byte","hexToByteArray","result","i","parseInt","isNode","process","versions","node","nacl$1","CONNECT_EVENT_ERROR_CODES","CONNECT_ITEM_ERROR_CODES","SEND_TRANSACTION_ERROR_CODES","SIGN_DATA_ERROR_CODES","DISCONNECT_ERROR_CODES","CHAIN","Base64","constructor","keyPair","nonceLength","createKeypairFromString","createKeypair","sessionId","publicKey","box","secretKey","createNonce","randomBytes","encrypt","message","receiverPublicKey","encodedMessage","TextEncoder","nonce","encrypted","decrypt","senderPublicKey","internalMessage","decrypted","open","TextDecoder","stringifyKeypair"],"mappings":"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","sourcesContent":["import nacl from 'tweetnacl-util';\nimport nacl$1 from 'tweetnacl';\n\nvar CONNECT_EVENT_ERROR_CODES;\n(function (CONNECT_EVENT_ERROR_CODES) {\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"MANIFEST_NOT_FOUND_ERROR\"] = 2] = \"MANIFEST_NOT_FOUND_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"MANIFEST_CONTENT_ERROR\"] = 3] = \"MANIFEST_CONTENT_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"USER_REJECTS_ERROR\"] = 300] = \"USER_REJECTS_ERROR\";\n    CONNECT_EVENT_ERROR_CODES[CONNECT_EVENT_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(CONNECT_EVENT_ERROR_CODES || (CONNECT_EVENT_ERROR_CODES = {}));\nvar CONNECT_ITEM_ERROR_CODES;\n(function (CONNECT_ITEM_ERROR_CODES) {\n    CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    CONNECT_ITEM_ERROR_CODES[CONNECT_ITEM_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(CONNECT_ITEM_ERROR_CODES || (CONNECT_ITEM_ERROR_CODES = {}));\n\nvar SEND_TRANSACTION_ERROR_CODES;\n(function (SEND_TRANSACTION_ERROR_CODES) {\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"USER_REJECTS_ERROR\"] = 300] = \"USER_REJECTS_ERROR\";\n    SEND_TRANSACTION_ERROR_CODES[SEND_TRANSACTION_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(SEND_TRANSACTION_ERROR_CODES || (SEND_TRANSACTION_ERROR_CODES = {}));\n\nvar SIGN_DATA_ERROR_CODES;\n(function (SIGN_DATA_ERROR_CODES) {\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"USER_REJECTS_ERROR\"] = 300] = \"USER_REJECTS_ERROR\";\n    SIGN_DATA_ERROR_CODES[SIGN_DATA_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(SIGN_DATA_ERROR_CODES || (SIGN_DATA_ERROR_CODES = {}));\n\nvar DISCONNECT_ERROR_CODES;\n(function (DISCONNECT_ERROR_CODES) {\n    DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"UNKNOWN_ERROR\"] = 0] = \"UNKNOWN_ERROR\";\n    DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"BAD_REQUEST_ERROR\"] = 1] = \"BAD_REQUEST_ERROR\";\n    DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"UNKNOWN_APP_ERROR\"] = 100] = \"UNKNOWN_APP_ERROR\";\n    DISCONNECT_ERROR_CODES[DISCONNECT_ERROR_CODES[\"METHOD_NOT_SUPPORTED\"] = 400] = \"METHOD_NOT_SUPPORTED\";\n})(DISCONNECT_ERROR_CODES || (DISCONNECT_ERROR_CODES = {}));\n\nvar CHAIN;\n(function (CHAIN) {\n    CHAIN[\"MAINNET\"] = \"-239\";\n    CHAIN[\"TESTNET\"] = \"-3\";\n})(CHAIN || (CHAIN = {}));\n\nfunction encodeUint8Array(value, urlSafe) {\n    const encoded = nacl.encodeBase64(value);\n    if (!urlSafe) {\n        return encoded;\n    }\n    return encodeURIComponent(encoded);\n}\nfunction decodeToUint8Array(value, urlSafe) {\n    if (urlSafe) {\n        value = decodeURIComponent(value);\n    }\n    return nacl.decodeBase64(value);\n}\nfunction encode(value, urlSafe = false) {\n    let uint8Array;\n    if (value instanceof Uint8Array) {\n        uint8Array = value;\n    }\n    else {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        uint8Array = nacl.decodeUTF8(value);\n    }\n    return encodeUint8Array(uint8Array, urlSafe);\n}\nfunction decode(value, urlSafe = false) {\n    const decodedUint8Array = decodeToUint8Array(value, urlSafe);\n    return {\n        toString() {\n            return nacl.encodeUTF8(decodedUint8Array);\n        },\n        toObject() {\n            try {\n                return JSON.parse(nacl.encodeUTF8(decodedUint8Array));\n            }\n            catch (e) {\n                return null;\n            }\n        },\n        toUint8Array() {\n            return decodedUint8Array;\n        }\n    };\n}\nconst Base64 = {\n    encode,\n    decode\n};\n\nfunction concatUint8Arrays(buffer1, buffer2) {\n    const mergedArray = new Uint8Array(buffer1.length + buffer2.length);\n    mergedArray.set(buffer1);\n    mergedArray.set(buffer2, buffer1.length);\n    return mergedArray;\n}\nfunction splitToUint8Arrays(array, index) {\n    if (index >= array.length) {\n        throw new Error('Index is out of buffer');\n    }\n    const subArray1 = array.slice(0, index);\n    const subArray2 = array.slice(index);\n    return [subArray1, subArray2];\n}\nfunction toHexString(byteArray) {\n    let hexString = '';\n    byteArray.forEach(byte => {\n        hexString += ('0' + (byte & 0xff).toString(16)).slice(-2);\n    });\n    return hexString;\n}\nfunction hexToByteArray(hexString) {\n    if (hexString.length % 2 !== 0) {\n        throw new Error(`Cannot convert ${hexString} to bytesArray`);\n    }\n    const result = new Uint8Array(hexString.length / 2);\n    for (let i = 0; i < hexString.length; i += 2) {\n        result[i / 2] = parseInt(hexString.slice(i, i + 2), 16);\n    }\n    return result;\n}\n\nfunction isNode() {\n    return (typeof process !== 'undefined' && process.versions != null && process.versions.node != null);\n}\n\nclass SessionCrypto {\n    constructor(keyPair) {\n        this.nonceLength = 24;\n        this.keyPair = keyPair ? this.createKeypairFromString(keyPair) : this.createKeypair();\n        this.sessionId = toHexString(this.keyPair.publicKey);\n    }\n    createKeypair() {\n        return nacl$1.box.keyPair();\n    }\n    createKeypairFromString(keyPair) {\n        return {\n            publicKey: hexToByteArray(keyPair.publicKey),\n            secretKey: hexToByteArray(keyPair.secretKey)\n        };\n    }\n    createNonce() {\n        return nacl$1.randomBytes(this.nonceLength);\n    }\n    encrypt(message, receiverPublicKey) {\n        const encodedMessage = new TextEncoder().encode(message);\n        const nonce = this.createNonce();\n        const encrypted = nacl$1.box(encodedMessage, nonce, receiverPublicKey, this.keyPair.secretKey);\n        return concatUint8Arrays(nonce, encrypted);\n    }\n    decrypt(message, senderPublicKey) {\n        const [nonce, internalMessage] = splitToUint8Arrays(message, this.nonceLength);\n        const decrypted = nacl$1.box.open(internalMessage, nonce, senderPublicKey, this.keyPair.secretKey);\n        if (!decrypted) {\n            throw new Error(`Decryption error: \\n message: ${message.toString()} \\n sender pubkey: ${senderPublicKey.toString()} \\n keypair pubkey: ${this.keyPair.publicKey.toString()} \\n keypair secretkey: ${this.keyPair.secretKey.toString()}`);\n        }\n        return new TextDecoder().decode(decrypted);\n    }\n    stringifyKeypair() {\n        return {\n            publicKey: toHexString(this.keyPair.publicKey),\n            secretKey: toHexString(this.keyPair.secretKey)\n        };\n    }\n}\n\nexport { Base64, CHAIN, CONNECT_EVENT_ERROR_CODES, CONNECT_ITEM_ERROR_CODES, DISCONNECT_ERROR_CODES, SEND_TRANSACTION_ERROR_CODES, SIGN_DATA_ERROR_CODES, SessionCrypto, concatUint8Arrays, hexToByteArray, isNode, splitToUint8Arrays, toHexString };\n//# sourceMappingURL=index.mjs.map\n"]}