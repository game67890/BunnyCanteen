{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/extensions/oops-plugin-framework/assets/libs/collection/List.ts"],"names":["List","constructor","only","element","count","push","value","index","indexOf","length","unshift","pop","result","shift","removeAt","Error","splice","remove","clear","has","find","findIndex","predicate","get","elements"],"mappings":"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","sourcesContent":["/** 列表 */\r\nexport class List<T> {\r\n    private element: Array<T>;\r\n\r\n    /** 是否保证元素的唯一性 */\r\n    private only: boolean = false;\r\n\r\n    /** 元素数量(内部再增删时会修改这个参数，外部只做计算和绑定使用，切记不可做赋值操作) */\r\n    count: number = 0;\r\n\r\n    constructor(only: boolean = true) {\r\n        this.only = only;\r\n        this.element = [];\r\n    }\r\n\r\n    /**\r\n     * 添加到末尾(注意如果保证唯一性，那么重复时就直接返回)\r\n     * @param value \r\n     */\r\n    push(value: T): boolean {\r\n        if (this.only) {\r\n            let index: number = this.element.indexOf(value);\r\n            if (index >= 0) {\r\n                return false;\r\n            }\r\n        }\r\n        this.element.push(value);\r\n        this.count = this.element.length;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 添加到列表头部(注意如果保证唯一性，那么重复时就直接返回)\r\n     * @param value \r\n     * @returns \r\n     */\r\n    unshift(value: T): boolean {\r\n        if (this.only) {\r\n            let index: number = this.element.indexOf(value);\r\n            if (index >= 0) {\r\n                return false;\r\n            }\r\n        }\r\n        this.element.unshift(value);\r\n        this.count = this.element.length;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 获取并删除最后一个元素\r\n     * @returns \r\n     */\r\n    pop(): T {\r\n        if (this.element.length > 0) {\r\n            const result = this.element.pop();\r\n            this.count = this.element.length;\r\n            return result!;\r\n        }\r\n        return null!;\r\n    }\r\n\r\n    /**\r\n     * 获取并删除第一个元素\r\n     * @returns \r\n     */\r\n    shift(): T {\r\n        if (this.element.length > 0) {\r\n            const result = this.element.shift();\r\n            this.count = this.element.length;\r\n            return result!;\r\n        }\r\n        return null!;\r\n    }\r\n\r\n    /**\r\n     * 删除指定索引的元素\r\n     * @param index \r\n     */\r\n    removeAt(index: number): T {\r\n        if (index >= this.element.length) {\r\n            throw new Error(\"删除索引超出范围！\");\r\n        }\r\n        const result = this.element[index];\r\n        this.element.splice(index, 1);\r\n        this.count = this.element.length;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 删除元素\r\n     * @param value \r\n     */\r\n    remove(value: T): void {\r\n        let index: number = this.element.indexOf(value);\r\n        if (index < 0) {\r\n            throw new Error(\"要删除的内容不在列表中！\" + value);\r\n        }\r\n        const result = this.element[index];\r\n        this.element.splice(index, 1);\r\n        this.count = this.element.length;\r\n    }\r\n\r\n    /** 移除所有元素 */\r\n    clear(): void {\r\n        this.count = 0;\r\n        this.element.length = 0;\r\n    }\r\n\r\n    /**\r\n     * 判断是否包含\r\n     * @param value \r\n     * @returns \r\n     */\r\n    has(value: T): boolean {\r\n        return this.find(value) >= 0;\r\n    }\r\n\r\n    /**\r\n     * 查找元素下标\r\n     * @param value \r\n     * @returns \r\n     */\r\n    find(value: T): number {\r\n        return this.element.indexOf(value);\r\n    }\r\n\r\n    /**\r\n     * 查找元素下标\r\n     * @param predicate \r\n     * @returns \r\n     */\r\n    findIndex(predicate: (value: T, index: number, obj: T[]) => unknown): number {\r\n        let index = this.element.findIndex(predicate);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * 获取指定元素\r\n     * @param index \r\n     * @returns \r\n     */\r\n    get(index: number): T {\r\n        if (index >= this.element.length) {\r\n            throw new Error(\"超出索引范围:\" + index + \"/\" + this.element.length);\r\n        }\r\n        return this.element[index];\r\n    }\r\n\r\n    /**\r\n     * 源列表数据(注意不要直接进行增删操作，而是通过List.push....等接口进行操作)\r\n     */\r\n    get elements(): Array<T> {\r\n        return this.element;\r\n    }\r\n}"]}