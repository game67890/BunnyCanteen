{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/extensions/oops-plugin-framework/assets/core/common/storage/StorageManager.ts"],"names":["StorageManager","sys","PREVIEW","EncryptUtil","_key","_iv","_id","init","key","iv","initCrypto","md5","setUser","id","set","value","keywords","getKey","console","error","encrypted","warn","remove","JSON","stringify","e","aesEncrypt","localStorage","setItem","get","defaultValue","str","getItem","aesDecrypt","getNumber","r","Number","getBoolean","toLowerCase","getJson","parse","removeItem","clear"],"mappings":"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","sourcesContent":["import { sys } from \"cc\";\r\nimport { PREVIEW } from \"cc/env\";\r\nimport { EncryptUtil } from \"../../utils/EncryptUtil\";\r\n\r\n/** 本地存储 */\r\nexport class StorageManager {\r\n    private _key: string | null = null;\r\n    private _iv: string | null = null;\r\n    private _id: string = null!;\r\n\r\n    /**\r\n     * 初始化密钥\r\n     * @param key aes加密的key \r\n     * @param iv  aes加密的iv\r\n     */\r\n    init(key: string, iv: string) {\r\n        EncryptUtil.initCrypto(key, iv);\r\n\r\n        this._key = EncryptUtil.md5(key);\r\n        this._iv = EncryptUtil.md5(iv);\r\n    }\r\n\r\n    /**\r\n     * 设置用户唯一标识\r\n     * @param id \r\n     */\r\n    setUser(id: string) {\r\n        this._id = id;\r\n    }\r\n\r\n    /**\r\n     * 存储本地数据\r\n     * @param key 存储key\r\n     * @param value 存储值\r\n     * @returns \r\n     */\r\n    set(key: string, value: any) {\r\n        let keywords = this.getKey(key);\r\n\r\n        if (null == key) {\r\n            console.error(\"存储的key不能为空\");\r\n            return;\r\n        }\r\n        if (this.encrypted) {\r\n            keywords = EncryptUtil.md5(keywords);\r\n        }\r\n        if (null == value) {\r\n            console.warn(\"存储的值为空，则直接移除该存储\");\r\n            this.remove(key);\r\n            return;\r\n        }\r\n        if (typeof value === 'function') {\r\n            console.error(\"储存的值不能为方法\");\r\n            return;\r\n        }\r\n        if (typeof value === 'object') {\r\n            try {\r\n                value = JSON.stringify(value);\r\n            }\r\n            catch (e) {\r\n                console.error(`解析失败，str = ${value}`);\r\n                return;\r\n            }\r\n        }\r\n        else if (typeof value === 'number') {\r\n            value = value + \"\";\r\n        }\r\n\r\n        if (this.encrypted && null != this._key && null != this._iv) {\r\n            value = EncryptUtil.aesEncrypt(`${value}`, this._key, this._iv);\r\n        }\r\n        sys.localStorage.setItem(keywords, value);\r\n    }\r\n\r\n    /**\r\n     * 获取指定关键字的数据\r\n     * @param key          获取的关键字\r\n     * @param defaultValue 获取的默认值\r\n     * @returns \r\n     */\r\n    get(key: string, defaultValue: any = \"\"): string {\r\n        if (null == key) {\r\n            console.error(\"存储的key不能为空\");\r\n            return null!;\r\n        }\r\n\r\n        key = this.getKey(key);\r\n\r\n        if (this.encrypted) {\r\n            key = EncryptUtil.md5(key);\r\n        }\r\n\r\n        let str: string | null = sys.localStorage.getItem(key);\r\n        if (null != str && '' !== str && this.encrypted && null != this._key && null != this._iv) {\r\n            str = EncryptUtil.aesDecrypt(str, this._key, this._iv);\r\n        }\r\n\r\n        if (null === str) {\r\n            return defaultValue;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    /** 获取指定关键字的数值 */\r\n    getNumber(key: string, defaultValue: number = 0): number {\r\n        const r = this.get(key);\r\n        if (r == \"0\") {\r\n            return Number(r);\r\n        }\r\n        return Number(r) || defaultValue;\r\n    }\r\n\r\n    /** 获取指定关键字的布尔值 */\r\n    getBoolean(key: string): boolean {\r\n        const r = this.get(key);\r\n        return r.toLowerCase() === 'true';\r\n    }\r\n\r\n    /** 获取指定关键字的JSON对象 */\r\n    getJson(key: string, defaultValue?: any): any {\r\n        const r = this.get(key);\r\n        return (r && JSON.parse(r)) || defaultValue;\r\n    }\r\n\r\n    /**\r\n     * 删除指定关键字的数据\r\n     * @param key 需要移除的关键字\r\n     * @returns \r\n     */\r\n    remove(key: string) {\r\n        if (null == key) {\r\n            console.error(\"存储的key不能为空\");\r\n            return;\r\n        }\r\n\r\n        let keywords = this.getKey(key);\r\n\r\n        if (this.encrypted) {\r\n            keywords = EncryptUtil.md5(keywords);\r\n        }\r\n        sys.localStorage.removeItem(keywords);\r\n    }\r\n\r\n    /** 清空整个本地存储 */\r\n    clear() {\r\n        sys.localStorage.clear();\r\n    }\r\n\r\n    /** 获取数据分组关键字 */\r\n    private getKey(key: string): string {\r\n        if (this._id == null || this._id == \"\") {\r\n            return key;\r\n        }\r\n        return `${this._id}_${key}`;\r\n    }\r\n\r\n    /** 数据加密开关 */\r\n    private get encrypted(): boolean {\r\n        return !PREVIEW\r\n    }\r\n}"]}