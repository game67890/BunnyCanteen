{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/resources/libs/utils/utils.ts"],"names":["GameUtils","MapUtils","resources","log","Singleton","clickTime","isQuickClick","tag","duration","undefined","gapTime","Date","getTime","TAG","asyncWrap","promise","data","err","loadAsync","url","type","Promise","resolve","reject","load","res","key4property","src","key","keys","split","i","j","length","dayDiff","start","end","Math","floor","isToday","date","now","getFullYear","getMonth","getDate","replacer","_","value","Map","dataType","Array","from","entries","reviver"],"mappings":"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","sourcesContent":["import {sys, view, resources, Asset, log} from \"cc\";\r\nimport {Singleton} from \"./singleton\";\r\n\r\nexport default class GameUtils extends Singleton<GameUtils>() {\r\n    private static TAG = 'GameSceneManager';\r\n\r\n    private clickTime = {};\r\n\r\n    /**\r\n     * @description 是否频繁点击\r\n     * @param tag 判断重点的一个id，用于区分不同时机\r\n     * @param duration 少于该时长即认为发生了重复点击（毫秒）\r\n     **/\r\n    public isQuickClick(tag?: string, duration?: number): boolean {\r\n        if (!tag) tag = 'normal';\r\n        if (!this.clickTime) this.clickTime = {};\r\n        if (this.clickTime[tag] == undefined) this.clickTime[tag] = 0;\r\n        let gapTime = new Date().getTime() - this.clickTime[tag];\r\n        if (!duration) duration = 500;\r\n        if (gapTime < duration) {\r\n            log(GameUtils.TAG, '请勿重复点击');\r\n            return true;\r\n        }\r\n        this.clickTime[tag] = new Date().getTime();\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @description 同步调用包装\r\n     * @param promise 需要被调用的异步方法\r\n     */\r\n    public static async asyncWrap<T, U = any>(promise: Promise<T>): Promise<[T | null, U | null]> {\r\n        try {\r\n            const data: Awaited<T> = await promise;\r\n            return [data, null];\r\n        } catch (err) {\r\n            return [null, err];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description 同步加载资源\r\n     * @param {string} url 远程连接\r\n     * @param {Asset} type 资源类型\r\n     */\r\n    public static loadAsync<T extends typeof Asset>(url: string, type: T): Promise<InstanceType<T>> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            resources.load(url, type, (err: Error, res: any) => {\r\n                if (!err) {\r\n                    resolve(res);\r\n                } else {\r\n                    reject('loadAsync url:' + url + ',err:' + err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description 快速获取某个数据对象中深层 key 的值\r\n     * @param src 数据对象\r\n     * @param key 要获取值对应的 key，层级通过 # 分割\r\n     */\r\n    public static key4property(src: any, key: any) {\r\n        if (!src) return undefined;\r\n        let keys = key.split('#');\r\n        for (let i = 0, j = keys.length; i < j; i++) {\r\n            src = src[keys[i]];\r\n            if (typeof src == 'object' && src != null) continue;\r\n            if (i < j - 1) return undefined;\r\n        }\r\n        return src;\r\n    }\r\n\r\n    /**\r\n     * 不考虑年、月和时间，只计算两个时间点相差了几天\r\n     * @param start 起始时间\r\n     * @param end 终点时间\r\n     */\r\n    public static dayDiff(start: Date, end: Date) {\r\n        return Math.floor((end.getTime() - start.getTime()) / 86400000);\r\n    }\r\n\r\n    /**\r\n     * 是否是今天\r\n     * @param date\r\n     */\r\n    public static isToday(date: Date) {\r\n        const now = new Date();\r\n        return (now.getFullYear() === date.getFullYear())\r\n            && (now.getMonth() === date.getMonth())\r\n            && (now.getDate() === date.getDate());\r\n    }\r\n}\r\n\r\nexport class MapUtils {\r\n    public static replacer(_: any, value: any) {\r\n        if (value instanceof Map) {\r\n            return {\r\n                dataType: 'Map',\r\n                value: Array.from(value.entries()), // or with spread: value: [...value]\r\n            };\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public static reviver(_: any, value: any) {\r\n        if (typeof value === 'object' && value !== null) {\r\n            if (value.dataType === 'Map') {\r\n                return new Map(value.value);\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n}\r\n"]}