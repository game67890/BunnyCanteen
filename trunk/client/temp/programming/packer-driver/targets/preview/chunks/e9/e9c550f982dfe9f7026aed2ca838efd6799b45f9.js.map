{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/extensions/oops-plugin-framework/assets/libs/gui/language/LanguagePack.ts"],"names":["LanguagePack","director","error","JsonAsset","TTFFont","resLoader","Logger","JsonUtil","LanguageData","LanguageLabel","LanguageSpine","LanguageSprite","updateLanguage","lang","rootNodes","getScene","children","i","length","labels","getComponentsInChildren","j","language","sprites","spines","loadLanguageAssets","callback","loadTexture","loadSpine","loadJson","loadTable","Promise","resolve","reject","excel","loadAsync","logConfig","path","path_texture","loadDir","err","assets","path_json","jsonAsset","json","load","font","path_spine","releaseLanguageAssets","langTexture","releaseDir","langJson","get","decRef","langSpine","release"],"mappings":"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","sourcesContent":["/*\r\n * @Author: dgflash\r\n * @Date: 2021-07-03 16:13:17\r\n * @LastEditors: dgflash\r\n * @LastEditTime: 2023-08-22 16:34:28\r\n */\r\nimport { director, error, JsonAsset, TTFFont } from \"cc\";\r\nimport { resLoader } from \"../../../core/common/loader/ResLoader\";\r\nimport { Logger } from \"../../../core/common/log/Logger\";\r\nimport { JsonUtil } from \"../../../core/utils/JsonUtil\";\r\nimport { LanguageData } from \"./LanguageData\";\r\nimport { LanguageLabel } from \"./LanguageLabel\";\r\nimport { LanguageSpine } from \"./LanguageSpine\";\r\nimport { LanguageSprite } from \"./LanguageSprite\";\r\n\r\nexport class LanguagePack {\r\n    /**\r\n     * 刷新语言文字\r\n     * @param lang \r\n     */\r\n    updateLanguage(lang: string) {\r\n        let rootNodes = director.getScene()!.children;\r\n        for (let i = 0; i < rootNodes.length; ++i) {\r\n            // 更新所有的LanguageLabel节点\r\n            let labels = rootNodes[i].getComponentsInChildren(LanguageLabel);\r\n            for (let j = 0; j < labels.length; j++) {\r\n                labels[j].language();\r\n            }\r\n\r\n            // 更新所有的LanguageSprite节点\r\n            let sprites = rootNodes[i].getComponentsInChildren(LanguageSprite);\r\n            for (let j = 0; j < sprites.length; j++) {\r\n                sprites[j].language();\r\n            }\r\n\r\n            // 更新所有的LanguageSpine节点\r\n            let spines = rootNodes[i].getComponentsInChildren(LanguageSpine);\r\n            for (let j = 0; j < spines.length; j++) {\r\n                spines[j].language();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 下载对应语言包资源\r\n     * @param lang 语言标识\r\n     * @param callback 下载完成回调\r\n     */\r\n    async loadLanguageAssets(lang: string, callback: Function) {\r\n        await this.loadTexture(lang);\r\n        await this.loadSpine(lang);\r\n        await this.loadJson(lang);\r\n        await this.loadTable(lang);\r\n\r\n        callback(lang);\r\n    }\r\n\r\n    /** 多语言Excel配置表数据 */\r\n    private loadTable(lang: string) {\r\n        return new Promise(async (resolve, reject) => {\r\n            LanguageData.excel = await JsonUtil.loadAsync(\"Language\");\r\n            if (LanguageData.excel) {\r\n                Logger.logConfig(\"config/game/Language\", \"下载语言包 table 资源\");\r\n            }\r\n            resolve(null);\r\n        });\r\n    }\r\n\r\n    /** 纹理多语言资源 */\r\n    private loadTexture(lang: string) {\r\n        return new Promise((resolve, reject) => {\r\n            const path = `${LanguageData.path_texture}/${lang}`;\r\n            resLoader.loadDir(path, (err: any, assets: any) => {\r\n                if (err) {\r\n                    error(err);\r\n                    resolve(null);\r\n                    return;\r\n                }\r\n                Logger.logConfig(path, \"下载语言包 textures 资源\");\r\n                resolve(null);\r\n            });\r\n        });\r\n    }\r\n\r\n    /** Json格式多语言资源 */\r\n    private loadJson(lang: string) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const path = `${LanguageData.path_json}/${lang}`;\r\n            const jsonAsset = await resLoader.loadAsync(path, JsonAsset);\r\n            if (jsonAsset) {\r\n                LanguageData.json = jsonAsset.json;\r\n                Logger.logConfig(path, \"下载语言包 json 资源\");\r\n            }\r\n            else {\r\n                resolve(null);\r\n                return;\r\n            }\r\n\r\n            resLoader.load(path, TTFFont, (err: Error | null, font: TTFFont) => {\r\n                if (err == null) Logger.logConfig(path, \"下载语言包 ttf 资源\");\r\n                LanguageData.font = font;\r\n                resolve(null);\r\n            });\r\n        });\r\n    }\r\n\r\n    /** SPINE动画多语言资源 */\r\n    private loadSpine(lang: string) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const path = `${LanguageData.path_spine}/${lang}`;\r\n            resLoader.loadDir(path, (err: any, assets: any) => {\r\n                if (err) {\r\n                    error(err);\r\n                    resolve(null);\r\n                    return;\r\n                }\r\n                Logger.logConfig(path, \"下载语言包 spine 资源\");\r\n                resolve(null);\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 释放某个语言的语言包资源包括json\r\n     * @param lang \r\n     */\r\n    releaseLanguageAssets(lang: string) {\r\n        let langTexture = `${LanguageData.path_texture}/${lang}`;\r\n        resLoader.releaseDir(langTexture);\r\n\r\n        let langJson = `${LanguageData.path_json}/${lang}`;\r\n        let json = resLoader.get(langJson, JsonAsset);\r\n        if (json) {\r\n            json.decRef();\r\n        }\r\n\r\n        let font = resLoader.get(langJson, TTFFont);\r\n        if (font) {\r\n            font.decRef();\r\n        }\r\n\r\n        let langSpine = `${LanguageData.path_spine}/${lang}`;\r\n        resLoader.release(langSpine);\r\n    }\r\n}"]}