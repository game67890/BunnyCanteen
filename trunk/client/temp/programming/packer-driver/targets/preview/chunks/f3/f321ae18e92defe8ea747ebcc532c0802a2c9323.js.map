{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/scripts/framework/common/bundle/BundleManager.ts"],"names":["BundleManager","AudioClip","Font","ImageAsset","JsonAsset","Material","Prefab","Sprite","SpriteFrame","Texture2D","oops","BundleConfig","getAssetUrl","assetType","typeUrl","console","error","loadAsset","bundleName","assetName","str","url","instance","BundleName","Promise","resolve","reject","res","load","err","loadPrefab","loadAudio","loadTextre","release"],"mappings":"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","sourcesContent":["import { Asset, AudioClip, Font, ImageAsset, JsonAsset, Material, Prefab, Sprite, SpriteFrame, Texture2D } from \"cc\";\r\nimport { oops } from \"../../../../../extensions/oops-plugin-framework/assets/core/Oops\";\r\nimport BundleConfig from \"./BundleConfig\";\r\n\r\nexport type NoInfer<A extends any> = [A][A extends any ? 0 : never];\r\nexport type BundleName = keyof BundleConfig[\"BundleName\"];\r\n\r\n/** 资源模块化工具 */\r\nexport class BundleManager {\r\n    /**\r\n     * 根据资源类型获得对应文件\r\n     * @param assetType 资源类型\r\n     */\r\n    private static getAssetUrl<T extends typeof Asset>(assetType: T) {\r\n        let typeUrl = \"\";\r\n        switch (assetType as any) {\r\n            case Prefab:\r\n                typeUrl = \"prefab\";\r\n                break;\r\n            case Material:\r\n                typeUrl = \"shader\";\r\n                break;\r\n            case AudioClip:\r\n                typeUrl = \"sound\";\r\n                break;\r\n            case ImageAsset:\r\n            case Texture2D:\r\n            case Sprite:\r\n            case SpriteFrame:\r\n                typeUrl = \"texture\";\r\n                break;\r\n            case JsonAsset:\r\n                typeUrl = \"data\";\r\n                break;\r\n            case Font:\r\n                typeUrl = \"font\";\r\n                break;\r\n            default:\r\n                console.error(\"没有该资源类型\", assetType);\r\n                break;\r\n        }\r\n        return typeUrl;\r\n    }\r\n\r\n    /**\r\n     * 加载指定类型资源\r\n     * @param bundleName 外部资源包名\r\n     * @param assetName  目标加载资源名\r\n     */\r\n    public static loadAsset<T extends typeof Asset,\r\n        TBundleName extends BundleName,\r\n        TAssetName = keyof BundleConfig['BundleName'][TBundleName]['prefab'] | keyof BundleConfig['BundleName'][TBundleName]['sound'] | keyof BundleConfig['BundleName'][TBundleName]['texture']>\r\n        (bundleName: TBundleName, assetName: NoInfer<TAssetName>, assetType: T): Promise<InstanceType<T>> {\r\n        let str = this.getAssetUrl(assetType);\r\n        // @ts-ignore\r\n        let url: string = BundleConfig.instance.BundleName[bundleName][str][assetName];\r\n        // 兼容3.x ,加载 SpriteFrame 路径需要添加后缀\r\n        if (assetType as any === SpriteFrame) {\r\n            url += \"/spriteFrame\";\r\n        }\r\n        else if (assetType as any === Texture2D) {\r\n            url += \"/texture\";\r\n        }\r\n        return new Promise(async (resolve, reject) => {\r\n            // @ts-ignore\r\n            oops.res.load(bundleName, url, (err: Error, res: any) => {\r\n                if (!err) {\r\n                    // 加载成功\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    //加载失败\r\n                    reject(err);\r\n                    console.error(`外部资源包${bundleName}，路径${url},加载失败`, err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 加载预制体\r\n     * @param bundleName ab包名（模块名）\r\n     * @param assetName 资源名\r\n     */\r\n    public static loadPrefab<TBundleName extends BundleName, TAssetName = keyof BundleConfig['BundleName'][TBundleName]['prefab']>\r\n        (bundleName: TBundleName, assetName: NoInfer<TAssetName>): Promise<Prefab> {\r\n        return this.loadAsset(bundleName, assetName, Prefab);\r\n\r\n    }\r\n\r\n    /**\r\n     * 加载音频\r\n     * @param bundleName ab包名（模块名）\r\n     * @param assetName 资源名\r\n     */\r\n    public static loadAudio<TBundleName extends BundleName, TAssetName = keyof BundleConfig['BundleName'][TBundleName]['sound']>\r\n        (bundleName: TBundleName, assetName: NoInfer<TAssetName>): Promise<AudioClip> {\r\n        return this.loadAsset(bundleName, assetName, AudioClip);\r\n    }\r\n\r\n    /**\r\n     * 加载图片\r\n     * @param bundleName ab包名（模块名）\r\n     * @param assetName 资源名\r\n     */\r\n    public static loadTextre<TBundleName extends BundleName, TAssetName = keyof BundleConfig['BundleName'][TBundleName]['texture']>\r\n        (bundleName: TBundleName, assetName: NoInfer<TAssetName>): Promise<SpriteFrame> {\r\n        return this.loadAsset(bundleName, assetName, SpriteFrame);\r\n    }\r\n\r\n\r\n    /**\r\n     * 通过资源相对路径释放资源\r\n     * @param bundleName     ab包名（模块名）\r\n     * @param assetName      资源名\r\n     */\r\n    public static release<T extends typeof Asset, TBundleName extends BundleName, TAssetName = keyof BundleConfig['BundleName'][TBundleName]['prefab'] | keyof BundleConfig['BundleName'][TBundleName]['sound'] | keyof BundleConfig['BundleName'][TBundleName]['texture']>\r\n        (bundleName: TBundleName, assetName: TAssetName, assetType: T) {\r\n        let str = this.getAssetUrl(assetType);\r\n        // @ts-ignore\r\n        let url: string = BundleConfig.BundleName[bundleName][str][assetName];\r\n        // 兼容3.x ,加载 SpriteFrame 路径需要添加后缀\r\n        if (assetType as any === SpriteFrame) {\r\n            url += \"/spriteFrame\";\r\n        }\r\n        else if (assetType as any === Texture2D) {\r\n            url += \"/texture\";\r\n        }\r\n        oops.res.release(url, bundleName);\r\n    }\r\n}"]}