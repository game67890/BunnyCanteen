{"version":3,"sources":["file:///F:/TON-Game/src/trunk/client/assets/resources/libs/utils/res/res_loader.ts"],"names":["ResLoader","Asset","assetManager","js","resources","resLeakChecker","parseLoadResArgs","paths","type","onProgress","onComplete","pathsOut","typeOut","onProgressOut","onCompleteOut","undefined","isValidType","isChildClassOf","finalComplete","error","resource","urls","Array","forEach","element","traceAsset","loadByBundleAndArgs","bundle","args","dir","loadDir","load","loadByArgs","bundles","has","get","loadBundle","err","bundleName","loadRemote","url","options","asyncLoad","result","Promise","resolve","reject","resLoader","data"],"mappings":";;;mHAiBqBA,S;;;;;;;;;;;;;;;;;;;AAjBbC,MAAAA,K,OAAAA,K;AAAqBC,MAAAA,Y,OAAAA,Y;AAAcC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,S,OAAAA,S;;;;;;;;;yBAiB1BJ,S,GAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA,eAEpBK,cAFoB,GAEa,IAFb;AAAA;;AAIpBC,QAAAA,gBAAgB,CACnBC,KADmB,EAEnBC,IAFmB,EAGnBC,UAHmB,EAInBC,UAJmB,EAKrB;AACE,cAAIC,QAAa,GAAGJ,KAApB;AACA,cAAIK,OAAY,GAAGJ,IAAnB;AACA,cAAIK,aAAkB,GAAGJ,UAAzB;AACA,cAAIK,aAAkB,GAAGJ,UAAzB;;AACA,cAAIA,UAAU,KAAKK,SAAnB,EAA8B;AAC1B,gBAAMC,WAAW,GAAGb,EAAE,CAACc,cAAH,CAAkBT,IAAlB,EAAqCP,KAArC,CAApB;;AACA,gBAAIQ,UAAJ,EAAgB;AACZK,cAAAA,aAAa,GAAGL,UAAhB;;AACA,kBAAIO,WAAJ,EAAiB;AACbH,gBAAAA,aAAa,GAAG,IAAhB;AACH;AACJ,aALD,MAKO,IAAIJ,UAAU,KAAKM,SAAf,IAA4B,CAACC,WAAjC,EAA8C;AACjDF,cAAAA,aAAa,GAAGN,IAAhB;AACAK,cAAAA,aAAa,GAAG,IAAhB;AACAD,cAAAA,OAAO,GAAG,IAAV;AACH;;AACD,gBAAIH,UAAU,KAAKM,SAAf,IAA4B,CAACC,WAAjC,EAA8C;AAC1CH,cAAAA,aAAa,GAAGL,IAAhB;AACAI,cAAAA,OAAO,GAAG,IAAV;AACH;AACJ;;AACD,cAAIM,aAAa,GAAG,CAACC,KAAD,EAAeC,QAAf,EAAsCC,IAAtC,KAA0D;AAC1E,gBAAI,KAAKhB,cAAT,EAAyB;AACrB,kBAAIe,QAAQ,YAAYE,KAAxB,EAA+B;AAC3BF,gBAAAA,QAAQ,CAACG,OAAT,CAAiBC,OAAO,IAAI;AACxB,uBAAKnB,cAAL,CAAoBoB,UAApB,CAA+BD,OAA/B;AACH,iBAFD;AAGH,eAJD,MAIO;AACH,qBAAKnB,cAAL,CAAoBoB,UAApB,CAA+BL,QAA/B;AACH;AACJ;;AACD,gBAAIN,aAAJ,EAAmB;AACfA,cAAAA,aAAa,CAACK,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,CAAb;AACH;AACJ,WAbD;;AAcA,iBAAO;AAACd,YAAAA,KAAK,EAAEI,QAAR;AAAkBH,YAAAA,IAAI,EAAEI,OAAxB;AAAiCH,YAAAA,UAAU,EAAEI,aAA7C;AAA4DH,YAAAA,UAAU,EAAEQ;AAAxE,WAAP;AACH;;AAEOQ,QAAAA,mBAAmB,CAAkBC,MAAlB,EAA+CC,IAA/C,EAA2E;AAClG,cAAIA,IAAI,CAACC,GAAT,EAAc;AACVF,YAAAA,MAAM,CAACG,OAAP,CAAeF,IAAI,CAACrB,KAApB,EAAqCqB,IAAI,CAACpB,IAA1C,EAAgDoB,IAAI,CAACnB,UAArD,EAAiEmB,IAAI,CAAClB,UAAtE;AACH,WAFD,MAEO;AACH,gBAAI,OAAOkB,IAAI,CAACrB,KAAZ,IAAqB,QAAzB,EAAmC;AAC/BoB,cAAAA,MAAM,CAACI,IAAP,CAAYH,IAAI,CAACrB,KAAjB,EAAwBqB,IAAI,CAACpB,IAA7B,EAAmCoB,IAAI,CAACnB,UAAxC,EAAoDmB,IAAI,CAAClB,UAAzD;AACH,aAFD,MAEO;AACHiB,cAAAA,MAAM,CAACI,IAAP,CAAYH,IAAI,CAACrB,KAAjB,EAAwBqB,IAAI,CAACpB,IAA7B,EAAmCoB,IAAI,CAACnB,UAAxC,EAAoDmB,IAAI,CAAClB,UAAzD;AACH;AACJ;AACJ;;AAEOsB,QAAAA,UAAU,CAAkBJ,IAAlB,EAAwC;AACtD,cAAIA,IAAI,CAACD,MAAT,EAAiB;AACb,gBAAIzB,YAAY,CAAC+B,OAAb,CAAqBC,GAArB,CAAyBN,IAAI,CAACD,MAA9B,CAAJ,EAA2C;AACvC,kBAAIA,MAAM,GAAGzB,YAAY,CAAC+B,OAAb,CAAqBE,GAArB,CAAyBP,IAAI,CAACD,MAA9B,CAAb;AACA,mBAAKD,mBAAL,CAAyBC,MAAzB,EAAkCC,IAAlC;AACH,aAHD,MAGO;AACH;AACA1B,cAAAA,YAAY,CAACkC,UAAb,CAAwBR,IAAI,CAACD,MAA7B,EAAqC,CAACU,GAAD,EAAMV,MAAN,KAAiB;AAClD,oBAAI,CAACU,GAAL,EAAU;AACN,uBAAKX,mBAAL,CAAyBC,MAAzB,EAAiCC,IAAjC;AACH;AACJ,eAJD;AAKH;AACJ,WAZD,MAYO;AACH,iBAAKF,mBAAL,CAAyBtB,SAAzB,EAAoCwB,IAApC;AACH;AACJ;;AAUMG,QAAAA,IAAI,CACPO,UADO,EAEP/B,KAFO,EAGPC,IAHO,EAIPC,UAJO,EAKPC,UALO,EAMT;AACE,cAAIkB,IAAJ;;AACA,cAAI,OAAOrB,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYe,KAAlD,EAAyD;AACrDM,YAAAA,IAAI,GAAG,KAAKtB,gBAAL,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,UAAnC,EAA+CC,UAA/C,CAAP;AACAkB,YAAAA,IAAI,CAACD,MAAL,GAAcW,UAAd;AACH,WAHD,MAGO;AACHV,YAAAA,IAAI,GAAG,KAAKtB,gBAAL,CAAsBgC,UAAtB,EAAkC/B,KAAlC,EAAyCC,IAAzC,EAA+CC,UAA/C,CAAP;AACH;;AACD,eAAKuB,UAAL,CAAgBJ,IAAhB;AACH;;AAUME,QAAAA,OAAO,CACVQ,UADU,EAEVT,GAFU,EAGVrB,IAHU,EAIVC,UAJU,EAKVC,UALU,EAMZ;AACE,cAAIkB,IAAJ;;AACA,cAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AACzBD,YAAAA,IAAI,GAAG,KAAKtB,gBAAL,CAAsBuB,GAAtB,EAA2BrB,IAA3B,EAAiCC,UAAjC,EAA6CC,UAA7C,CAAP;AACAkB,YAAAA,IAAI,CAACD,MAAL,GAAcW,UAAd;AACH,WAHD,MAGO;AACHV,YAAAA,IAAI,GAAG,KAAKtB,gBAAL,CAAsBgC,UAAtB,EAAkCT,GAAlC,EAAuCrB,IAAvC,EAA6CC,UAA7C,CAAP;AACH;;AACDmB,UAAAA,IAAI,CAACC,GAAL,GAAWD,IAAI,CAACrB,KAAhB;AACA,eAAKyB,UAAL,CAAgBJ,IAAhB;AACH;;AAIMW,QAAAA,UAAU,CAAkBC,GAAlB,EAA+BC,OAA/B,EAAqF/B,UAArF,EAAoI;AACjJR,UAAAA,YAAY,CAACqC,UAAb,CAAwBC,GAAxB,EAA6BC,OAA7B,EAAsC/B,UAAtC;AACH;AAED;AACJ;AACA;;;AACiBgC,QAAAA,SAAS,CAAkBJ,UAAlB,EAAsC/B,KAAtC,EAAgEC,IAAhE,EAA8H;AAAA;AAEhJ,gBAAI;AACA,kBAAMmC,MAAM,SAAS,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAClDC,gBAAAA,SAAS,CAAChB,IAAV,CAAeO,UAAf,EAA2B/B,KAA3B,EAAkCC,IAAlC,EAAwC,CAAC6B,GAAD,EAAMW,IAAN,KAAoB;AACxD,sBAAIX,GAAJ,EAAS;AACL,0BAAMA,GAAN;AACH;;AACDQ,kBAAAA,OAAO,CAACG,IAAD,CAAP;AACH,iBALD;AAMA,uBAAOL,MAAP;AACH,eARoB,CAArB;AAUA,qBAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACH,aAZD,CAYE,OAAON,GAAP,EAAY;AACV,qBAAO,CAAC,IAAD,EAAOA,GAAP,CAAP;AACH;AAhB+I;AAiBnJ;;AA3J0B,O;;2BA8JpBU,S,GAAY,IAAI/C,SAAJ,E","sourcesContent":["import {Asset, AssetManager, assetManager, js, resources} from \"cc\";\nimport {ResLeakChecker} from \"./res_leak_checker\";\n\nexport type ProgressCallback = (completedCount: number, totalCount: number, item: any) => void;\nexport type CompleteCallback<T = any> = (error: Error, resource: any | any[], urls?: string[]) => void;\nexport type IRemoteOptions = Record<string, any> | null;\nexport type AssetType<T = Asset> = typeof Asset;\n\ninterface LoadResArgs<T extends Asset> {\n    bundle?: string;\n    dir?: string;\n    paths: string | string[];\n    type: AssetType<T> | null;\n    onProgress: ProgressCallback | null;\n    onComplete: CompleteCallback<T> | null;\n}\n\nexport default class ResLoader {\n\n    public resLeakChecker: ResLeakChecker = null;\n\n    public parseLoadResArgs<T extends Asset>(\n        paths: string | string[],\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\n        onProgress?: AssetType<T> | ProgressCallback | CompleteCallback | null,\n        onComplete?: ProgressCallback | CompleteCallback | null\n    ) {\n        let pathsOut: any = paths;\n        let typeOut: any = type;\n        let onProgressOut: any = onProgress;\n        let onCompleteOut: any = onComplete;\n        if (onComplete === undefined) {\n            const isValidType = js.isChildClassOf(type as AssetType, Asset);\n            if (onProgress) {\n                onCompleteOut = onProgress as CompleteCallback;\n                if (isValidType) {\n                    onProgressOut = null;\n                }\n            } else if (onProgress === undefined && !isValidType) {\n                onCompleteOut = type as CompleteCallback;\n                onProgressOut = null;\n                typeOut = null;\n            }\n            if (onProgress !== undefined && !isValidType) {\n                onProgressOut = type as ProgressCallback;\n                typeOut = null;\n            }\n        }\n        let finalComplete = (error: Error, resource: any | any[], urls?: string[]) => {\n            if (this.resLeakChecker) {\n                if (resource instanceof Array) {\n                    resource.forEach(element => {\n                        this.resLeakChecker.traceAsset(element);\n                    });\n                } else {\n                    this.resLeakChecker.traceAsset(resource);\n                }\n            }\n            if (onCompleteOut) {\n                onCompleteOut(error, resource, urls);\n            }\n        }\n        return {paths: pathsOut, type: typeOut, onProgress: onProgressOut, onComplete: finalComplete};\n    }\n\n    private loadByBundleAndArgs<T extends Asset>(bundle: AssetManager.Bundle, args: LoadResArgs<T>): void {\n        if (args.dir) {\n            bundle.loadDir(args.paths as string, args.type, args.onProgress, args.onComplete);\n        } else {\n            if (typeof args.paths == 'string') {\n                bundle.load(args.paths, args.type, args.onProgress, args.onComplete);\n            } else {\n                bundle.load(args.paths, args.type, args.onProgress, args.onComplete);\n            }\n        }\n    }\n\n    private loadByArgs<T extends Asset>(args: LoadResArgs<T>) {\n        if (args.bundle) {\n            if (assetManager.bundles.has(args.bundle)) {\n                let bundle = assetManager.bundles.get(args.bundle);\n                this.loadByBundleAndArgs(bundle!, args);\n            } else {\n                // 自动加载bundle\n                assetManager.loadBundle(args.bundle, (err, bundle) => {\n                    if (!err) {\n                        this.loadByBundleAndArgs(bundle, args);\n                    }\n                })\n            }\n        } else {\n            this.loadByBundleAndArgs(resources, args);\n        }\n    }\n\n    public load<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(bundleName: string, paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(bundleName: string, paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], onProgress: ProgressCallback | null, onComplete: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(paths: string | string[], type: AssetType<T> | null, onComplete?: CompleteCallback<T> | null): void;\n    public load<T extends Asset>(\n        bundleName: string,\n        paths?: string | string[] | AssetType<T> | ProgressCallback | CompleteCallback | null,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\n        onProgress?: ProgressCallback | CompleteCallback | null,\n        onComplete?: CompleteCallback | null,\n    ) {\n        let args: LoadResArgs<T> | null;\n        if (typeof paths === \"string\" || paths instanceof Array) {\n            args = this.parseLoadResArgs(paths, type, onProgress, onComplete);\n            args.bundle = bundleName;\n        } else {\n            args = this.parseLoadResArgs(bundleName, paths, type, onProgress);\n        }\n        this.loadByArgs(args);\n    }\n\n    public loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(bundleName: string, dir: string, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(bundleName: string, dir: string, onComplete?: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(bundleName: string, dir: string, type: AssetType<T> | null, onComplete?: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(dir: string, type: AssetType<T> | null, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(dir: string, onProgress: ProgressCallback | null, onComplete: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(dir: string, onComplete?: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(dir: string, type: AssetType<T> | null, onComplete?: CompleteCallback<T[]> | null): void;\n    public loadDir<T extends Asset>(\n        bundleName: string,\n        dir?: string | AssetType<T> | ProgressCallback | CompleteCallback | null,\n        type?: AssetType<T> | ProgressCallback | CompleteCallback | null,\n        onProgress?: ProgressCallback | CompleteCallback | null,\n        onComplete?: CompleteCallback | null,\n    ) {\n        let args: LoadResArgs<T> | null;\n        if (typeof dir === \"string\") {\n            args = this.parseLoadResArgs(dir, type, onProgress, onComplete);\n            args.bundle = bundleName;\n        } else {\n            args = this.parseLoadResArgs(bundleName, dir, type, onProgress);\n        }\n        args.dir = args.paths as string;\n        this.loadByArgs(args);\n    }\n\n    public loadRemote<T extends Asset>(url: string, options: IRemoteOptions | null, onComplete?: CompleteCallback<T> | null): void;\n    public loadRemote<T extends Asset>(url: string, onComplete?: CompleteCallback<T> | null): void;\n    public loadRemote<T extends Asset>(url: string, options: IRemoteOptions | CompleteCallback<T> | null, onComplete?: CompleteCallback<T> | null): void {\n        assetManager.loadRemote(url, options, onComplete);\n    }\n\n    /**\n     * @description 同步调用\n     */\n    public async asyncLoad<T extends Asset>(bundleName: string, paths: string | string[], type: AssetType<T> | null): Promise<[T | null, Error | null]> {\n\n        try {\n            const result = await new Promise((resolve, reject) => {\n                resLoader.load(bundleName, paths, type, (err, data: any) => {\n                    if (err) {\n                        throw err;\n                    }\n                    resolve(data);\n                });\n                return result;\n            });\n\n            return [null, null];\n        } catch (err) {\n            return [null, err];\n        }\n    }\n}\n\nexport let resLoader = new ResLoader();\n"]}